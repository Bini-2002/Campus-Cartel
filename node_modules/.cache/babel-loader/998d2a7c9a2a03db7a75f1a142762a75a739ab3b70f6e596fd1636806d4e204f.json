{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// src/query/core/apiState.ts\nvar QueryStatus = /* @__PURE__ */(QueryStatus2 => {\n  QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n  QueryStatus2[\"pending\"] = \"pending\";\n  QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n  QueryStatus2[\"rejected\"] = \"rejected\";\n  return QueryStatus2;\n})(QueryStatus || {});\nfunction getRequestStatusFlags(status) {\n  return {\n    status,\n    isUninitialized: status === \"uninitialized\" /* uninitialized */,\n    isLoading: status === \"pending\" /* pending */,\n    isSuccess: status === \"fulfilled\" /* fulfilled */,\n    isError: status === \"rejected\" /* rejected */\n  };\n}\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ReducerType: () => ReducerType,\n  SHOULD_AUTOBATCH: () => SHOULD_AUTOBATCH,\n  TaskAbortError: () => TaskAbortError,\n  Tuple: () => Tuple,\n  addListener: () => addListener,\n  asyncThunkCreator: () => asyncThunkCreator,\n  autoBatchEnhancer: () => autoBatchEnhancer,\n  buildCreateSlice: () => buildCreateSlice,\n  clearAllListeners: () => clearAllListeners,\n  combineSlices: () => combineSlices,\n  configureStore: () => configureStore,\n  createAction: () => createAction,\n  createActionCreatorInvariantMiddleware: () => createActionCreatorInvariantMiddleware,\n  createAsyncThunk: () => createAsyncThunk,\n  createDraftSafeSelector: () => createDraftSafeSelector,\n  createDraftSafeSelectorCreator: () => createDraftSafeSelectorCreator,\n  createDynamicMiddleware: () => createDynamicMiddleware,\n  createEntityAdapter: () => createEntityAdapter,\n  createImmutableStateInvariantMiddleware: () => createImmutableStateInvariantMiddleware,\n  createListenerMiddleware: () => createListenerMiddleware,\n  createNextState: () => produce,\n  createReducer: () => createReducer,\n  createSelector: () => createSelector,\n  createSelectorCreator: () => createSelectorCreator2,\n  createSerializableStateInvariantMiddleware: () => createSerializableStateInvariantMiddleware,\n  createSlice: () => createSlice,\n  current: () => current3,\n  findNonSerializableValue: () => findNonSerializableValue,\n  formatProdErrorMessage: () => formatProdErrorMessage,\n  freeze: () => freeze,\n  isActionCreator: () => isActionCreator,\n  isAllOf: () => isAllOf,\n  isAnyOf: () => isAnyOf,\n  isAsyncThunkAction: () => isAsyncThunkAction,\n  isDraft: () => isDraft5,\n  isFluxStandardAction: () => isFSA,\n  isFulfilled: () => isFulfilled,\n  isImmutableDefault: () => isImmutableDefault,\n  isPending: () => isPending,\n  isPlain: () => isPlain,\n  isRejected: () => isRejected,\n  isRejectedWithValue: () => isRejectedWithValue,\n  lruMemoize: () => lruMemoize,\n  miniSerializeError: () => miniSerializeError,\n  nanoid: () => nanoid,\n  original: () => original2,\n  prepareAutoBatched: () => prepareAutoBatched,\n  removeListener: () => removeListener,\n  unwrapResult: () => unwrapResult,\n  weakMapMemoize: () => weakMapMemoize2\n});\n__reExport(src_exports, redux_star);\nimport * as redux_star from \"redux\";\nimport { produce, current as current3, freeze, original as original2, isDraft as isDraft5 } from \"immer\";\nimport { createSelector, createSelectorCreator as createSelectorCreator2, lruMemoize, weakMapMemoize as weakMapMemoize2 } from \"reselect\";\n\n// src/createDraftSafeSelector.ts\nimport { current, isDraft } from \"immer\";\nimport { createSelectorCreator, weakMapMemoize } from \"reselect\";\nvar createDraftSafeSelectorCreator = (...args) => {\n  const createSelector2 = createSelectorCreator(...args);\n  const createDraftSafeSelector2 = Object.assign((...args2) => {\n    const selector = createSelector2(...args2);\n    const wrappedSelector = (value, ...rest) => selector(isDraft(value) ? current(value) : value, ...rest);\n    Object.assign(wrappedSelector, selector);\n    return wrappedSelector;\n  }, {\n    withTypes: () => createDraftSafeSelector2\n  });\n  return createDraftSafeSelector2;\n};\nvar createDraftSafeSelector = /* @__PURE__ */createDraftSafeSelectorCreator(weakMapMemoize);\n\n// src/configureStore.ts\nimport { applyMiddleware, createStore, compose as compose2, combineReducers, isPlainObject as isPlainObject2 } from \"redux\";\n\n// src/devtoolsExtension.ts\nimport { compose } from \"redux\";\nvar composeWithDevTools = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\n  if (arguments.length === 0) return void 0;\n  if (typeof arguments[0] === \"object\") return compose;\n  return compose.apply(null, arguments);\n};\nvar devToolsEnhancer = typeof window !== \"undefined\" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function () {\n  return function (noop3) {\n    return noop3;\n  };\n};\n\n// src/getDefaultMiddleware.ts\nimport { thunk as thunkMiddleware, withExtraArgument } from \"redux-thunk\";\n\n// src/createAction.ts\nimport { isAction } from \"redux\";\n\n// src/tsHelpers.ts\nvar hasMatchFunction = v => {\n  return v && typeof v.match === \"function\";\n};\nfunction asSafePromise(promise, fallback) {\n  return promise.catch(fallback);\n}\n\n// src/createAction.ts\nfunction createAction(type, prepareAction) {\n  function actionCreator(...args) {\n    if (prepareAction) {\n      let prepared = prepareAction(...args);\n      if (!prepared) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(0) : \"prepareAction did not return an object\");\n      }\n      return {\n        type,\n        payload: prepared.payload,\n        ...(\"meta\" in prepared && {\n          meta: prepared.meta\n        }),\n        ...(\"error\" in prepared && {\n          error: prepared.error\n        })\n      };\n    }\n    return {\n      type,\n      payload: args[0]\n    };\n  }\n  actionCreator.toString = () => `${type}`;\n  actionCreator.type = type;\n  actionCreator.match = action => isAction(action) && action.type === type;\n  return actionCreator;\n}\nfunction isActionCreator(action) {\n  return typeof action === \"function\" && \"type\" in action &&\n  // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n  hasMatchFunction(action);\n}\nfunction isFSA(action) {\n  return isAction(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key) {\n  return [\"type\", \"payload\", \"error\", \"meta\"].indexOf(key) > -1;\n}\n\n// src/actionCreatorInvariantMiddleware.ts\nfunction getMessage(type) {\n  const splitType = type ? `${type}`.split(\"/\") : [];\n  const actionName = splitType[splitType.length - 1] || \"actionCreator\";\n  return `Detected an action creator with type \"${type || \"unknown\"}\" being dispatched. \nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\n}\nfunction createActionCreatorInvariantMiddleware(options = {}) {\n  if (process.env.NODE_ENV === \"production\") {\n    return () => next => action => next(action);\n  }\n  const {\n    isActionCreator: isActionCreator2 = isActionCreator\n  } = options;\n  return () => next => action => {\n    if (isActionCreator2(action)) {\n      console.warn(getMessage(action.type));\n    }\n    return next(action);\n  };\n}\n\n// src/utils.ts\nimport { produce as createNextState, isDraftable } from \"immer\";\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  let elapsed = 0;\n  return {\n    measureTime(fn) {\n      const started = Date.now();\n      try {\n        return fn();\n      } finally {\n        const finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.`);\n      }\n    }\n  };\n}\nvar Tuple = class _Tuple extends Array {\n  constructor(...items) {\n    super(...items);\n    Object.setPrototypeOf(this, _Tuple.prototype);\n  }\n  static get [Symbol.species]() {\n    return _Tuple;\n  }\n  concat(...arr) {\n    return super.concat.apply(this, arr);\n  }\n  prepend(...arr) {\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new _Tuple(...arr[0].concat(this));\n    }\n    return new _Tuple(...arr.concat(this));\n  }\n};\nfunction freezeDraftable(val) {\n  return isDraftable(val) ? createNextState(val, () => {}) : val;\n}\nfunction getOrInsertComputed(map, key, compute) {\n  if (map.has(key)) return map.get(key);\n  return map.set(key, compute(key)).get(key);\n}\n\n// src/immutableStateInvariantMiddleware.ts\nfunction isImmutableDefault(value) {\n  return typeof value !== \"object\" || value == null || Object.isFrozen(value);\n}\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations() {\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\nfunction trackProperties(isImmutable, ignorePaths = [], obj, path = \"\", checkedObjects = /* @__PURE__ */new Set()) {\n  const tracked = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (const key in obj) {\n      const childPath = path ? path + \".\" + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked;\n}\nfunction detectMutations(isImmutable, ignoredPaths = [], trackedProperty, obj, sameParentRef = false, path = \"\") {\n  const prevObj = trackedProperty ? trackedProperty.value : void 0;\n  const sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n  const keysToDetect = {};\n  for (let key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (let key in obj) {\n    keysToDetect[key] = true;\n  }\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (let key in keysToDetect) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some(ignored => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n    if (result.wasMutated) {\n      return result;\n    }\n  }\n  return {\n    wasMutated: false\n  };\n}\nfunction createImmutableStateInvariantMiddleware(options = {}) {\n  if (process.env.NODE_ENV === \"production\") {\n    return () => next => action => next(action);\n  } else {\n    let stringify2 = function (obj, serializer, indent, decycler) {\n        return JSON.stringify(obj, getSerialize2(serializer, decycler), indent);\n      },\n      getSerialize2 = function (serializer, decycler) {\n        let stack = [],\n          keys = [];\n        if (!decycler) decycler = function (_, value) {\n          if (stack[0] === value) return \"[Circular ~]\";\n          return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n        };\n        return function (key, value) {\n          if (stack.length > 0) {\n            var thisPos = stack.indexOf(this);\n            ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n            ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n            if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n          } else stack.push(value);\n          return serializer == null ? value : serializer.call(this, key, value);\n        };\n      };\n    var stringify = stringify2,\n      getSerialize = getSerialize2;\n    let {\n      isImmutable = isImmutableDefault,\n      ignoredPaths,\n      warnAfter = 32\n    } = options;\n    const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return ({\n      getState\n    }) => {\n      let state = getState();\n      let tracker = track(state);\n      let result;\n      return next => action => {\n        const measureUtils = getTimeMeasureUtils(warnAfter, \"ImmutableStateInvariantMiddleware\");\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(19) : `A state mutation was detected between dispatches, in the path '${result.path || \"\"}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        const dispatchedAction = next(action);\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(20) : `A state mutation was detected inside a dispatch, in the path: ${result.path || \"\"}. Take a look at the reducer(s) handling the action ${stringify2(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  }\n}\n\n// src/serializableStateInvariantMiddleware.ts\nimport { isAction as isAction2, isPlainObject } from \"redux\";\nfunction isPlain(val) {\n  const type = typeof val;\n  return val == null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(val) || isPlainObject(val);\n}\nfunction findNonSerializableValue(value, path = \"\", isSerializable = isPlain, getEntries, ignoredPaths = [], cache2) {\n  let foundNestedSerializable;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || \"<root>\",\n      value\n    };\n  }\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  if (cache2?.has(value)) return false;\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (const [key, nestedValue] of entries) {\n    const nestedPath = path ? path + \".\" + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some(ignored => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    if (!isSerializable(nestedValue)) {\n      return {\n        keyPath: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === \"object\") {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache2);\n      if (foundNestedSerializable) {\n        return foundNestedSerializable;\n      }\n    }\n  }\n  if (cache2 && isNestedFrozen(value)) cache2.add(value);\n  return false;\n}\nfunction isNestedFrozen(value) {\n  if (!Object.isFrozen(value)) return false;\n  for (const nestedValue of Object.values(value)) {\n    if (typeof nestedValue !== \"object\" || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\nfunction createSerializableStateInvariantMiddleware(options = {}) {\n  if (process.env.NODE_ENV === \"production\") {\n    return () => next => action => next(action);\n  } else {\n    const {\n      isSerializable = isPlain,\n      getEntries,\n      ignoredActions = [],\n      ignoredActionPaths = [\"meta.arg\", \"meta.baseQueryMeta\"],\n      ignoredPaths = [],\n      warnAfter = 32,\n      ignoreState = false,\n      ignoreActions = false,\n      disableCache = false\n    } = options;\n    const cache2 = !disableCache && WeakSet ? /* @__PURE__ */new WeakSet() : void 0;\n    return storeAPI => next => action => {\n      if (!isAction2(action)) {\n        return next(action);\n      }\n      const result = next(action);\n      const measureUtils = getTimeMeasureUtils(warnAfter, \"SerializableStateInvariantMiddleware\");\n      if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {\n        measureUtils.measureTime(() => {\n          const foundActionNonSerializableValue = findNonSerializableValue(action, \"\", isSerializable, getEntries, ignoredActionPaths, cache2);\n          if (foundActionNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundActionNonSerializableValue;\n            console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, \"\\nTake a look at the logic that dispatched this action: \", action, \"\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)\", \"\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)\");\n          }\n        });\n      }\n      if (!ignoreState) {\n        measureUtils.measureTime(() => {\n          const state = storeAPI.getState();\n          const foundStateNonSerializableValue = findNonSerializableValue(state, \"\", isSerializable, getEntries, ignoredPaths, cache2);\n          if (foundStateNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundStateNonSerializableValue;\n            console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\nTake a look at the reducer(s) handling this action type: ${action.type}.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n      }\n      return result;\n    };\n  }\n}\n\n// src/getDefaultMiddleware.ts\nfunction isBoolean(x) {\n  return typeof x === \"boolean\";\n}\nvar buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {\n  const {\n    thunk = true,\n    immutableCheck = true,\n    serializableCheck = true,\n    actionCreatorCheck = true\n  } = options ?? {};\n  let middlewareArray = new Tuple();\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(thunkMiddleware);\n    } else {\n      middlewareArray.push(withExtraArgument(thunk.extraArgument));\n    }\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    if (immutableCheck) {\n      let immutableOptions = {};\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n    }\n    if (serializableCheck) {\n      let serializableOptions = {};\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n    if (actionCreatorCheck) {\n      let actionCreatorOptions = {};\n      if (!isBoolean(actionCreatorCheck)) {\n        actionCreatorOptions = actionCreatorCheck;\n      }\n      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n    }\n  }\n  return middlewareArray;\n};\n\n// src/autoBatchEnhancer.ts\nvar SHOULD_AUTOBATCH = \"RTK_autoBatch\";\nvar prepareAutoBatched = () => payload => ({\n  payload,\n  meta: {\n    [SHOULD_AUTOBATCH]: true\n  }\n});\nvar createQueueWithTimer = timeout => {\n  return notify => {\n    setTimeout(notify, timeout);\n  };\n};\nvar autoBatchEnhancer = (options = {\n  type: \"raf\"\n}) => next => (...args) => {\n  const store = next(...args);\n  let notifying = true;\n  let shouldNotifyAtEndOfTick = false;\n  let notificationQueued = false;\n  const listeners = /* @__PURE__ */new Set();\n  const queueCallback = options.type === \"tick\" ? queueMicrotask : options.type === \"raf\" ?\n  // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.\n  typeof window !== \"undefined\" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10) : options.type === \"callback\" ? options.queueNotification : createQueueWithTimer(options.timeout);\n  const notifyListeners = () => {\n    notificationQueued = false;\n    if (shouldNotifyAtEndOfTick) {\n      shouldNotifyAtEndOfTick = false;\n      listeners.forEach(l => l());\n    }\n  };\n  return Object.assign({}, store, {\n    // Override the base `store.subscribe` method to keep original listeners\n    // from running if we're delaying notifications\n    subscribe(listener2) {\n      const wrappedListener = () => notifying && listener2();\n      const unsubscribe = store.subscribe(wrappedListener);\n      listeners.add(listener2);\n      return () => {\n        unsubscribe();\n        listeners.delete(listener2);\n      };\n    },\n    // Override the base `store.dispatch` method so that we can check actions\n    // for the `shouldAutoBatch` flag and determine if batching is active\n    dispatch(action) {\n      try {\n        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\n        shouldNotifyAtEndOfTick = !notifying;\n        if (shouldNotifyAtEndOfTick) {\n          if (!notificationQueued) {\n            notificationQueued = true;\n            queueCallback(notifyListeners);\n          }\n        }\n        return store.dispatch(action);\n      } finally {\n        notifying = true;\n      }\n    }\n  });\n};\n\n// src/getDefaultEnhancers.ts\nvar buildGetDefaultEnhancers = middlewareEnhancer => function getDefaultEnhancers(options) {\n  const {\n    autoBatch = true\n  } = options ?? {};\n  let enhancerArray = new Tuple(middlewareEnhancer);\n  if (autoBatch) {\n    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === \"object\" ? autoBatch : void 0));\n  }\n  return enhancerArray;\n};\n\n// src/configureStore.ts\nfunction configureStore(options) {\n  const getDefaultMiddleware = buildGetDefaultMiddleware();\n  const {\n    reducer = void 0,\n    middleware,\n    devTools = true,\n    duplicateMiddlewareCheck = true,\n    preloadedState = void 0,\n    enhancers = void 0\n  } = options || {};\n  let rootReducer;\n  if (typeof reducer === \"function\") {\n    rootReducer = reducer;\n  } else if (isPlainObject2(reducer)) {\n    rootReducer = combineReducers(reducer);\n  } else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(1) : \"`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && middleware && typeof middleware !== \"function\") {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(2) : \"`middleware` field must be a callback\");\n  }\n  let finalMiddleware;\n  if (typeof middleware === \"function\") {\n    finalMiddleware = middleware(getDefaultMiddleware);\n    if (process.env.NODE_ENV !== \"production\" && !Array.isArray(finalMiddleware)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(3) : \"when using a middleware builder function, an array of middleware must be returned\");\n    }\n  } else {\n    finalMiddleware = getDefaultMiddleware();\n  }\n  if (process.env.NODE_ENV !== \"production\" && finalMiddleware.some(item => typeof item !== \"function\")) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(4) : \"each middleware provided to configureStore must be a function\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && duplicateMiddlewareCheck) {\n    let middlewareReferences = /* @__PURE__ */new Set();\n    finalMiddleware.forEach(middleware2 => {\n      if (middlewareReferences.has(middleware2)) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(42) : \"Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.\");\n      }\n      middlewareReferences.add(middleware2);\n    });\n  }\n  let finalCompose = compose2;\n  if (devTools) {\n    finalCompose = composeWithDevTools({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: process.env.NODE_ENV !== \"production\",\n      ...(typeof devTools === \"object\" && devTools)\n    });\n  }\n  const middlewareEnhancer = applyMiddleware(...finalMiddleware);\n  const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);\n  if (process.env.NODE_ENV !== \"production\" && enhancers && typeof enhancers !== \"function\") {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(5) : \"`enhancers` field must be a callback\");\n  }\n  let storeEnhancers = typeof enhancers === \"function\" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n  if (process.env.NODE_ENV !== \"production\" && !Array.isArray(storeEnhancers)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(6) : \"`enhancers` callback must return an array\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && storeEnhancers.some(item => typeof item !== \"function\")) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(7) : \"each enhancer provided to configureStore must be a function\");\n  }\n  if (process.env.NODE_ENV !== \"production\" && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n    console.error(\"middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`\");\n  }\n  const composedEnhancer = finalCompose(...storeEnhancers);\n  return createStore(rootReducer, preloadedState, composedEnhancer);\n}\n\n// src/createReducer.ts\nimport { produce as createNextState2, isDraft as isDraft2, isDraftable as isDraftable2 } from \"immer\";\n\n// src/mapBuilders.ts\nfunction executeReducerBuilderCallback(builderCallback) {\n  const actionsMap = {};\n  const actionMatchers = [];\n  let defaultCaseReducer;\n  const builder = {\n    addCase(typeOrActionCreator, reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (actionMatchers.length > 0) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(26) : \"`builder.addCase` should only be called before calling `builder.addMatcher`\");\n        }\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(27) : \"`builder.addCase` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(28) : \"`builder.addCase` cannot be called with an empty action type\");\n      }\n      if (type in actionsMap) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(29) : `\\`builder.addCase\\` cannot be called with two reducers for the same action type '${type}'`);\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher(matcher, reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(30) : \"`builder.addMatcher` should only be called before calling `builder.addDefaultCase`\");\n        }\n      }\n      actionMatchers.push({\n        matcher,\n        reducer\n      });\n      return builder;\n    },\n    addDefaultCase(reducer) {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(31) : \"`builder.addDefaultCase` can only be called once\");\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}\n\n// src/createReducer.ts\nfunction isStateFunction(x) {\n  return typeof x === \"function\";\n}\nfunction createReducer(initialState2, mapOrBuilderCallback) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof mapOrBuilderCallback === \"object\") {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(8) : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n    }\n  }\n  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\n  let getInitialState;\n  if (isStateFunction(initialState2)) {\n    getInitialState = () => freezeDraftable(initialState2());\n  } else {\n    const frozenInitialState = freezeDraftable(initialState2);\n    getInitialState = () => frozenInitialState;\n  }\n  function reducer(state = getInitialState(), action) {\n    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({\n      matcher\n    }) => matcher(action)).map(({\n      reducer: reducer2\n    }) => reducer2)];\n    if (caseReducers.filter(cr => !!cr).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce((previousState, caseReducer) => {\n      if (caseReducer) {\n        if (isDraft2(previousState)) {\n          const draft = previousState;\n          const result = caseReducer(draft, action);\n          if (result === void 0) {\n            return previousState;\n          }\n          return result;\n        } else if (!isDraftable2(previousState)) {\n          const result = caseReducer(previousState, action);\n          if (result === void 0) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw Error(\"A case reducer on a non-draftable value must not return undefined\");\n          }\n          return result;\n        } else {\n          return createNextState2(previousState, draft => {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer;\n}\n\n// src/matchers.ts\nvar matches = (matcher, action) => {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\nfunction isAnyOf(...matchers) {\n  return action => {\n    return matchers.some(matcher => matches(matcher, action));\n  };\n}\nfunction isAllOf(...matchers) {\n  return action => {\n    return matchers.every(matcher => matches(matcher, action));\n  };\n}\nfunction hasExpectedRequestMetadata(action, validStatus) {\n  if (!action || !action.meta) return false;\n  const hasValidRequestId = typeof action.meta.requestId === \"string\";\n  const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a) {\n  return typeof a[0] === \"function\" && \"pending\" in a[0] && \"fulfilled\" in a[0] && \"rejected\" in a[0];\n}\nfunction isPending(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return action => hasExpectedRequestMetadata(action, [\"pending\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.pending));\n}\nfunction isRejected(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return action => hasExpectedRequestMetadata(action, [\"rejected\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.rejected));\n}\nfunction isRejectedWithValue(...asyncThunks) {\n  const hasFlag = action => {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  if (asyncThunks.length === 0) {\n    return isAllOf(isRejected(...asyncThunks), hasFlag);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return isAllOf(isRejected(...asyncThunks), hasFlag);\n}\nfunction isFulfilled(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return action => hasExpectedRequestMetadata(action, [\"fulfilled\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.fulfilled));\n}\nfunction isAsyncThunkAction(...asyncThunks) {\n  if (asyncThunks.length === 0) {\n    return action => hasExpectedRequestMetadata(action, [\"pending\", \"fulfilled\", \"rejected\"]);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.flatMap(asyncThunk => [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled]));\n}\n\n// src/nanoid.ts\nvar urlAlphabet = \"ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW\";\nvar nanoid = (size = 21) => {\n  let id = \"\";\n  let i = size;\n  while (i--) {\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};\n\n// src/createAsyncThunk.ts\nvar commonProperties = [\"name\", \"message\", \"stack\", \"code\"];\nvar RejectWithValue = class {\n  constructor(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _type;\n};\nvar FulfillWithMeta = class {\n  constructor(payload, meta) {\n    this.payload = payload;\n    this.meta = meta;\n  }\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  _type;\n};\nvar miniSerializeError = value => {\n  if (typeof value === \"object\" && value !== null) {\n    const simpleError = {};\n    for (const property of commonProperties) {\n      if (typeof value[property] === \"string\") {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nvar externalAbortMessage = \"External signal was aborted\";\nvar createAsyncThunk = /* @__PURE__ */(() => {\n  function createAsyncThunk2(typePrefix, payloadCreator, options) {\n    const fulfilled = createAction(typePrefix + \"/fulfilled\", (payload, requestId, arg, meta) => ({\n      payload,\n      meta: {\n        ...(meta || {}),\n        arg,\n        requestId,\n        requestStatus: \"fulfilled\"\n      }\n    }));\n    const pending = createAction(typePrefix + \"/pending\", (requestId, arg, meta) => ({\n      payload: void 0,\n      meta: {\n        ...(meta || {}),\n        arg,\n        requestId,\n        requestStatus: \"pending\"\n      }\n    }));\n    const rejected = createAction(typePrefix + \"/rejected\", (error, requestId, arg, payload, meta) => ({\n      payload,\n      error: (options && options.serializeError || miniSerializeError)(error || \"Rejected\"),\n      meta: {\n        ...(meta || {}),\n        arg,\n        requestId,\n        rejectedWithValue: !!payload,\n        requestStatus: \"rejected\",\n        aborted: error?.name === \"AbortError\",\n        condition: error?.name === \"ConditionError\"\n      }\n    }));\n    function actionCreator(arg, {\n      signal\n    } = {}) {\n      return (dispatch, getState, extra) => {\n        const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\n        const abortController = new AbortController();\n        let abortHandler;\n        let abortReason;\n        function abort(reason) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        if (signal) {\n          if (signal.aborted) {\n            abort(externalAbortMessage);\n          } else {\n            signal.addEventListener(\"abort\", () => abort(externalAbortMessage), {\n              once: true\n            });\n          }\n        }\n        const promise = async function () {\n          let finalAction;\n          try {\n            let conditionResult = options?.condition?.(arg, {\n              getState,\n              extra\n            });\n            if (isThenable(conditionResult)) {\n              conditionResult = await conditionResult;\n            }\n            if (conditionResult === false || abortController.signal.aborted) {\n              throw {\n                name: \"ConditionError\",\n                message: \"Aborted due to condition callback returning false.\"\n              };\n            }\n            const abortedPromise = new Promise((_, reject) => {\n              abortHandler = () => {\n                reject({\n                  name: \"AbortError\",\n                  message: abortReason || \"Aborted\"\n                });\n              };\n              abortController.signal.addEventListener(\"abort\", abortHandler);\n            });\n            dispatch(pending(requestId, arg, options?.getPendingMeta?.({\n              requestId,\n              arg\n            }, {\n              getState,\n              extra\n            })));\n            finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n              dispatch,\n              getState,\n              extra,\n              requestId,\n              signal: abortController.signal,\n              abort,\n              rejectWithValue: (value, meta) => {\n                return new RejectWithValue(value, meta);\n              },\n              fulfillWithValue: (value, meta) => {\n                return new FulfillWithMeta(value, meta);\n              }\n            })).then(result => {\n              if (result instanceof RejectWithValue) {\n                throw result;\n              }\n              if (result instanceof FulfillWithMeta) {\n                return fulfilled(result.payload, requestId, arg, result.meta);\n              }\n              return fulfilled(result, requestId, arg);\n            })]);\n          } catch (err) {\n            finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);\n          } finally {\n            if (abortHandler) {\n              abortController.signal.removeEventListener(\"abort\", abortHandler);\n            }\n          }\n          const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n          if (!skipDispatch) {\n            dispatch(finalAction);\n          }\n          return finalAction;\n        }();\n        return Object.assign(promise, {\n          abort,\n          requestId,\n          arg,\n          unwrap() {\n            return promise.then(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator, {\n      pending,\n      rejected,\n      fulfilled,\n      settled: isAnyOf(rejected, fulfilled),\n      typePrefix\n    });\n  }\n  createAsyncThunk2.withTypes = () => createAsyncThunk2;\n  return createAsyncThunk2;\n})();\nfunction unwrapResult(action) {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\nfunction isThenable(value) {\n  return value !== null && typeof value === \"object\" && typeof value.then === \"function\";\n}\n\n// src/createSlice.ts\nvar asyncThunkSymbol = /* @__PURE__ */Symbol.for(\"rtk-slice-createasyncthunk\");\nvar asyncThunkCreator = {\n  [asyncThunkSymbol]: createAsyncThunk\n};\nvar ReducerType = /* @__PURE__ */(ReducerType2 => {\n  ReducerType2[\"reducer\"] = \"reducer\";\n  ReducerType2[\"reducerWithPrepare\"] = \"reducerWithPrepare\";\n  ReducerType2[\"asyncThunk\"] = \"asyncThunk\";\n  return ReducerType2;\n})(ReducerType || {});\nfunction getType(slice, actionKey) {\n  return `${slice}/${actionKey}`;\n}\nfunction buildCreateSlice({\n  creators\n} = {}) {\n  const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\n  return function createSlice2(options) {\n    const {\n      name,\n      reducerPath = name\n    } = options;\n    if (!name) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(11) : \"`name` is a required option for createSlice\");\n    }\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n      if (options.initialState === void 0) {\n        console.error(\"You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`\");\n      }\n    }\n    const reducers = (typeof options.reducers === \"function\" ? options.reducers(buildReducerCreators()) : options.reducers) || {};\n    const reducerNames = Object.keys(reducers);\n    const context = {\n      sliceCaseReducersByName: {},\n      sliceCaseReducersByType: {},\n      actionCreators: {},\n      sliceMatchers: []\n    };\n    const contextMethods = {\n      addCase(typeOrActionCreator, reducer2) {\n        const type = typeof typeOrActionCreator === \"string\" ? typeOrActionCreator : typeOrActionCreator.type;\n        if (!type) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(12) : \"`context.addCase` cannot be called with an empty action type\");\n        }\n        if (type in context.sliceCaseReducersByType) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(13) : \"`context.addCase` cannot be called with two reducers for the same action type: \" + type);\n        }\n        context.sliceCaseReducersByType[type] = reducer2;\n        return contextMethods;\n      },\n      addMatcher(matcher, reducer2) {\n        context.sliceMatchers.push({\n          matcher,\n          reducer: reducer2\n        });\n        return contextMethods;\n      },\n      exposeAction(name2, actionCreator) {\n        context.actionCreators[name2] = actionCreator;\n        return contextMethods;\n      },\n      exposeCaseReducer(name2, reducer2) {\n        context.sliceCaseReducersByName[name2] = reducer2;\n        return contextMethods;\n      }\n    };\n    reducerNames.forEach(reducerName => {\n      const reducerDefinition = reducers[reducerName];\n      const reducerDetails = {\n        reducerName,\n        type: getType(name, reducerName),\n        createNotation: typeof options.reducers === \"function\"\n      };\n      if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n      } else {\n        handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);\n      }\n    });\n    function buildReducer() {\n      if (process.env.NODE_ENV !== \"production\") {\n        if (typeof options.extraReducers === \"object\") {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(14) : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === \"function\" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];\n      const finalCaseReducers = {\n        ...extraReducers,\n        ...context.sliceCaseReducersByType\n      };\n      return createReducer(options.initialState, builder => {\n        for (let key in finalCaseReducers) {\n          builder.addCase(key, finalCaseReducers[key]);\n        }\n        for (let sM of context.sliceMatchers) {\n          builder.addMatcher(sM.matcher, sM.reducer);\n        }\n        for (let m of actionMatchers) {\n          builder.addMatcher(m.matcher, m.reducer);\n        }\n        if (defaultCaseReducer) {\n          builder.addDefaultCase(defaultCaseReducer);\n        }\n      });\n    }\n    const selectSelf = state => state;\n    const injectedSelectorCache = /* @__PURE__ */new Map();\n    const injectedStateCache = /* @__PURE__ */new WeakMap();\n    let _reducer;\n    function reducer(state, action) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    }\n    function getInitialState() {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n    function makeSelectorProps(reducerPath2, injected = false) {\n      function selectSlice(state) {\n        let sliceState = state[reducerPath2];\n        if (typeof sliceState === \"undefined\") {\n          if (injected) {\n            sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);\n          } else if (process.env.NODE_ENV !== \"production\") {\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(15) : \"selectSlice returned undefined for an uninjected slice reducer\");\n          }\n        }\n        return sliceState;\n      }\n      function getSelectors(selectState = selectSelf) {\n        const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => /* @__PURE__ */new WeakMap());\n        return getOrInsertComputed(selectorCache, selectState, () => {\n          const map = {};\n          for (const [name2, selector] of Object.entries(options.selectors ?? {})) {\n            map[name2] = wrapSelector(selector, selectState, () => getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);\n          }\n          return map;\n        });\n      }\n      return {\n        reducerPath: reducerPath2,\n        getSelectors,\n        get selectors() {\n          return getSelectors(selectSlice);\n        },\n        selectSlice\n      };\n    }\n    const slice = {\n      name,\n      reducer,\n      actions: context.actionCreators,\n      caseReducers: context.sliceCaseReducersByName,\n      getInitialState,\n      ...makeSelectorProps(reducerPath),\n      injectInto(injectable, {\n        reducerPath: pathOpt,\n        ...config\n      } = {}) {\n        const newReducerPath = pathOpt ?? reducerPath;\n        injectable.inject({\n          reducerPath: newReducerPath,\n          reducer\n        }, config);\n        return {\n          ...slice,\n          ...makeSelectorProps(newReducerPath, true)\n        };\n      }\n    };\n    return slice;\n  };\n}\nfunction wrapSelector(selector, selectState, getInitialState, injected) {\n  function wrapper(rootState, ...args) {\n    let sliceState = selectState(rootState);\n    if (typeof sliceState === \"undefined\") {\n      if (injected) {\n        sliceState = getInitialState();\n      } else if (process.env.NODE_ENV !== \"production\") {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(16) : \"selectState returned undefined for an uninjected slice reducer\");\n      }\n    }\n    return selector(sliceState, ...args);\n  }\n  wrapper.unwrapped = selector;\n  return wrapper;\n}\nvar createSlice = /* @__PURE__ */buildCreateSlice();\nfunction buildReducerCreators() {\n  function asyncThunk(payloadCreator, config) {\n    return {\n      _reducerDefinitionType: \"asyncThunk\" /* asyncThunk */,\n      payloadCreator,\n      ...config\n    };\n  }\n  asyncThunk.withTypes = () => asyncThunk;\n  return {\n    reducer(caseReducer) {\n      return Object.assign({\n        // hack so the wrapping function has the same name as the original\n        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\n        [caseReducer.name](...args) {\n          return caseReducer(...args);\n        }\n      }[caseReducer.name], {\n        _reducerDefinitionType: \"reducer\" /* reducer */\n      });\n    },\n    preparedReducer(prepare, reducer) {\n      return {\n        _reducerDefinitionType: \"reducerWithPrepare\" /* reducerWithPrepare */,\n        prepare,\n        reducer\n      };\n    },\n    asyncThunk\n  };\n}\nfunction handleNormalReducerDefinition({\n  type,\n  reducerName,\n  createNotation\n}, maybeReducerWithPrepare, context) {\n  let caseReducer;\n  let prepareCallback;\n  if (\"reducer\" in maybeReducerWithPrepare) {\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(17) : \"Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.\");\n    }\n    caseReducer = maybeReducerWithPrepare.reducer;\n    prepareCallback = maybeReducerWithPrepare.prepare;\n  } else {\n    caseReducer = maybeReducerWithPrepare;\n  }\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"asyncThunk\" /* asyncThunk */;\n}\nfunction isCaseReducerWithPrepareDefinition(reducerDefinition) {\n  return reducerDefinition._reducerDefinitionType === \"reducerWithPrepare\" /* reducerWithPrepare */;\n}\nfunction handleThunkCaseReducerDefinition({\n  type,\n  reducerName\n}, reducerDefinition, context, cAT) {\n  if (!cAT) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(18) : \"Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.\");\n  }\n  const {\n    payloadCreator,\n    fulfilled,\n    pending,\n    rejected,\n    settled,\n    options\n  } = reducerDefinition;\n  const thunk = cAT(type, payloadCreator, options);\n  context.exposeAction(reducerName, thunk);\n  if (fulfilled) {\n    context.addCase(thunk.fulfilled, fulfilled);\n  }\n  if (pending) {\n    context.addCase(thunk.pending, pending);\n  }\n  if (rejected) {\n    context.addCase(thunk.rejected, rejected);\n  }\n  if (settled) {\n    context.addMatcher(thunk.settled, settled);\n  }\n  context.exposeCaseReducer(reducerName, {\n    fulfilled: fulfilled || noop,\n    pending: pending || noop,\n    rejected: rejected || noop,\n    settled: settled || noop\n  });\n}\nfunction noop() {}\n\n// src/entities/entity_state.ts\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\nfunction createInitialStateFactory(stateAdapter) {\n  function getInitialState(additionalState = {}, entities) {\n    const state = Object.assign(getInitialEntityState(), additionalState);\n    return entities ? stateAdapter.setAll(state, entities) : state;\n  }\n  return {\n    getInitialState\n  };\n}\n\n// src/entities/state_selectors.ts\nfunction createSelectorsFactory() {\n  function getSelectors(selectState, options = {}) {\n    const {\n      createSelector: createSelector2 = createDraftSafeSelector\n    } = options;\n    const selectIds = state => state.ids;\n    const selectEntities = state => state.entities;\n    const selectAll = createSelector2(selectIds, selectEntities, (ids, entities) => ids.map(id => entities[id]));\n    const selectId = (_, id) => id;\n    const selectById = (entities, id) => entities[id];\n    const selectTotal = createSelector2(selectIds, ids => ids.length);\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n        selectById: createSelector2(selectEntities, selectId, selectById)\n      };\n    }\n    const selectGlobalizedEntities = createSelector2(selectState, selectEntities);\n    return {\n      selectIds: createSelector2(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector2(selectState, selectAll),\n      selectTotal: createSelector2(selectState, selectTotal),\n      selectById: createSelector2(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors\n  };\n}\n\n// src/entities/state_adapter.ts\nimport { produce as createNextState3, isDraft as isDraft3 } from \"immer\";\nvar isDraftTyped = isDraft3;\nfunction createSingleArgumentStateOperator(mutator) {\n  const operator = createStateOperator((_, state) => mutator(state));\n  return function operation(state) {\n    return operator(state, void 0);\n  };\n}\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg2) {\n      return isFSA(arg2);\n    }\n    const runMutator = draft => {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraftTyped(state)) {\n      runMutator(state);\n      return state;\n    }\n    return createNextState3(state, runMutator);\n  };\n}\n\n// src/entities/utils.ts\nimport { current as current2, isDraft as isDraft4 } from \"immer\";\nfunction selectIdValue(entity, selectId) {\n  const key = selectId(entity);\n  if (process.env.NODE_ENV !== \"production\" && key === void 0) {\n    console.warn(\"The entity passed to the `selectId` implementation returned undefined.\", \"You should probably provide your own `selectId` implementation.\", \"The entity that was passed:\", entity, \"The `selectId` implementation:\", selectId.toString());\n  }\n  return key;\n}\nfunction ensureEntitiesArray(entities) {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nfunction getCurrent(value) {\n  return isDraft4(value) ? current2(value) : value;\n}\nfunction splitAddedUpdatedEntities(newEntities, selectId, state) {\n  newEntities = ensureEntitiesArray(newEntities);\n  const existingIdsArray = getCurrent(state.ids);\n  const existingIds = new Set(existingIdsArray);\n  const added = [];\n  const addedIds = /* @__PURE__ */new Set([]);\n  const updated = [];\n  for (const entity of newEntities) {\n    const id = selectIdValue(entity, selectId);\n    if (existingIds.has(id) || addedIds.has(id)) {\n      updated.push({\n        id,\n        changes: entity\n      });\n    } else {\n      addedIds.add(id);\n      added.push(entity);\n    }\n  }\n  return [added, updated, existingIdsArray];\n}\n\n// src/entities/unsorted_state_adapter.ts\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    const key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n  function addManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      addOneMutably(entity, state);\n    }\n  }\n  function setOneMutably(entity, state) {\n    const key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key);\n    }\n    ;\n    state.entities[key] = entity;\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      setOneMutably(entity, state);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys, state) {\n    let didMutate = false;\n    keys.forEach(key => {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = state.ids.filter(id => id in state.entities);\n    }\n  }\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys, update, state) {\n    const original4 = state.entities[update.id];\n    if (original4 === void 0) {\n      return false;\n    }\n    const updated = Object.assign({}, original4, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n    ;\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    const newKeys = {};\n    const updatesPerEntity = {};\n    updates.forEach(update => {\n      if (update.id in state.entities) {\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: {\n            ...updatesPerEntity[update.id]?.changes,\n            ...update.changes\n          }\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    const didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      const didMutateIds = updates.filter(update => takeNewKey(newKeys, update, state)).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.values(state.entities).map(e => selectIdValue(e, selectId));\n      }\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    const [added, updated] = splitAddedUpdatedEntities(newEntities, selectId, state);\n    addManyMutably(added, state);\n    updateManyMutably(updated, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n\n// src/entities/sorted_state_adapter.ts\nfunction findInsertIndex(sortedItems, item, comparisonFunction) {\n  let lowIndex = 0;\n  let highIndex = sortedItems.length;\n  while (lowIndex < highIndex) {\n    let middleIndex = lowIndex + highIndex >>> 1;\n    const currentItem = sortedItems[middleIndex];\n    const res = comparisonFunction(item, currentItem);\n    if (res >= 0) {\n      lowIndex = middleIndex + 1;\n    } else {\n      highIndex = middleIndex;\n    }\n  }\n  return lowIndex;\n}\nfunction insert(sortedItems, item, comparisonFunction) {\n  const insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n  sortedItems.splice(insertAtIndex, 0, item);\n  return sortedItems;\n}\nfunction createSortedStateAdapter(selectId, comparer) {\n  const {\n    removeOne,\n    removeMany,\n    removeAll\n  } = createUnsortedStateAdapter(selectId);\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities, state, existingIds) {\n    newEntities = ensureEntitiesArray(newEntities);\n    const existingKeys = new Set(existingIds ?? getCurrent(state.ids));\n    const models = newEntities.filter(model => !existingKeys.has(selectIdValue(model, selectId)));\n    if (models.length !== 0) {\n      mergeFunction(state, models);\n    }\n  }\n  function setOneMutably(entity, state) {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      for (const item of newEntities) {\n        delete state.entities[selectId(item)];\n      }\n      mergeFunction(state, newEntities);\n    }\n  }\n  function setAllMutably(newEntities, state) {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(newEntities, state, []);\n  }\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates, state) {\n    let appliedUpdates = false;\n    let replacedIds = false;\n    for (let update of updates) {\n      const entity = state.entities[update.id];\n      if (!entity) {\n        continue;\n      }\n      appliedUpdates = true;\n      Object.assign(entity, update.changes);\n      const newId = selectId(entity);\n      if (update.id !== newId) {\n        replacedIds = true;\n        delete state.entities[update.id];\n        const oldIndex = state.ids.indexOf(update.id);\n        state.ids[oldIndex] = newId;\n        state.entities[newId] = entity;\n      }\n    }\n    if (appliedUpdates) {\n      mergeFunction(state, [], appliedUpdates, replacedIds);\n    }\n  }\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities, state) {\n    const [added, updated, existingIdsArray] = splitAddedUpdatedEntities(newEntities, selectId, state);\n    if (added.length) {\n      addManyMutably(added, state, existingIdsArray);\n    }\n    if (updated.length) {\n      updateManyMutably(updated, state);\n    }\n  }\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  const mergeFunction = (state, addedItems, appliedUpdates, replacedIds) => {\n    const currentEntities = getCurrent(state.entities);\n    const currentIds = getCurrent(state.ids);\n    const stateEntities = state.entities;\n    let ids = currentIds;\n    if (replacedIds) {\n      ids = new Set(currentIds);\n    }\n    let sortedEntities = [];\n    for (const id of ids) {\n      const entity = currentEntities[id];\n      if (entity) {\n        sortedEntities.push(entity);\n      }\n    }\n    const wasPreviouslyEmpty = sortedEntities.length === 0;\n    for (const item of addedItems) {\n      stateEntities[selectId(item)] = item;\n      if (!wasPreviouslyEmpty) {\n        insert(sortedEntities, item, comparer);\n      }\n    }\n    if (wasPreviouslyEmpty) {\n      sortedEntities = addedItems.slice().sort(comparer);\n    } else if (appliedUpdates) {\n      sortedEntities.sort(comparer);\n    }\n    const newSortedIds = sortedEntities.map(selectId);\n    if (!areArraysEqual(currentIds, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  };\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n\n// src/entities/create_adapter.ts\nfunction createEntityAdapter(options = {}) {\n  const {\n    selectId,\n    sortComparer\n  } = {\n    sortComparer: false,\n    selectId: instance => instance.id,\n    ...options\n  };\n  const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  const stateFactory = createInitialStateFactory(stateAdapter);\n  const selectorsFactory = createSelectorsFactory();\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter\n  };\n}\n\n// src/listenerMiddleware/index.ts\nimport { isAction as isAction3 } from \"redux\";\n\n// src/listenerMiddleware/exceptions.ts\nvar task = \"task\";\nvar listener = \"listener\";\nvar completed = \"completed\";\nvar cancelled = \"cancelled\";\nvar taskCancelled = `task-${cancelled}`;\nvar taskCompleted = `task-${completed}`;\nvar listenerCancelled = `${listener}-${cancelled}`;\nvar listenerCompleted = `${listener}-${completed}`;\nvar TaskAbortError = class {\n  constructor(code) {\n    this.code = code;\n    this.message = `${task} ${cancelled} (reason: ${code})`;\n  }\n  name = \"TaskAbortError\";\n  message;\n};\n\n// src/listenerMiddleware/utils.ts\nvar assertFunction = (func, expected) => {\n  if (typeof func !== \"function\") {\n    throw new TypeError(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(32) : `${expected} is not a function`);\n  }\n};\nvar noop2 = () => {};\nvar catchRejection = (promise, onError = noop2) => {\n  promise.catch(onError);\n  return promise;\n};\nvar addAbortSignalListener = (abortSignal, callback) => {\n  abortSignal.addEventListener(\"abort\", callback, {\n    once: true\n  });\n  return () => abortSignal.removeEventListener(\"abort\", callback);\n};\nvar abortControllerWithReason = (abortController, reason) => {\n  const signal = abortController.signal;\n  if (signal.aborted) {\n    return;\n  }\n  if (!(\"reason\" in signal)) {\n    Object.defineProperty(signal, \"reason\", {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  abortController.abort(reason);\n};\n\n// src/listenerMiddleware/task.ts\nvar validateActive = signal => {\n  if (signal.aborted) {\n    const {\n      reason\n    } = signal;\n    throw new TaskAbortError(reason);\n  }\n};\nfunction raceWithSignal(signal, promise) {\n  let cleanup = noop2;\n  return new Promise((resolve, reject) => {\n    const notifyRejection = () => reject(new TaskAbortError(signal.reason));\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise.finally(() => cleanup()).then(resolve, reject);\n  }).finally(() => {\n    cleanup = noop2;\n  });\n}\nvar runTask = async (task2, cleanUp) => {\n  try {\n    await Promise.resolve();\n    const value = await task2();\n    return {\n      status: \"ok\",\n      value\n    };\n  } catch (error) {\n    return {\n      status: error instanceof TaskAbortError ? \"cancelled\" : \"rejected\",\n      error\n    };\n  } finally {\n    cleanUp?.();\n  }\n};\nvar createPause = signal => {\n  return promise => {\n    return catchRejection(raceWithSignal(signal, promise).then(output => {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\nvar createDelay = signal => {\n  const pause = createPause(signal);\n  return timeoutMs => {\n    return pause(new Promise(resolve => setTimeout(resolve, timeoutMs)));\n  };\n};\n\n// src/listenerMiddleware/index.ts\nvar {\n  assign\n} = Object;\nvar INTERNAL_NIL_TOKEN = {};\nvar alm = \"listenerMiddleware\";\nvar createFork = (parentAbortSignal, parentBlockingPromises) => {\n  const linkControllers = controller => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));\n  return (taskExecutor, opts) => {\n    assertFunction(taskExecutor, \"taskExecutor\");\n    const childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    const result = runTask(async () => {\n      validateActive(parentAbortSignal);\n      validateActive(childAbortController.signal);\n      const result2 = await taskExecutor({\n        pause: createPause(childAbortController.signal),\n        delay: createDelay(childAbortController.signal),\n        signal: childAbortController.signal\n      });\n      validateActive(childAbortController.signal);\n      return result2;\n    }, () => abortControllerWithReason(childAbortController, taskCompleted));\n    if (opts?.autoJoin) {\n      parentBlockingPromises.push(result.catch(noop2));\n    }\n    return {\n      result: createPause(parentAbortSignal)(result),\n      cancel() {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nvar createTakePattern = (startListening, signal) => {\n  const take = async (predicate, timeout) => {\n    validateActive(signal);\n    let unsubscribe = () => {};\n    const tuplePromise = new Promise((resolve, reject) => {\n      let stopListening = startListening({\n        predicate,\n        effect: (action, listenerApi) => {\n          listenerApi.unsubscribe();\n          resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n        }\n      });\n      unsubscribe = () => {\n        stopListening();\n        reject();\n      };\n    });\n    const promises = [tuplePromise];\n    if (timeout != null) {\n      promises.push(new Promise(resolve => setTimeout(resolve, timeout, null)));\n    }\n    try {\n      const output = await raceWithSignal(signal, Promise.race(promises));\n      validateActive(signal);\n      return output;\n    } finally {\n      unsubscribe();\n    }\n  };\n  return (predicate, timeout) => catchRejection(take(predicate, timeout));\n};\nvar getListenerEntryPropsFrom = options => {\n  let {\n    type,\n    actionCreator,\n    matcher,\n    predicate,\n    effect\n  } = options;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {} else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(21) : \"Creating or removing a listener requires one of the known fields for matching an action\");\n  }\n  assertFunction(effect, \"options.listener\");\n  return {\n    predicate,\n    type,\n    effect\n  };\n};\nvar createListenerEntry = /* @__PURE__ */assign(options => {\n  const {\n    type,\n    predicate,\n    effect\n  } = getListenerEntryPropsFrom(options);\n  const entry = {\n    id: nanoid(),\n    effect,\n    type,\n    predicate,\n    pending: /* @__PURE__ */new Set(),\n    unsubscribe: () => {\n      throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(22) : \"Unsubscribe not initialized\");\n    }\n  };\n  return entry;\n}, {\n  withTypes: () => createListenerEntry\n});\nvar findListenerEntry = (listenerMap, options) => {\n  const {\n    type,\n    effect,\n    predicate\n  } = getListenerEntryPropsFrom(options);\n  return Array.from(listenerMap.values()).find(entry => {\n    const matchPredicateOrType = typeof type === \"string\" ? entry.type === type : entry.predicate === predicate;\n    return matchPredicateOrType && entry.effect === effect;\n  });\n};\nvar cancelActiveListeners = entry => {\n  entry.pending.forEach(controller => {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nvar createClearListenerMiddleware = listenerMap => {\n  return () => {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\nvar safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    setTimeout(() => {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\nvar addListener = /* @__PURE__ */assign(/* @__PURE__ */createAction(`${alm}/add`), {\n  withTypes: () => addListener\n});\nvar clearAllListeners = /* @__PURE__ */createAction(`${alm}/removeAll`);\nvar removeListener = /* @__PURE__ */assign(/* @__PURE__ */createAction(`${alm}/remove`), {\n  withTypes: () => removeListener\n});\nvar defaultErrorHandler = (...args) => {\n  console.error(`${alm}/error`, ...args);\n};\nvar createListenerMiddleware = (middlewareOptions = {}) => {\n  const listenerMap = /* @__PURE__ */new Map();\n  const {\n    extra,\n    onError = defaultErrorHandler\n  } = middlewareOptions;\n  assertFunction(onError, \"onError\");\n  const insertEntry = entry => {\n    entry.unsubscribe = () => listenerMap.delete(entry.id);\n    listenerMap.set(entry.id, entry);\n    return cancelOptions => {\n      entry.unsubscribe();\n      if (cancelOptions?.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  const startListening = options => {\n    const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options);\n    return insertEntry(entry);\n  };\n  assign(startListening, {\n    withTypes: () => startListening\n  });\n  const stopListening = options => {\n    const entry = findListenerEntry(listenerMap, options);\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  assign(stopListening, {\n    withTypes: () => stopListening\n  });\n  const notifyListener = async (entry, action, api, getOriginalState) => {\n    const internalTaskController = new AbortController();\n    const take = createTakePattern(startListening, internalTaskController.signal);\n    const autoJoinPromises = [];\n    try {\n      entry.pending.add(internalTaskController);\n      await Promise.resolve(entry.effect(action,\n      // Use assign() rather than ... to avoid extra helper functions added to bundle\n      assign({}, api, {\n        getOriginalState,\n        condition: (predicate, timeout) => take(predicate, timeout).then(Boolean),\n        take,\n        delay: createDelay(internalTaskController.signal),\n        pause: createPause(internalTaskController.signal),\n        extra,\n        signal: internalTaskController.signal,\n        fork: createFork(internalTaskController.signal, autoJoinPromises),\n        unsubscribe: entry.unsubscribe,\n        subscribe: () => {\n          listenerMap.set(entry.id, entry);\n        },\n        cancelActiveListeners: () => {\n          entry.pending.forEach((controller, _, set) => {\n            if (controller !== internalTaskController) {\n              abortControllerWithReason(controller, listenerCancelled);\n              set.delete(controller);\n            }\n          });\n        },\n        cancel: () => {\n          abortControllerWithReason(internalTaskController, listenerCancelled);\n          entry.pending.delete(internalTaskController);\n        },\n        throwIfCancelled: () => {\n          validateActive(internalTaskController.signal);\n        }\n      })));\n    } catch (listenerError) {\n      if (!(listenerError instanceof TaskAbortError)) {\n        safelyNotifyError(onError, listenerError, {\n          raisedBy: \"effect\"\n        });\n      }\n    } finally {\n      await Promise.all(autoJoinPromises);\n      abortControllerWithReason(internalTaskController, listenerCompleted);\n      entry.pending.delete(internalTaskController);\n    }\n  };\n  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  const middleware = api => next => action => {\n    if (!isAction3(action)) {\n      return next(action);\n    }\n    if (addListener.match(action)) {\n      return startListening(action.payload);\n    }\n    if (clearAllListeners.match(action)) {\n      clearListenerMiddleware();\n      return;\n    }\n    if (removeListener.match(action)) {\n      return stopListening(action.payload);\n    }\n    let originalState = api.getState();\n    const getOriginalState = () => {\n      if (originalState === INTERNAL_NIL_TOKEN) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(23) : `${alm}: getOriginalState can only be called synchronously`);\n      }\n      return originalState;\n    };\n    let result;\n    try {\n      result = next(action);\n      if (listenerMap.size > 0) {\n        const currentState = api.getState();\n        const listenerEntries = Array.from(listenerMap.values());\n        for (const entry of listenerEntries) {\n          let runListener = false;\n          try {\n            runListener = entry.predicate(action, currentState, originalState);\n          } catch (predicateError) {\n            runListener = false;\n            safelyNotifyError(onError, predicateError, {\n              raisedBy: \"predicate\"\n            });\n          }\n          if (!runListener) {\n            continue;\n          }\n          notifyListener(entry, action, api, getOriginalState);\n        }\n      }\n    } finally {\n      originalState = INTERNAL_NIL_TOKEN;\n    }\n    return result;\n  };\n  return {\n    middleware,\n    startListening,\n    stopListening,\n    clearListeners: clearListenerMiddleware\n  };\n};\n\n// src/dynamicMiddleware/index.ts\nimport { compose as compose3 } from \"redux\";\nvar createMiddlewareEntry = middleware => ({\n  middleware,\n  applied: /* @__PURE__ */new Map()\n});\nvar matchInstance = instanceId => action => action?.meta?.instanceId === instanceId;\nvar createDynamicMiddleware = () => {\n  const instanceId = nanoid();\n  const middlewareMap = /* @__PURE__ */new Map();\n  const withMiddleware = Object.assign(createAction(\"dynamicMiddleware/add\", (...middlewares) => ({\n    payload: middlewares,\n    meta: {\n      instanceId\n    }\n  })), {\n    withTypes: () => withMiddleware\n  });\n  const addMiddleware = Object.assign(function addMiddleware2(...middlewares) {\n    middlewares.forEach(middleware2 => {\n      getOrInsertComputed(middlewareMap, middleware2, createMiddlewareEntry);\n    });\n  }, {\n    withTypes: () => addMiddleware\n  });\n  const getFinalMiddleware = api => {\n    const appliedMiddleware = Array.from(middlewareMap.values()).map(entry => getOrInsertComputed(entry.applied, api, entry.middleware));\n    return compose3(...appliedMiddleware);\n  };\n  const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n  const middleware = api => next => action => {\n    if (isWithMiddleware(action)) {\n      addMiddleware(...action.payload);\n      return api.dispatch;\n    }\n    return getFinalMiddleware(api)(next)(action);\n  };\n  return {\n    middleware,\n    addMiddleware,\n    withMiddleware,\n    instanceId\n  };\n};\n\n// src/combineSlices.ts\nimport { combineReducers as combineReducers2 } from \"redux\";\nvar isSliceLike = maybeSliceLike => \"reducerPath\" in maybeSliceLike && typeof maybeSliceLike.reducerPath === \"string\";\nvar getReducers = slices => slices.flatMap(sliceOrMap => isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer]] : Object.entries(sliceOrMap));\nvar ORIGINAL_STATE = Symbol.for(\"rtk-state-proxy-original\");\nvar isStateProxy = value => !!value && !!value[ORIGINAL_STATE];\nvar stateProxyMap = /* @__PURE__ */new WeakMap();\nvar createStateProxy = (state, reducerMap, initialStateCache) => getOrInsertComputed(stateProxyMap, state, () => new Proxy(state, {\n  get: (target, prop, receiver) => {\n    if (prop === ORIGINAL_STATE) return target;\n    const result = Reflect.get(target, prop, receiver);\n    if (typeof result === \"undefined\") {\n      const cached = initialStateCache[prop];\n      if (typeof cached !== \"undefined\") return cached;\n      const reducer = reducerMap[prop];\n      if (reducer) {\n        const reducerResult = reducer(void 0, {\n          type: nanoid()\n        });\n        if (typeof reducerResult === \"undefined\") {\n          throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(24) : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);\n        }\n        initialStateCache[prop] = reducerResult;\n        return reducerResult;\n      }\n    }\n    return result;\n  }\n}));\nvar original = state => {\n  if (!isStateProxy(state)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(25) : \"original must be used on state Proxy\");\n  }\n  return state[ORIGINAL_STATE];\n};\nvar emptyObject = {};\nvar noopReducer = (state = emptyObject) => state;\nfunction combineSlices(...slices) {\n  const reducerMap = Object.fromEntries(getReducers(slices));\n  const getReducer = () => Object.keys(reducerMap).length ? combineReducers2(reducerMap) : noopReducer;\n  let reducer = getReducer();\n  function combinedReducer(state, action) {\n    return reducer(state, action);\n  }\n  combinedReducer.withLazyLoadedSlices = () => combinedReducer;\n  const initialStateCache = {};\n  const inject = (slice, config = {}) => {\n    const {\n      reducerPath,\n      reducer: reducerToInject\n    } = slice;\n    const currentReducer = reducerMap[reducerPath];\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n        console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\n      }\n      return combinedReducer;\n    }\n    if (config.overrideExisting && currentReducer !== reducerToInject) {\n      delete initialStateCache[reducerPath];\n    }\n    reducerMap[reducerPath] = reducerToInject;\n    reducer = getReducer();\n    return combinedReducer;\n  };\n  const selector = Object.assign(function makeSelector(selectorFn, selectState) {\n    return function selector2(state, ...args) {\n      return selectorFn(createStateProxy(selectState ? selectState(state, ...args) : state, reducerMap, initialStateCache), ...args);\n    };\n  }, {\n    original\n  });\n  return Object.assign(combinedReducer, {\n    inject,\n    selector\n  });\n}\n\n// src/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code) {\n  return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;\n}\n\n// src/query/utils/copyWithStructuralSharing.ts\nvar isPlainObject4 = src_exports.isPlainObject;\nfunction copyWithStructuralSharing(oldObj, newObj) {\n  if (oldObj === newObj || !(isPlainObject4(oldObj) && isPlainObject4(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n    return newObj;\n  }\n  const newKeys = Object.keys(newObj);\n  const oldKeys = Object.keys(oldObj);\n  let isSameObject = newKeys.length === oldKeys.length;\n  const mergeObj = Array.isArray(newObj) ? [] : {};\n  for (const key of newKeys) {\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n  }\n  return isSameObject ? oldObj : mergeObj;\n}\n\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n  let count = 0;\n  for (const _key in obj) {\n    count++;\n  }\n  return count;\n}\n\n// src/query/utils/flatten.ts\nvar flatten = arr => [].concat(...arr);\n\n// src/query/utils/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n  return new RegExp(`(^|:)//`).test(url);\n}\n\n// src/query/utils/isDocumentVisible.ts\nfunction isDocumentVisible() {\n  if (typeof document === \"undefined\") {\n    return true;\n  }\n  return document.visibilityState !== \"hidden\";\n}\n\n// src/query/utils/isNotNullish.ts\nfunction isNotNullish(v) {\n  return v != null;\n}\n\n// src/query/utils/isOnline.ts\nfunction isOnline() {\n  return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n}\n\n// src/query/utils/joinUrls.ts\nvar withoutTrailingSlash = url => url.replace(/\\/$/, \"\");\nvar withoutLeadingSlash = url => url.replace(/^\\//, \"\");\nfunction joinUrls(base, url) {\n  if (!base) {\n    return url;\n  }\n  if (!url) {\n    return base;\n  }\n  if (isAbsoluteUrl(url)) {\n    return url;\n  }\n  const delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\n  base = withoutTrailingSlash(base);\n  url = withoutLeadingSlash(url);\n  return `${base}${delimiter}${url}`;\n}\n\n// src/query/utils/getOrInsert.ts\nfunction getOrInsert(map, key, value) {\n  if (map.has(key)) return map.get(key);\n  return map.set(key, value).get(key);\n}\n\n// src/query/fetchBaseQuery.ts\nvar defaultFetchFn = (...args) => fetch(...args);\nvar defaultValidateStatus = response => response.status >= 200 && response.status <= 299;\nvar defaultIsJsonContentType = headers => (/*applicat*/\n/ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\"));\nfunction stripUndefined(obj) {\n  if (!(0, src_exports.isPlainObject)(obj)) {\n    return obj;\n  }\n  const copy = {\n    ...obj\n  };\n  for (const [k, v] of Object.entries(copy)) {\n    if (v === void 0) delete copy[k];\n  }\n  return copy;\n}\nfunction fetchBaseQuery({\n  baseUrl,\n  prepareHeaders = x => x,\n  fetchFn = defaultFetchFn,\n  paramsSerializer,\n  isJsonContentType = defaultIsJsonContentType,\n  jsonContentType = \"application/json\",\n  jsonReplacer,\n  timeout: defaultTimeout,\n  responseHandler: globalResponseHandler,\n  validateStatus: globalValidateStatus,\n  ...baseFetchOptions\n} = {}) {\n  if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n    console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n  }\n  return async (arg, api, extraOptions) => {\n    const {\n      getState,\n      extra,\n      endpoint,\n      forced,\n      type\n    } = api;\n    let meta;\n    let {\n      url,\n      headers = new Headers(baseFetchOptions.headers),\n      params = void 0,\n      responseHandler = globalResponseHandler ?? \"json\",\n      validateStatus = globalValidateStatus ?? defaultValidateStatus,\n      timeout = defaultTimeout,\n      ...rest\n    } = typeof arg == \"string\" ? {\n      url: arg\n    } : arg;\n    let abortController,\n      signal = api.signal;\n    if (timeout) {\n      abortController = new AbortController();\n      api.signal.addEventListener(\"abort\", abortController.abort);\n      signal = abortController.signal;\n    }\n    let config = {\n      ...baseFetchOptions,\n      signal,\n      ...rest\n    };\n    headers = new Headers(stripUndefined(headers));\n    config.headers = (await prepareHeaders(headers, {\n      getState,\n      arg,\n      extra,\n      endpoint,\n      forced,\n      type,\n      extraOptions\n    })) || headers;\n    const isJsonifiable = body => typeof body === \"object\" && ((0, src_exports.isPlainObject)(body) || Array.isArray(body) || typeof body.toJSON === \"function\");\n    if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\n      config.headers.set(\"content-type\", jsonContentType);\n    }\n    if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n      config.body = JSON.stringify(config.body, jsonReplacer);\n    }\n    if (params) {\n      const divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n      const query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n      url += divider + query;\n    }\n    url = joinUrls(baseUrl, url);\n    const request = new Request(url, config);\n    const requestClone = new Request(url, config);\n    meta = {\n      request: requestClone\n    };\n    let response,\n      timedOut = false,\n      timeoutId = abortController && setTimeout(() => {\n        timedOut = true;\n        abortController.abort();\n      }, timeout);\n    try {\n      response = await fetchFn(request);\n    } catch (e) {\n      return {\n        error: {\n          status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\n          error: String(e)\n        },\n        meta\n      };\n    } finally {\n      if (timeoutId) clearTimeout(timeoutId);\n      abortController?.signal.removeEventListener(\"abort\", abortController.abort);\n    }\n    const responseClone = response.clone();\n    meta.response = responseClone;\n    let resultData;\n    let responseText = \"\";\n    try {\n      let handleResponseError;\n      await Promise.all([handleResponse(response, responseHandler).then(r => resultData = r, e => handleResponseError = e),\n      // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n      // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n      responseClone.text().then(r => responseText = r, () => {})]);\n      if (handleResponseError) throw handleResponseError;\n    } catch (e) {\n      return {\n        error: {\n          status: \"PARSING_ERROR\",\n          originalStatus: response.status,\n          data: responseText,\n          error: String(e)\n        },\n        meta\n      };\n    }\n    return validateStatus(response, resultData) ? {\n      data: resultData,\n      meta\n    } : {\n      error: {\n        status: response.status,\n        data: resultData\n      },\n      meta\n    };\n  };\n  async function handleResponse(response, responseHandler) {\n    if (typeof responseHandler === \"function\") {\n      return responseHandler(response);\n    }\n    if (responseHandler === \"content-type\") {\n      responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\n    }\n    if (responseHandler === \"json\") {\n      const text = await response.text();\n      return text.length ? JSON.parse(text) : null;\n    }\n    return response.text();\n  }\n}\n\n// src/query/HandledError.ts\nvar HandledError = class {\n  constructor(value, meta = void 0) {\n    this.value = value;\n    this.meta = meta;\n  }\n};\n\n// src/query/retry.ts\nasync function defaultBackoff(attempt = 0, maxRetries = 5) {\n  const attempts = Math.min(attempt, maxRetries);\n  const timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n  await new Promise(resolve => setTimeout(res => resolve(res), timeout));\n}\nfunction fail(error, meta) {\n  throw Object.assign(new HandledError({\n    error,\n    meta\n  }), {\n    throwImmediately: true\n  });\n}\nvar EMPTY_OPTIONS = {};\nvar retryWithBackoff = (baseQuery, defaultOptions) => async (args, api, extraOptions) => {\n  const possibleMaxRetries = [5, (defaultOptions || EMPTY_OPTIONS).maxRetries, (extraOptions || EMPTY_OPTIONS).maxRetries].filter(x => x !== void 0);\n  const [maxRetries] = possibleMaxRetries.slice(-1);\n  const defaultRetryCondition = (_, __, {\n    attempt\n  }) => attempt <= maxRetries;\n  const options = {\n    maxRetries,\n    backoff: defaultBackoff,\n    retryCondition: defaultRetryCondition,\n    ...defaultOptions,\n    ...extraOptions\n  };\n  let retry2 = 0;\n  while (true) {\n    try {\n      const result = await baseQuery(args, api, extraOptions);\n      if (result.error) {\n        throw new HandledError(result);\n      }\n      return result;\n    } catch (e) {\n      retry2++;\n      if (e.throwImmediately) {\n        if (e instanceof HandledError) {\n          return e.value;\n        }\n        throw e;\n      }\n      if (e instanceof HandledError && !options.retryCondition(e.value.error, args, {\n        attempt: retry2,\n        baseQueryApi: api,\n        extraOptions\n      })) {\n        return e.value;\n      }\n      await options.backoff(retry2, options.maxRetries);\n    }\n  }\n};\nvar retry = /* @__PURE__ */Object.assign(retryWithBackoff, {\n  fail\n});\n\n// src/query/core/setupListeners.ts\nvar onFocus = /* @__PURE__ */createAction(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */createAction(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */createAction(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */createAction(\"__rtkq/offline\");\nvar initialized = false;\nfunction setupListeners(dispatch, customHandler) {\n  function defaultHandler() {\n    const handleFocus = () => dispatch(onFocus());\n    const handleFocusLost = () => dispatch(onFocusLost());\n    const handleOnline = () => dispatch(onOnline());\n    const handleOffline = () => dispatch(onOffline());\n    const handleVisibilityChange = () => {\n      if (window.document.visibilityState === \"visible\") {\n        handleFocus();\n      } else {\n        handleFocusLost();\n      }\n    };\n    if (!initialized) {\n      if (typeof window !== \"undefined\" && window.addEventListener) {\n        window.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\n        window.addEventListener(\"focus\", handleFocus, false);\n        window.addEventListener(\"online\", handleOnline, false);\n        window.addEventListener(\"offline\", handleOffline, false);\n        initialized = true;\n      }\n    }\n    const unsubscribe = () => {\n      window.removeEventListener(\"focus\", handleFocus);\n      window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n      initialized = false;\n    };\n    return unsubscribe;\n  }\n  return customHandler ? customHandler(dispatch, {\n    onFocus,\n    onFocusLost,\n    onOffline,\n    onOnline\n  }) : defaultHandler();\n}\n\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n  return e.type === \"query\" /* query */;\n}\nfunction isMutationDefinition(e) {\n  return e.type === \"mutation\" /* mutation */;\n}\nfunction isInfiniteQueryDefinition(e) {\n  return e.type === \"infinitequery\" /* infinitequery */;\n}\nfunction isAnyQueryDefinition(e) {\n  return isQueryDefinition(e) || isInfiniteQueryDefinition(e);\n}\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n  if (isFunction(description)) {\n    return description(result, error, queryArg, meta).filter(isNotNullish).map(expandTagDescription).map(assertTagTypes);\n  }\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n  return [];\n}\nfunction isFunction(t) {\n  return typeof t === \"function\";\n}\nfunction expandTagDescription(description) {\n  return typeof description === \"string\" ? {\n    type: description\n  } : description;\n}\n\n// src/query/core/buildThunks.ts\nimport { isDraftable as isDraftable3, produceWithPatches } from \"immer\";\n\n// src/query/core/buildInitiate.ts\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\nvar isUpsertQuery = arg => typeof arg[forceQueryFnSymbol] === \"function\";\nfunction buildInitiate({\n  serializeQueryArgs,\n  queryThunk,\n  infiniteQueryThunk,\n  mutationThunk,\n  api,\n  context\n}) {\n  const runningQueries = /* @__PURE__ */new Map();\n  const runningMutations = /* @__PURE__ */new Map();\n  const {\n    unsubscribeQueryResult,\n    removeMutationResult,\n    updateSubscriptionOptions\n  } = api.internalActions;\n  return {\n    buildInitiateQuery,\n    buildInitiateInfiniteQuery,\n    buildInitiateMutation,\n    getRunningQueryThunk,\n    getRunningMutationThunk,\n    getRunningQueriesThunk,\n    getRunningMutationsThunk\n  };\n  function getRunningQueryThunk(endpointName, queryArgs) {\n    return dispatch => {\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      return runningQueries.get(dispatch)?.[queryCacheKey];\n    };\n  }\n  function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\n    return dispatch => {\n      return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId];\n    };\n  }\n  function getRunningQueriesThunk() {\n    return dispatch => Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function getRunningMutationsThunk() {\n    return dispatch => Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function middlewareWarning(dispatch) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (middlewareWarning.triggered) return;\n      const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n      middlewareWarning.triggered = true;\n      if (typeof returnedValue !== \"object\" || typeof returnedValue?.type === \"string\") {\n        throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(34) : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!`);\n      }\n    }\n  }\n  function buildInitiateAnyQuery(endpointName, endpointDefinition) {\n    const queryAction = (arg, {\n      subscribe = true,\n      forceRefetch,\n      subscriptionOptions,\n      [forceQueryFnSymbol]: forceQueryFn,\n      ...rest\n    } = {}) => (dispatch, getState) => {\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs: arg,\n        endpointDefinition,\n        endpointName\n      });\n      let thunk;\n      const commonThunkArgs = {\n        ...rest,\n        type: \"query\",\n        subscribe,\n        forceRefetch,\n        subscriptionOptions,\n        endpointName,\n        originalArgs: arg,\n        queryCacheKey,\n        [forceQueryFnSymbol]: forceQueryFn\n      };\n      if (isQueryDefinition(endpointDefinition)) {\n        thunk = queryThunk(commonThunkArgs);\n      } else {\n        const {\n          direction,\n          initialPageParam\n        } = rest;\n        thunk = infiniteQueryThunk({\n          ...commonThunkArgs,\n          // Supply these even if undefined. This helps with a field existence\n          // check over in `buildSlice.ts`\n          direction,\n          initialPageParam\n        });\n      }\n      const selector = api.endpoints[endpointName].select(arg);\n      const thunkResult = dispatch(thunk);\n      const stateAfter = selector(getState());\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort\n      } = thunkResult;\n      const skippedSynchronously = stateAfter.requestId !== requestId;\n      const runningQuery = runningQueries.get(dispatch)?.[queryCacheKey];\n      const selectFromState = () => selector(getState());\n      const statePromise = Object.assign(forceQueryFn ?\n      // a query has been forced (upsertQueryData)\n      // -> we want to resolve it once data has been written with the data that will be written\n      thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ?\n      // a query has been skipped due to a condition and we do not have any currently running query\n      // -> we want to resolve it immediately with the current data\n      Promise.resolve(stateAfter) :\n      // query just started or one is already in flight\n      // -> wait for the running query, then resolve with data from after that\n      Promise.all([runningQuery, thunkResult]).then(selectFromState), {\n        arg,\n        requestId,\n        subscriptionOptions,\n        queryCacheKey,\n        abort,\n        async unwrap() {\n          const result = await statePromise;\n          if (result.isError) {\n            throw result.error;\n          }\n          return result.data;\n        },\n        refetch: () => dispatch(queryAction(arg, {\n          subscribe: false,\n          forceRefetch: true\n        })),\n        unsubscribe() {\n          if (subscribe) dispatch(unsubscribeQueryResult({\n            queryCacheKey,\n            requestId\n          }));\n        },\n        updateSubscriptionOptions(options) {\n          statePromise.subscriptionOptions = options;\n          dispatch(updateSubscriptionOptions({\n            endpointName,\n            requestId,\n            queryCacheKey,\n            options\n          }));\n        }\n      });\n      if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n        const running = getOrInsert(runningQueries, dispatch, {});\n        running[queryCacheKey] = statePromise;\n        statePromise.then(() => {\n          delete running[queryCacheKey];\n          if (!countObjectKeys(running)) {\n            runningQueries.delete(dispatch);\n          }\n        });\n      }\n      return statePromise;\n    };\n    return queryAction;\n  }\n  function buildInitiateQuery(endpointName, endpointDefinition) {\n    const queryAction = buildInitiateAnyQuery(endpointName, endpointDefinition);\n    return queryAction;\n  }\n  function buildInitiateInfiniteQuery(endpointName, endpointDefinition) {\n    const infiniteQueryAction = buildInitiateAnyQuery(endpointName, endpointDefinition);\n    return infiniteQueryAction;\n  }\n  function buildInitiateMutation(endpointName) {\n    return (arg, {\n      track = true,\n      fixedCacheKey\n    } = {}) => (dispatch, getState) => {\n      const thunk = mutationThunk({\n        type: \"mutation\",\n        endpointName,\n        originalArgs: arg,\n        track,\n        fixedCacheKey\n      });\n      const thunkResult = dispatch(thunk);\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort,\n        unwrap\n      } = thunkResult;\n      const returnValuePromise = asSafePromise(thunkResult.unwrap().then(data => ({\n        data\n      })), error => ({\n        error\n      }));\n      const reset = () => {\n        dispatch(removeMutationResult({\n          requestId,\n          fixedCacheKey\n        }));\n      };\n      const ret = Object.assign(returnValuePromise, {\n        arg: thunkResult.arg,\n        requestId,\n        abort,\n        unwrap,\n        reset\n      });\n      const running = runningMutations.get(dispatch) || {};\n      runningMutations.set(dispatch, running);\n      running[requestId] = ret;\n      ret.then(() => {\n        delete running[requestId];\n        if (!countObjectKeys(running)) {\n          runningMutations.delete(dispatch);\n        }\n      });\n      if (fixedCacheKey) {\n        running[fixedCacheKey] = ret;\n        ret.then(() => {\n          if (running[fixedCacheKey] === ret) {\n            delete running[fixedCacheKey];\n            if (!countObjectKeys(running)) {\n              runningMutations.delete(dispatch);\n            }\n          }\n        });\n      }\n      return ret;\n    };\n  }\n}\n\n// src/query/standardSchema.ts\nimport { SchemaError } from \"@standard-schema/utils\";\nvar NamedSchemaError = class extends SchemaError {\n  constructor(issues, value, schemaName, _bqMeta) {\n    super(issues);\n    this.value = value;\n    this.schemaName = schemaName;\n    this._bqMeta = _bqMeta;\n  }\n};\nasync function parseWithSchema(schema, data, schemaName, bqMeta) {\n  const result = await schema[\"~standard\"].validate(data);\n  if (result.issues) {\n    throw new NamedSchemaError(result.issues, data, schemaName, bqMeta);\n  }\n  return result.value;\n}\n\n// src/query/core/buildThunks.ts\nfunction defaultTransformResponse(baseQueryReturnValue) {\n  return baseQueryReturnValue;\n}\nvar addShouldAutoBatch = (arg = {}) => {\n  return {\n    ...arg,\n    [SHOULD_AUTOBATCH]: true\n  };\n};\nfunction buildThunks({\n  reducerPath,\n  baseQuery,\n  context: {\n    endpointDefinitions\n  },\n  serializeQueryArgs,\n  api,\n  assertTagType,\n  selectors,\n  onSchemaFailure,\n  catchSchemaFailure: globalCatchSchemaFailure,\n  skipSchemaValidation: globalSkipSchemaValidation\n}) {\n  const patchQueryData = (endpointName, arg, patches, updateProvided) => (dispatch, getState) => {\n    const endpointDefinition = endpointDefinitions[endpointName];\n    const queryCacheKey = serializeQueryArgs({\n      queryArgs: arg,\n      endpointDefinition,\n      endpointName\n    });\n    dispatch(api.internalActions.queryResultPatched({\n      queryCacheKey,\n      patches\n    }));\n    if (!updateProvided) {\n      return;\n    }\n    const newValue = api.endpoints[endpointName].select(arg)(\n    // Work around TS 4.1 mismatch\n    getState());\n    const providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, arg, {}, assertTagType);\n    dispatch(api.internalActions.updateProvidedBy([{\n      queryCacheKey,\n      providedTags\n    }]));\n  };\n  function addToStart(items, item, max = 0) {\n    const newItems = [item, ...items];\n    return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n  }\n  function addToEnd(items, item, max = 0) {\n    const newItems = [...items, item];\n    return max && newItems.length > max ? newItems.slice(1) : newItems;\n  }\n  const updateQueryData = (endpointName, arg, updateRecipe, updateProvided = true) => (dispatch, getState) => {\n    const endpointDefinition = api.endpoints[endpointName];\n    const currentState = endpointDefinition.select(arg)(\n    // Work around TS 4.1 mismatch\n    getState());\n    const ret = {\n      patches: [],\n      inversePatches: [],\n      undo: () => dispatch(api.util.patchQueryData(endpointName, arg, ret.inversePatches, updateProvided))\n    };\n    if (currentState.status === \"uninitialized\" /* uninitialized */) {\n      return ret;\n    }\n    let newValue;\n    if (\"data\" in currentState) {\n      if (isDraftable3(currentState.data)) {\n        const [value, patches, inversePatches] = produceWithPatches(currentState.data, updateRecipe);\n        ret.patches.push(...patches);\n        ret.inversePatches.push(...inversePatches);\n        newValue = value;\n      } else {\n        newValue = updateRecipe(currentState.data);\n        ret.patches.push({\n          op: \"replace\",\n          path: [],\n          value: newValue\n        });\n        ret.inversePatches.push({\n          op: \"replace\",\n          path: [],\n          value: currentState.data\n        });\n      }\n    }\n    if (ret.patches.length === 0) {\n      return ret;\n    }\n    dispatch(api.util.patchQueryData(endpointName, arg, ret.patches, updateProvided));\n    return ret;\n  };\n  const upsertQueryData = (endpointName, arg, value) => dispatch => {\n    const res = dispatch(api.endpoints[endpointName].initiate(arg, {\n      subscribe: false,\n      forceRefetch: true,\n      [forceQueryFnSymbol]: () => ({\n        data: value\n      })\n    }));\n    return res;\n  };\n  const getTransformCallbackForEndpoint = (endpointDefinition, transformFieldName) => {\n    return endpointDefinition.query && endpointDefinition[transformFieldName] ? endpointDefinition[transformFieldName] : defaultTransformResponse;\n  };\n  const executeEndpoint = async (arg, {\n    signal,\n    abort,\n    rejectWithValue,\n    fulfillWithValue,\n    dispatch,\n    getState,\n    extra\n  }) => {\n    const endpointDefinition = endpointDefinitions[arg.endpointName];\n    const {\n      metaSchema,\n      skipSchemaValidation = globalSkipSchemaValidation\n    } = endpointDefinition;\n    try {\n      let transformResponse = getTransformCallbackForEndpoint(endpointDefinition, \"transformResponse\");\n      const baseQueryApi = {\n        signal,\n        abort,\n        dispatch,\n        getState,\n        extra,\n        endpoint: arg.endpointName,\n        type: arg.type,\n        forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0,\n        queryCacheKey: arg.type === \"query\" ? arg.queryCacheKey : void 0\n      };\n      const forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\n      let finalQueryReturnValue;\n      const fetchPage = async (data, param, maxPages, previous) => {\n        if (param == null && data.pages.length) {\n          return Promise.resolve({\n            data\n          });\n        }\n        const finalQueryArg = {\n          queryArg: arg.originalArgs,\n          pageParam: param\n        };\n        const pageResponse = await executeRequest(finalQueryArg);\n        const addTo = previous ? addToStart : addToEnd;\n        return {\n          data: {\n            pages: addTo(data.pages, pageResponse.data, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          },\n          meta: pageResponse.meta\n        };\n      };\n      async function executeRequest(finalQueryArg) {\n        let result;\n        const {\n          extraOptions,\n          argSchema,\n          rawResponseSchema,\n          responseSchema\n        } = endpointDefinition;\n        if (argSchema && !skipSchemaValidation) {\n          finalQueryArg = await parseWithSchema(argSchema, finalQueryArg, \"argSchema\", {}\n          // we don't have a meta yet, so we can't pass it\n          );\n        }\n        if (forceQueryFn) {\n          result = forceQueryFn();\n        } else if (endpointDefinition.query) {\n          result = await baseQuery(endpointDefinition.query(finalQueryArg), baseQueryApi, extraOptions);\n        } else {\n          result = await endpointDefinition.queryFn(finalQueryArg, baseQueryApi, extraOptions, arg2 => baseQuery(arg2, baseQueryApi, extraOptions));\n        }\n        if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n          const what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n          let err;\n          if (!result) {\n            err = `${what} did not return anything.`;\n          } else if (typeof result !== \"object\") {\n            err = `${what} did not return an object.`;\n          } else if (result.error && result.data) {\n            err = `${what} returned an object containing both \\`error\\` and \\`result\\`.`;\n          } else if (result.error === void 0 && result.data === void 0) {\n            err = `${what} returned an object containing neither a valid \\`error\\` and \\`result\\`. At least one of them should not be \\`undefined\\``;\n          } else {\n            for (const key of Object.keys(result)) {\n              if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\n                err = `The object returned by ${what} has the unknown property ${key}.`;\n                break;\n              }\n            }\n          }\n          if (err) {\n            console.error(`Error encountered handling the endpoint ${arg.endpointName}.\n                  ${err}\n                  It needs to return an object with either the shape \\`{ data: <value> }\\` or \\`{ error: <value> }\\` that may contain an optional \\`meta\\` property.\n                  Object returned was:`, result);\n          }\n        }\n        if (result.error) throw new HandledError(result.error, result.meta);\n        let {\n          data\n        } = result;\n        if (rawResponseSchema && !skipSchemaValidation) {\n          data = await parseWithSchema(rawResponseSchema, result.data, \"rawResponseSchema\", result.meta);\n        }\n        let transformedResponse = await transformResponse(data, result.meta, finalQueryArg);\n        if (responseSchema && !skipSchemaValidation) {\n          transformedResponse = await parseWithSchema(responseSchema, transformedResponse, \"responseSchema\", result.meta);\n        }\n        return {\n          ...result,\n          data: transformedResponse\n        };\n      }\n      if (arg.type === \"query\" && \"infiniteQueryOptions\" in endpointDefinition) {\n        const {\n          infiniteQueryOptions\n        } = endpointDefinition;\n        const {\n          maxPages = Infinity\n        } = infiniteQueryOptions;\n        let result;\n        const blankData = {\n          pages: [],\n          pageParams: []\n        };\n        const cachedData = selectors.selectQueryEntry(getState(), arg.queryCacheKey)?.data;\n        const isForcedQueryNeedingRefetch =\n        // arg.forceRefetch\n        isForcedQuery(arg, getState()) && !arg.direction;\n        const existingData = isForcedQueryNeedingRefetch || !cachedData ? blankData : cachedData;\n        if (\"direction\" in arg && arg.direction && existingData.pages.length) {\n          const previous = arg.direction === \"backward\";\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const param = pageParamFn(infiniteQueryOptions, existingData, arg.originalArgs);\n          result = await fetchPage(existingData, param, maxPages, previous);\n        } else {\n          const {\n            initialPageParam = infiniteQueryOptions.initialPageParam\n          } = arg;\n          const cachedPageParams = cachedData?.pageParams ?? [];\n          const firstPageParam = cachedPageParams[0] ?? initialPageParam;\n          const totalPages = cachedPageParams.length;\n          result = await fetchPage(existingData, firstPageParam, maxPages);\n          if (forceQueryFn) {\n            result = {\n              data: result.data.pages[0]\n            };\n          }\n          for (let i = 1; i < totalPages; i++) {\n            const param = getNextPageParam(infiniteQueryOptions, result.data, arg.originalArgs);\n            result = await fetchPage(result.data, param, maxPages);\n          }\n        }\n        finalQueryReturnValue = result;\n      } else {\n        finalQueryReturnValue = await executeRequest(arg.originalArgs);\n      }\n      if (metaSchema && !skipSchemaValidation && finalQueryReturnValue.meta) {\n        finalQueryReturnValue.meta = await parseWithSchema(metaSchema, finalQueryReturnValue.meta, \"metaSchema\", finalQueryReturnValue.meta);\n      }\n      return fulfillWithValue(finalQueryReturnValue.data, addShouldAutoBatch({\n        fulfilledTimeStamp: Date.now(),\n        baseQueryMeta: finalQueryReturnValue.meta\n      }));\n    } catch (error) {\n      let caughtError = error;\n      if (caughtError instanceof HandledError) {\n        let transformErrorResponse = getTransformCallbackForEndpoint(endpointDefinition, \"transformErrorResponse\");\n        const {\n          rawErrorResponseSchema,\n          errorResponseSchema\n        } = endpointDefinition;\n        let {\n          value,\n          meta\n        } = caughtError;\n        try {\n          if (rawErrorResponseSchema && !skipSchemaValidation) {\n            value = await parseWithSchema(rawErrorResponseSchema, value, \"rawErrorResponseSchema\", meta);\n          }\n          if (metaSchema && !skipSchemaValidation) {\n            meta = await parseWithSchema(metaSchema, meta, \"metaSchema\", meta);\n          }\n          let transformedErrorResponse = await transformErrorResponse(value, meta, arg.originalArgs);\n          if (errorResponseSchema && !skipSchemaValidation) {\n            transformedErrorResponse = await parseWithSchema(errorResponseSchema, transformedErrorResponse, \"errorResponseSchema\", meta);\n          }\n          return rejectWithValue(transformedErrorResponse, addShouldAutoBatch({\n            baseQueryMeta: meta\n          }));\n        } catch (e) {\n          caughtError = e;\n        }\n      }\n      try {\n        if (caughtError instanceof NamedSchemaError) {\n          const info = {\n            endpoint: arg.endpointName,\n            arg: arg.originalArgs,\n            type: arg.type,\n            queryCacheKey: arg.type === \"query\" ? arg.queryCacheKey : void 0\n          };\n          endpointDefinition.onSchemaFailure?.(caughtError, info);\n          onSchemaFailure?.(caughtError, info);\n          const {\n            catchSchemaFailure = globalCatchSchemaFailure\n          } = endpointDefinition;\n          if (catchSchemaFailure) {\n            return rejectWithValue(catchSchemaFailure(caughtError, info), addShouldAutoBatch({\n              baseQueryMeta: caughtError._bqMeta\n            }));\n          }\n        }\n      } catch (e) {\n        caughtError = e;\n      }\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV !== \"production\") {\n        console.error(`An unhandled error occurred processing a request for the endpoint \"${arg.endpointName}\".\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`, caughtError);\n      } else {\n        console.error(caughtError);\n      }\n      throw caughtError;\n    }\n  };\n  function isForcedQuery(arg, state) {\n    const requestState = selectors.selectQueryEntry(state, arg.queryCacheKey);\n    const baseFetchOnMountOrArgChange = selectors.selectConfig(state).refetchOnMountOrArgChange;\n    const fulfilledVal = requestState?.fulfilledTimeStamp;\n    const refetchVal = arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);\n    if (refetchVal) {\n      return refetchVal === true || (Number(/* @__PURE__ */new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n    }\n    return false;\n  }\n  const createQueryThunk = () => {\n    const generatedQueryThunk = createAsyncThunk(`${reducerPath}/executeQuery`, executeEndpoint, {\n      getPendingMeta({\n        arg\n      }) {\n        const endpointDefinition = endpointDefinitions[arg.endpointName];\n        return addShouldAutoBatch({\n          startedTimeStamp: Date.now(),\n          ...(isInfiniteQueryDefinition(endpointDefinition) ? {\n            direction: arg.direction\n          } : {})\n        });\n      },\n      condition(queryThunkArg, {\n        getState\n      }) {\n        const state = getState();\n        const requestState = selectors.selectQueryEntry(state, queryThunkArg.queryCacheKey);\n        const fulfilledVal = requestState?.fulfilledTimeStamp;\n        const currentArg = queryThunkArg.originalArgs;\n        const previousArg = requestState?.originalArgs;\n        const endpointDefinition = endpointDefinitions[queryThunkArg.endpointName];\n        const direction = queryThunkArg.direction;\n        if (isUpsertQuery(queryThunkArg)) {\n          return true;\n        }\n        if (requestState?.status === \"pending\") {\n          return false;\n        }\n        if (isForcedQuery(queryThunkArg, state)) {\n          return true;\n        }\n        if (isQueryDefinition(endpointDefinition) && endpointDefinition?.forceRefetch?.({\n          currentArg,\n          previousArg,\n          endpointState: requestState,\n          state\n        })) {\n          return true;\n        }\n        if (fulfilledVal && !direction) {\n          return false;\n        }\n        return true;\n      },\n      dispatchConditionRejection: true\n    });\n    return generatedQueryThunk;\n  };\n  const queryThunk = createQueryThunk();\n  const infiniteQueryThunk = createQueryThunk();\n  const mutationThunk = createAsyncThunk(`${reducerPath}/executeMutation`, executeEndpoint, {\n    getPendingMeta() {\n      return addShouldAutoBatch({\n        startedTimeStamp: Date.now()\n      });\n    }\n  });\n  const hasTheForce = options => \"force\" in options;\n  const hasMaxAge = options => \"ifOlderThan\" in options;\n  const prefetch = (endpointName, arg, options) => (dispatch, getState) => {\n    const force = hasTheForce(options) && options.force;\n    const maxAge = hasMaxAge(options) && options.ifOlderThan;\n    const queryAction = (force2 = true) => {\n      const options2 = {\n        forceRefetch: force2,\n        isPrefetch: true\n      };\n      return api.endpoints[endpointName].initiate(arg, options2);\n    };\n    const latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n    if (force) {\n      dispatch(queryAction());\n    } else if (maxAge) {\n      const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp;\n      if (!lastFulfilledTs) {\n        dispatch(queryAction());\n        return;\n      }\n      const shouldRetrigger = (Number(/* @__PURE__ */new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n      if (shouldRetrigger) {\n        dispatch(queryAction());\n      }\n    } else {\n      dispatch(queryAction(false));\n    }\n  };\n  function matchesEndpoint(endpointName) {\n    return action => action?.meta?.arg?.endpointName === endpointName;\n  }\n  function buildMatchThunkActions(thunk, endpointName) {\n    return {\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: isAllOf(isFulfilled(thunk), matchesEndpoint(endpointName)),\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName))\n    };\n  }\n  return {\n    queryThunk,\n    mutationThunk,\n    infiniteQueryThunk,\n    prefetch,\n    updateQueryData,\n    upsertQueryData,\n    patchQueryData,\n    buildMatchThunkActions\n  };\n}\nfunction getNextPageParam(options, {\n  pages,\n  pageParams\n}, queryArg) {\n  const lastIndex = pages.length - 1;\n  return options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams, queryArg);\n}\nfunction getPreviousPageParam(options, {\n  pages,\n  pageParams\n}, queryArg) {\n  return options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams, queryArg);\n}\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n  return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], isFulfilled(action) ? action.payload : void 0, isRejectedWithValue(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n}\n\n// src/query/core/buildSlice.ts\nimport { isDraft as isDraft6 } from \"immer\";\nimport { applyPatches, original as original3 } from \"immer\";\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n  const substate = state[queryCacheKey];\n  if (substate) {\n    update(substate);\n  }\n}\nfunction getMutationCacheKey(id) {\n  return (\"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId;\n}\nfunction updateMutationSubstateIfExists(state, id, update) {\n  const substate = state[getMutationCacheKey(id)];\n  if (substate) {\n    update(substate);\n  }\n}\nvar initialState = {};\nfunction buildSlice({\n  reducerPath,\n  queryThunk,\n  mutationThunk,\n  serializeQueryArgs,\n  context: {\n    endpointDefinitions: definitions,\n    apiUid,\n    extractRehydrationInfo,\n    hasRehydrationInfo\n  },\n  assertTagType,\n  config\n}) {\n  const resetApiState = createAction(`${reducerPath}/resetApiState`);\n  function writePendingCacheEntry(draft, arg, upserting, meta) {\n    draft[arg.queryCacheKey] ??= {\n      status: \"uninitialized\" /* uninitialized */,\n      endpointName: arg.endpointName\n    };\n    updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n      substate.status = \"pending\" /* pending */;\n      substate.requestId = upserting && substate.requestId ?\n      // for `upsertQuery` **updates**, keep the current `requestId`\n      substate.requestId :\n      // for normal queries or `upsertQuery` **inserts** always update the `requestId`\n      meta.requestId;\n      if (arg.originalArgs !== void 0) {\n        substate.originalArgs = arg.originalArgs;\n      }\n      substate.startedTimeStamp = meta.startedTimeStamp;\n      const endpointDefinition = definitions[meta.arg.endpointName];\n      if (isInfiniteQueryDefinition(endpointDefinition) && \"direction\" in arg) {\n        ;\n        substate.direction = arg.direction;\n      }\n    });\n  }\n  function writeFulfilledCacheEntry(draft, meta, payload, upserting) {\n    updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, substate => {\n      if (substate.requestId !== meta.requestId && !upserting) return;\n      const {\n        merge\n      } = definitions[meta.arg.endpointName];\n      substate.status = \"fulfilled\" /* fulfilled */;\n      if (merge) {\n        if (substate.data !== void 0) {\n          const {\n            fulfilledTimeStamp,\n            arg,\n            baseQueryMeta,\n            requestId\n          } = meta;\n          let newData = produce(substate.data, draftSubstateData => {\n            return merge(draftSubstateData, payload, {\n              arg: arg.originalArgs,\n              baseQueryMeta,\n              fulfilledTimeStamp,\n              requestId\n            });\n          });\n          substate.data = newData;\n        } else {\n          substate.data = payload;\n        }\n      } else {\n        substate.data = definitions[meta.arg.endpointName].structuralSharing ?? true ? copyWithStructuralSharing(isDraft6(substate.data) ? original3(substate.data) : substate.data, payload) : payload;\n      }\n      delete substate.error;\n      substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n    });\n  }\n  const querySlice = createSlice({\n    name: `${reducerPath}/queries`,\n    initialState,\n    reducers: {\n      removeQueryResult: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey\n          }\n        }) {\n          delete draft[queryCacheKey];\n        },\n        prepare: prepareAutoBatched()\n      },\n      cacheEntriesUpserted: {\n        reducer(draft, action) {\n          for (const entry of action.payload) {\n            const {\n              queryDescription: arg,\n              value\n            } = entry;\n            writePendingCacheEntry(draft, arg, true, {\n              arg,\n              requestId: action.meta.requestId,\n              startedTimeStamp: action.meta.timestamp\n            });\n            writeFulfilledCacheEntry(draft, {\n              arg,\n              requestId: action.meta.requestId,\n              fulfilledTimeStamp: action.meta.timestamp,\n              baseQueryMeta: {}\n            }, value,\n            // We know we're upserting here\n            true);\n          }\n        },\n        prepare: payload => {\n          const queryDescriptions = payload.map(entry => {\n            const {\n              endpointName,\n              arg,\n              value\n            } = entry;\n            const endpointDefinition = definitions[endpointName];\n            const queryDescription = {\n              type: \"query\",\n              endpointName,\n              originalArgs: entry.arg,\n              queryCacheKey: serializeQueryArgs({\n                queryArgs: arg,\n                endpointDefinition,\n                endpointName\n              })\n            };\n            return {\n              queryDescription,\n              value\n            };\n          });\n          const result = {\n            payload: queryDescriptions,\n            meta: {\n              [SHOULD_AUTOBATCH]: true,\n              requestId: nanoid(),\n              timestamp: Date.now()\n            }\n          };\n          return result;\n        }\n      },\n      queryResultPatched: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey,\n            patches\n          }\n        }) {\n          updateQuerySubstateIfExists(draft, queryCacheKey, substate => {\n            substate.data = applyPatches(substate.data, patches.concat());\n          });\n        },\n        prepare: prepareAutoBatched()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(queryThunk.pending, (draft, {\n        meta,\n        meta: {\n          arg\n        }\n      }) => {\n        const upserting = isUpsertQuery(arg);\n        writePendingCacheEntry(draft, arg, upserting, meta);\n      }).addCase(queryThunk.fulfilled, (draft, {\n        meta,\n        payload\n      }) => {\n        const upserting = isUpsertQuery(meta.arg);\n        writeFulfilledCacheEntry(draft, meta, payload, upserting);\n      }).addCase(queryThunk.rejected, (draft, {\n        meta: {\n          condition,\n          arg,\n          requestId\n        },\n        error,\n        payload\n      }) => {\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n          if (condition) {} else {\n            if (substate.requestId !== requestId) return;\n            substate.status = \"rejected\" /* rejected */;\n            substate.error = payload ?? error;\n          }\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          queries\n        } = extractRehydrationInfo(action);\n        for (const [key, entry] of Object.entries(queries)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          entry?.status === \"fulfilled\" /* fulfilled */ || entry?.status === \"rejected\" /* rejected */) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  const mutationSlice = createSlice({\n    name: `${reducerPath}/mutations`,\n    initialState,\n    reducers: {\n      removeMutationResult: {\n        reducer(draft, {\n          payload\n        }) {\n          const cacheKey = getMutationCacheKey(payload);\n          if (cacheKey in draft) {\n            delete draft[cacheKey];\n          }\n        },\n        prepare: prepareAutoBatched()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(mutationThunk.pending, (draft, {\n        meta,\n        meta: {\n          requestId,\n          arg,\n          startedTimeStamp\n        }\n      }) => {\n        if (!arg.track) return;\n        draft[getMutationCacheKey(meta)] = {\n          requestId,\n          status: \"pending\" /* pending */,\n          endpointName: arg.endpointName,\n          startedTimeStamp\n        };\n      }).addCase(mutationThunk.fulfilled, (draft, {\n        payload,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = \"fulfilled\" /* fulfilled */;\n          substate.data = payload;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(mutationThunk.rejected, (draft, {\n        payload,\n        error,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = \"rejected\" /* rejected */;\n          substate.error = payload ?? error;\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          mutations\n        } = extractRehydrationInfo(action);\n        for (const [key, entry] of Object.entries(mutations)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          (entry?.status === \"fulfilled\" /* fulfilled */ || entry?.status === \"rejected\" /* rejected */) &&\n          // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n          key !== entry?.requestId) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  const initialInvalidationState = {\n    tags: {},\n    keys: {}\n  };\n  const invalidationSlice = createSlice({\n    name: `${reducerPath}/invalidation`,\n    initialState: initialInvalidationState,\n    reducers: {\n      updateProvidedBy: {\n        reducer(draft, action) {\n          for (const {\n            queryCacheKey,\n            providedTags\n          } of action.payload) {\n            removeCacheKeyFromTags(draft, queryCacheKey);\n            for (const {\n              type,\n              id\n            } of providedTags) {\n              const subscribedQueries = (draft.tags[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n              const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n            draft.keys[queryCacheKey] = providedTags;\n          }\n        },\n        prepare: prepareAutoBatched()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, (draft, {\n        payload: {\n          queryCacheKey\n        }\n      }) => {\n        removeCacheKeyFromTags(draft, queryCacheKey);\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          provided\n        } = extractRehydrationInfo(action);\n        for (const [type, incomingTags] of Object.entries(provided)) {\n          for (const [id, cacheKeys] of Object.entries(incomingTags)) {\n            const subscribedQueries = (draft.tags[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n            for (const queryCacheKey of cacheKeys) {\n              const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n          }\n        }\n      }).addMatcher(isAnyOf(isFulfilled(queryThunk), isRejectedWithValue(queryThunk)), (draft, action) => {\n        writeProvidedTagsForQueries(draft, [action]);\n      }).addMatcher(querySlice.actions.cacheEntriesUpserted.match, (draft, action) => {\n        const mockActions = action.payload.map(({\n          queryDescription,\n          value\n        }) => {\n          return {\n            type: \"UNKNOWN\",\n            payload: value,\n            meta: {\n              requestStatus: \"fulfilled\",\n              requestId: \"UNKNOWN\",\n              arg: queryDescription\n            }\n          };\n        });\n        writeProvidedTagsForQueries(draft, mockActions);\n      });\n    }\n  });\n  function removeCacheKeyFromTags(draft, queryCacheKey) {\n    const existingTags = draft.keys[queryCacheKey] ?? [];\n    for (const tag of existingTags) {\n      const tagType = tag.type;\n      const tagId = tag.id ?? \"__internal_without_id\";\n      const tagSubscriptions = draft.tags[tagType]?.[tagId];\n      if (tagSubscriptions) {\n        draft.tags[tagType][tagId] = tagSubscriptions.filter(qc => qc !== queryCacheKey);\n      }\n    }\n    delete draft.keys[queryCacheKey];\n  }\n  function writeProvidedTagsForQueries(draft, actions2) {\n    const providedByEntries = actions2.map(action => {\n      const providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n      const {\n        queryCacheKey\n      } = action.meta.arg;\n      return {\n        queryCacheKey,\n        providedTags\n      };\n    });\n    invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy(providedByEntries));\n  }\n  const subscriptionSlice = createSlice({\n    name: `${reducerPath}/subscriptions`,\n    initialState,\n    reducers: {\n      updateSubscriptionOptions(d, a) {},\n      unsubscribeQueryResult(d, a) {},\n      internal_getRTKQSubscriptions() {}\n    }\n  });\n  const internalSubscriptionsSlice = createSlice({\n    name: `${reducerPath}/internalSubscriptions`,\n    initialState,\n    reducers: {\n      subscriptionsUpdated: {\n        reducer(state, action) {\n          return applyPatches(state, action.payload);\n        },\n        prepare: prepareAutoBatched()\n      }\n    }\n  });\n  const configSlice = createSlice({\n    name: `${reducerPath}/config`,\n    initialState: {\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false,\n      ...config\n    },\n    reducers: {\n      middlewareRegistered(state, {\n        payload\n      }) {\n        state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n      }\n    },\n    extraReducers: builder => {\n      builder.addCase(onOnline, state => {\n        state.online = true;\n      }).addCase(onOffline, state => {\n        state.online = false;\n      }).addCase(onFocus, state => {\n        state.focused = true;\n      }).addCase(onFocusLost, state => {\n        state.focused = false;\n      }).addMatcher(hasRehydrationInfo, draft => ({\n        ...draft\n      }));\n    }\n  });\n  const combinedReducer = (0, src_exports.combineReducers)({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: internalSubscriptionsSlice.reducer,\n    config: configSlice.reducer\n  });\n  const reducer = (state, action) => combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n  const actions = {\n    ...configSlice.actions,\n    ...querySlice.actions,\n    ...subscriptionSlice.actions,\n    ...internalSubscriptionsSlice.actions,\n    ...mutationSlice.actions,\n    ...invalidationSlice.actions,\n    resetApiState\n  };\n  return {\n    reducer,\n    actions\n  };\n}\n\n// src/query/core/buildSelectors.ts\nvar skipToken = /* @__PURE__ */Symbol.for(\"RTKQ/skipToken\");\nvar initialSubState = {\n  status: \"uninitialized\" /* uninitialized */\n};\nvar defaultQuerySubState = /* @__PURE__ */produce(initialSubState, () => {});\nvar defaultMutationSubState = /* @__PURE__ */produce(initialSubState, () => {});\nfunction buildSelectors({\n  serializeQueryArgs,\n  reducerPath,\n  createSelector: createSelector2\n}) {\n  const selectSkippedQuery = state => defaultQuerySubState;\n  const selectSkippedMutation = state => defaultMutationSubState;\n  return {\n    buildQuerySelector,\n    buildInfiniteQuerySelector,\n    buildMutationSelector,\n    selectInvalidatedBy,\n    selectCachedArgsForQuery,\n    selectApiState,\n    selectQueries,\n    selectMutations,\n    selectQueryEntry,\n    selectConfig\n  };\n  function withRequestFlags(substate) {\n    return {\n      ...substate,\n      ...getRequestStatusFlags(substate.status)\n    };\n  }\n  function selectApiState(rootState) {\n    const state = rootState[reducerPath];\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state) {\n        if (selectApiState.triggered) return state;\n        selectApiState.triggered = true;\n        console.error(`Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`);\n      }\n    }\n    return state;\n  }\n  function selectQueries(rootState) {\n    return selectApiState(rootState)?.queries;\n  }\n  function selectQueryEntry(rootState, cacheKey) {\n    return selectQueries(rootState)?.[cacheKey];\n  }\n  function selectMutations(rootState) {\n    return selectApiState(rootState)?.mutations;\n  }\n  function selectConfig(rootState) {\n    return selectApiState(rootState)?.config;\n  }\n  function buildAnyQuerySelector(endpointName, endpointDefinition, combiner) {\n    return queryArgs => {\n      if (queryArgs === skipToken) {\n        return createSelector2(selectSkippedQuery, combiner);\n      }\n      const serializedArgs = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      const selectQuerySubstate = state => selectQueryEntry(state, serializedArgs) ?? defaultQuerySubState;\n      return createSelector2(selectQuerySubstate, combiner);\n    };\n  }\n  function buildQuerySelector(endpointName, endpointDefinition) {\n    return buildAnyQuerySelector(endpointName, endpointDefinition, withRequestFlags);\n  }\n  function buildInfiniteQuerySelector(endpointName, endpointDefinition) {\n    const {\n      infiniteQueryOptions\n    } = endpointDefinition;\n    function withInfiniteQueryResultFlags(substate) {\n      const stateWithRequestFlags = {\n        ...substate,\n        ...getRequestStatusFlags(substate.status)\n      };\n      const {\n        isLoading,\n        isError,\n        direction\n      } = stateWithRequestFlags;\n      const isForward = direction === \"forward\";\n      const isBackward = direction === \"backward\";\n      return {\n        ...stateWithRequestFlags,\n        hasNextPage: getHasNextPage(infiniteQueryOptions, stateWithRequestFlags.data, stateWithRequestFlags.originalArgs),\n        hasPreviousPage: getHasPreviousPage(infiniteQueryOptions, stateWithRequestFlags.data, stateWithRequestFlags.originalArgs),\n        isFetchingNextPage: isLoading && isForward,\n        isFetchingPreviousPage: isLoading && isBackward,\n        isFetchNextPageError: isError && isForward,\n        isFetchPreviousPageError: isError && isBackward\n      };\n    }\n    return buildAnyQuerySelector(endpointName, endpointDefinition, withInfiniteQueryResultFlags);\n  }\n  function buildMutationSelector() {\n    return id => {\n      let mutationId;\n      if (typeof id === \"object\") {\n        mutationId = getMutationCacheKey(id) ?? skipToken;\n      } else {\n        mutationId = id;\n      }\n      const selectMutationSubstate = state => selectApiState(state)?.mutations?.[mutationId] ?? defaultMutationSubState;\n      const finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n      return createSelector2(finalSelectMutationSubstate, withRequestFlags);\n    };\n  }\n  function selectInvalidatedBy(state, tags) {\n    const apiState = state[reducerPath];\n    const toInvalidate = /* @__PURE__ */new Set();\n    for (const tag of tags.filter(isNotNullish).map(expandTagDescription)) {\n      const provided = apiState.provided.tags[tag.type];\n      if (!provided) {\n        continue;\n      }\n      let invalidateSubscriptions = (tag.id !== void 0 ?\n      // id given: invalidate all queries that provide this type & id\n      provided[tag.id] :\n      // no id: invalidate all queries that provide this type\n      flatten(Object.values(provided))) ?? [];\n      for (const invalidate of invalidateSubscriptions) {\n        toInvalidate.add(invalidate);\n      }\n    }\n    return flatten(Array.from(toInvalidate.values()).map(queryCacheKey => {\n      const querySubState = apiState.queries[queryCacheKey];\n      return querySubState ? [{\n        queryCacheKey,\n        endpointName: querySubState.endpointName,\n        originalArgs: querySubState.originalArgs\n      }] : [];\n    }));\n  }\n  function selectCachedArgsForQuery(state, queryName) {\n    return Object.values(selectQueries(state)).filter(entry => entry?.endpointName === queryName && entry.status !== \"uninitialized\" /* uninitialized */).map(entry => entry.originalArgs);\n  }\n  function getHasNextPage(options, data, queryArg) {\n    if (!data) return false;\n    return getNextPageParam(options, data, queryArg) != null;\n  }\n  function getHasPreviousPage(options, data, queryArg) {\n    if (!data || !options.getPreviousPageParam) return false;\n    return getPreviousPageParam(options, data, queryArg) != null;\n  }\n}\n\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = ({\n  endpointName,\n  queryArgs\n}) => {\n  let serialized = \"\";\n  const cached = cache?.get(queryArgs);\n  if (typeof cached === \"string\") {\n    serialized = cached;\n  } else {\n    const stringified = JSON.stringify(queryArgs, (key, value) => {\n      value = typeof value === \"bigint\" ? {\n        $bigint: value.toString()\n      } : value;\n      value = (0, src_exports.isPlainObject)(value) ? Object.keys(value).sort().reduce((acc, key2) => {\n        acc[key2] = value[key2];\n        return acc;\n      }, {}) : value;\n      return value;\n    });\n    if ((0, src_exports.isPlainObject)(queryArgs)) {\n      cache?.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return `${endpointName}(${serialized})`;\n};\n\n// src/query/createApi.ts\nimport { weakMapMemoize as weakMapMemoize3 } from \"reselect\";\nfunction buildCreateApi(...modules) {\n  return function baseCreateApi(options) {\n    const extractRehydrationInfo = weakMapMemoize3(action => options.extractRehydrationInfo?.(action, {\n      reducerPath: options.reducerPath ?? \"api\"\n    }));\n    const optionsWithDefaults = {\n      reducerPath: \"api\",\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false,\n      invalidationBehavior: \"delayed\",\n      ...options,\n      extractRehydrationInfo,\n      serializeQueryArgs(queryArgsApi) {\n        let finalSerializeQueryArgs = defaultSerializeQueryArgs;\n        if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\n          const endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs;\n          finalSerializeQueryArgs = queryArgsApi2 => {\n            const initialResult = endpointSQA(queryArgsApi2);\n            if (typeof initialResult === \"string\") {\n              return initialResult;\n            } else {\n              return defaultSerializeQueryArgs({\n                ...queryArgsApi2,\n                queryArgs: initialResult\n              });\n            }\n          };\n        } else if (options.serializeQueryArgs) {\n          finalSerializeQueryArgs = options.serializeQueryArgs;\n        }\n        return finalSerializeQueryArgs(queryArgsApi);\n      },\n      tagTypes: [...(options.tagTypes || [])]\n    };\n    const context = {\n      endpointDefinitions: {},\n      batch(fn) {\n        fn();\n      },\n      apiUid: nanoid(),\n      extractRehydrationInfo,\n      hasRehydrationInfo: weakMapMemoize3(action => extractRehydrationInfo(action) != null)\n    };\n    const api = {\n      injectEndpoints,\n      enhanceEndpoints({\n        addTagTypes,\n        endpoints\n      }) {\n        if (addTagTypes) {\n          for (const eT of addTagTypes) {\n            if (!optionsWithDefaults.tagTypes.includes(eT)) {\n              ;\n              optionsWithDefaults.tagTypes.push(eT);\n            }\n          }\n        }\n        if (endpoints) {\n          for (const [endpointName, partialDefinition] of Object.entries(endpoints)) {\n            if (typeof partialDefinition === \"function\") {\n              partialDefinition(context.endpointDefinitions[endpointName]);\n            } else {\n              Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n            }\n          }\n        }\n        return api;\n      }\n    };\n    const initializedModules = modules.map(m => m.init(api, optionsWithDefaults, context));\n    function injectEndpoints(inject) {\n      const evaluatedEndpoints = inject.endpoints({\n        query: x => ({\n          ...x,\n          type: \"query\" /* query */\n        }),\n        mutation: x => ({\n          ...x,\n          type: \"mutation\" /* mutation */\n        }),\n        infiniteQuery: x => ({\n          ...x,\n          type: \"infinitequery\" /* infinitequery */\n        })\n      });\n      for (const [endpointName, definition] of Object.entries(evaluatedEndpoints)) {\n        if (inject.overrideExisting !== true && endpointName in context.endpointDefinitions) {\n          if (inject.overrideExisting === \"throw\") {\n            throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(39) : `called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          } else if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n            console.error(`called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          }\n          continue;\n        }\n        if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n          if (isInfiniteQueryDefinition(definition)) {\n            const {\n              infiniteQueryOptions\n            } = definition;\n            const {\n              maxPages,\n              getPreviousPageParam: getPreviousPageParam2\n            } = infiniteQueryOptions;\n            if (typeof maxPages === \"number\") {\n              if (maxPages < 1) {\n                throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(40) : `maxPages for endpoint '${endpointName}' must be a number greater than 0`);\n              }\n              if (typeof getPreviousPageParam2 !== \"function\") {\n                throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(41) : `getPreviousPageParam for endpoint '${endpointName}' must be a function if maxPages is used`);\n              }\n            }\n          }\n        }\n        context.endpointDefinitions[endpointName] = definition;\n        for (const m of initializedModules) {\n          m.injectEndpoint(endpointName, definition);\n        }\n      }\n      return api;\n    }\n    return api.injectEndpoints({\n      endpoints: options.endpoints\n    });\n  };\n}\n\n// src/query/fakeBaseQuery.ts\nvar _NEVER = /* @__PURE__ */Symbol();\nfunction fakeBaseQuery() {\n  return function () {\n    throw new Error(process.env.NODE_ENV === \"production\" ? formatProdErrorMessage(33) : \"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n  };\n}\n\n// src/query/core/module.ts\nimport { enablePatches } from \"immer\";\n\n// src/query/tsHelpers.ts\nfunction assertCast(v) {}\nfunction safeAssign(target, ...args) {\n  return Object.assign(target, ...args);\n}\n\n// src/query/core/buildMiddleware/batchActions.ts\nimport { produceWithPatches as produceWithPatches2 } from \"immer\";\nvar buildBatchedActionsHandler = ({\n  api,\n  queryThunk,\n  internalState\n}) => {\n  const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;\n  let previousSubscriptions = null;\n  let updateSyncTimer = null;\n  const {\n    updateSubscriptionOptions,\n    unsubscribeQueryResult\n  } = api.internalActions;\n  const actuallyMutateSubscriptions = (mutableState, action) => {\n    if (updateSubscriptionOptions.match(action)) {\n      const {\n        queryCacheKey,\n        requestId,\n        options\n      } = action.payload;\n      if (mutableState?.[queryCacheKey]?.[requestId]) {\n        mutableState[queryCacheKey][requestId] = options;\n      }\n      return true;\n    }\n    if (unsubscribeQueryResult.match(action)) {\n      const {\n        queryCacheKey,\n        requestId\n      } = action.payload;\n      if (mutableState[queryCacheKey]) {\n        delete mutableState[queryCacheKey][requestId];\n      }\n      return true;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) {\n      delete mutableState[action.payload.queryCacheKey];\n      return true;\n    }\n    if (queryThunk.pending.match(action)) {\n      const {\n        meta: {\n          arg,\n          requestId\n        }\n      } = action;\n      const substate = mutableState[arg.queryCacheKey] ??= {};\n      substate[`${requestId}_running`] = {};\n      if (arg.subscribe) {\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n      }\n      return true;\n    }\n    let mutated = false;\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {\n      const state = mutableState[action.meta.arg.queryCacheKey] || {};\n      const key = `${action.meta.requestId}_running`;\n      mutated ||= !!state[key];\n      delete state[key];\n    }\n    if (queryThunk.rejected.match(action)) {\n      const {\n        meta: {\n          condition,\n          arg,\n          requestId\n        }\n      } = action;\n      if (condition && arg.subscribe) {\n        const substate = mutableState[arg.queryCacheKey] ??= {};\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n        mutated = true;\n      }\n    }\n    return mutated;\n  };\n  const getSubscriptions = () => internalState.currentSubscriptions;\n  const getSubscriptionCount = queryCacheKey => {\n    const subscriptions = getSubscriptions();\n    const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};\n    return countObjectKeys(subscriptionsForQueryArg);\n  };\n  const isRequestSubscribed = (queryCacheKey, requestId) => {\n    const subscriptions = getSubscriptions();\n    return !!subscriptions?.[queryCacheKey]?.[requestId];\n  };\n  const subscriptionSelectors = {\n    getSubscriptions,\n    getSubscriptionCount,\n    isRequestSubscribed\n  };\n  return (action, mwApi) => {\n    if (!previousSubscriptions) {\n      previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n    }\n    if (api.util.resetApiState.match(action)) {\n      previousSubscriptions = internalState.currentSubscriptions = {};\n      updateSyncTimer = null;\n      return [true, false];\n    }\n    if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {\n      return [false, subscriptionSelectors];\n    }\n    const didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n    let actionShouldContinue = true;\n    if (didMutate) {\n      if (!updateSyncTimer) {\n        updateSyncTimer = setTimeout(() => {\n          const newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n          const [, patches] = produceWithPatches2(previousSubscriptions, () => newSubscriptions);\n          mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n          previousSubscriptions = newSubscriptions;\n          updateSyncTimer = null;\n        }, 500);\n      }\n      const isSubscriptionSliceAction = typeof action.type == \"string\" && !!action.type.startsWith(subscriptionsPrefix);\n      const isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n      actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n    }\n    return [actionShouldContinue, false];\n  };\n};\n\n// src/query/core/buildMiddleware/cacheCollection.ts\nfunction isObjectEmpty(obj) {\n  for (const k in obj) {\n    return false;\n  }\n  return true;\n}\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\nvar buildCacheCollectionHandler = ({\n  reducerPath,\n  api,\n  queryThunk,\n  context,\n  internalState,\n  selectors: {\n    selectQueryEntry,\n    selectConfig\n  }\n}) => {\n  const {\n    removeQueryResult,\n    unsubscribeQueryResult,\n    cacheEntriesUpserted\n  } = api.internalActions;\n  const canTriggerUnsubscribe = isAnyOf(unsubscribeQueryResult.match, queryThunk.fulfilled, queryThunk.rejected, cacheEntriesUpserted.match);\n  function anySubscriptionsRemainingForKey(queryCacheKey) {\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    return !!subscriptions && !isObjectEmpty(subscriptions);\n  }\n  const currentRemovalTimeouts = {};\n  const handler = (action, mwApi, internalState2) => {\n    const state = mwApi.getState();\n    const config = selectConfig(state);\n    if (canTriggerUnsubscribe(action)) {\n      let queryCacheKeys;\n      if (cacheEntriesUpserted.match(action)) {\n        queryCacheKeys = action.payload.map(entry => entry.queryDescription.queryCacheKey);\n      } else {\n        const {\n          queryCacheKey\n        } = unsubscribeQueryResult.match(action) ? action.payload : action.meta.arg;\n        queryCacheKeys = [queryCacheKey];\n      }\n      handleUnsubscribeMany(queryCacheKeys, mwApi, config);\n    }\n    if (api.util.resetApiState.match(action)) {\n      for (const [key, timeout] of Object.entries(currentRemovalTimeouts)) {\n        if (timeout) clearTimeout(timeout);\n        delete currentRemovalTimeouts[key];\n      }\n    }\n    if (context.hasRehydrationInfo(action)) {\n      const {\n        queries\n      } = context.extractRehydrationInfo(action);\n      handleUnsubscribeMany(Object.keys(queries), mwApi, config);\n    }\n  };\n  function handleUnsubscribeMany(cacheKeys, api2, config) {\n    const state = api2.getState();\n    for (const queryCacheKey of cacheKeys) {\n      const entry = selectQueryEntry(state, queryCacheKey);\n      handleUnsubscribe(queryCacheKey, entry?.endpointName, api2, config);\n    }\n  }\n  function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n    const endpointDefinition = context.endpointDefinitions[endpointName];\n    const keepUnusedDataFor = endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor;\n    if (keepUnusedDataFor === Infinity) {\n      return;\n    }\n    const finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n    if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n      const currentTimeout = currentRemovalTimeouts[queryCacheKey];\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n          api2.dispatch(removeQueryResult({\n            queryCacheKey\n          }));\n        }\n        delete currentRemovalTimeouts[queryCacheKey];\n      }, finalKeepUnusedDataFor * 1e3);\n    }\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/cacheLifecycle.ts\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\nvar buildCacheLifecycleHandler = ({\n  api,\n  reducerPath,\n  context,\n  queryThunk,\n  mutationThunk,\n  internalState,\n  selectors: {\n    selectQueryEntry,\n    selectApiState\n  }\n}) => {\n  const isQueryThunk = isAsyncThunkAction(queryThunk);\n  const isMutationThunk = isAsyncThunkAction(mutationThunk);\n  const isFulfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  const lifecycleMap = {};\n  function resolveLifecycleEntry(cacheKey, data, meta) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle?.valueResolved) {\n      lifecycle.valueResolved({\n        data,\n        meta\n      });\n      delete lifecycle.valueResolved;\n    }\n  }\n  function removeLifecycleEntry(cacheKey) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle) {\n      delete lifecycleMap[cacheKey];\n      lifecycle.cacheEntryRemoved();\n    }\n  }\n  const handler = (action, mwApi, stateBefore) => {\n    const cacheKey = getCacheKey(action);\n    function checkForNewCacheKey(endpointName, cacheKey2, requestId, originalArgs) {\n      const oldEntry = selectQueryEntry(stateBefore, cacheKey2);\n      const newEntry = selectQueryEntry(mwApi.getState(), cacheKey2);\n      if (!oldEntry && newEntry) {\n        handleNewKey(endpointName, originalArgs, cacheKey2, mwApi, requestId);\n      }\n    }\n    if (queryThunk.pending.match(action)) {\n      checkForNewCacheKey(action.meta.arg.endpointName, cacheKey, action.meta.requestId, action.meta.arg.originalArgs);\n    } else if (api.internalActions.cacheEntriesUpserted.match(action)) {\n      for (const {\n        queryDescription,\n        value\n      } of action.payload) {\n        const {\n          endpointName,\n          originalArgs,\n          queryCacheKey\n        } = queryDescription;\n        checkForNewCacheKey(endpointName, queryCacheKey, action.meta.requestId, originalArgs);\n        resolveLifecycleEntry(queryCacheKey, value, {});\n      }\n    } else if (mutationThunk.pending.match(action)) {\n      const state = mwApi.getState()[reducerPath].mutations[cacheKey];\n      if (state) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (isFulfilledThunk(action)) {\n      resolveLifecycleEntry(cacheKey, action.payload, action.meta.baseQueryMeta);\n    } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n      removeLifecycleEntry(cacheKey);\n    } else if (api.util.resetApiState.match(action)) {\n      for (const cacheKey2 of Object.keys(lifecycleMap)) {\n        removeLifecycleEntry(cacheKey2);\n      }\n    }\n  };\n  function getCacheKey(action) {\n    if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n    if (isMutationThunk(action)) {\n      return action.meta.arg.fixedCacheKey ?? action.meta.requestId;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n    if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n    return \"\";\n  }\n  function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\n    const endpointDefinition = context.endpointDefinitions[endpointName];\n    const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded;\n    if (!onCacheEntryAdded) return;\n    const lifecycle = {};\n    const cacheEntryRemoved = new Promise(resolve => {\n      lifecycle.cacheEntryRemoved = resolve;\n    });\n    const cacheDataLoaded = Promise.race([new Promise(resolve => {\n      lifecycle.valueResolved = resolve;\n    }), cacheEntryRemoved.then(() => {\n      throw neverResolvedError;\n    })]);\n    cacheDataLoaded.catch(() => {});\n    lifecycleMap[queryCacheKey] = lifecycle;\n    const selector = api.endpoints[endpointName].select(isAnyQueryDefinition(endpointDefinition) ? originalArgs : queryCacheKey);\n    const extra = mwApi.dispatch((_, __, extra2) => extra2);\n    const lifecycleApi = {\n      ...mwApi,\n      getCacheEntry: () => selector(mwApi.getState()),\n      requestId,\n      extra,\n      updateCachedData: isAnyQueryDefinition(endpointDefinition) ? updateRecipe => mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n      cacheDataLoaded,\n      cacheEntryRemoved\n    };\n    const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n    Promise.resolve(runningHandler).catch(e => {\n      if (e === neverResolvedError) return;\n      throw e;\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/devMiddleware.ts\nvar buildDevCheckHandler = ({\n  api,\n  context: {\n    apiUid\n  },\n  reducerPath\n}) => {\n  return (action, mwApi) => {\n    if (api.util.resetApiState.match(action)) {\n      mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n    }\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n      if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && mwApi.getState()[reducerPath]?.config?.middlewareRegistered === \"conflict\") {\n        console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\nYou can only have one api per reducer path, this will lead to crashes in various situations!${reducerPath === \"api\" ? `\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!` : \"\"}`);\n      }\n    }\n  };\n};\n\n// src/query/core/buildMiddleware/invalidationByTags.ts\nvar buildInvalidationByTagsHandler = ({\n  reducerPath,\n  context,\n  context: {\n    endpointDefinitions\n  },\n  mutationThunk,\n  queryThunk,\n  api,\n  assertTagType,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const isThunkActionWithTags = isAnyOf(isFulfilled(mutationThunk), isRejectedWithValue(mutationThunk));\n  const isQueryEnd = isAnyOf(isFulfilled(mutationThunk, queryThunk), isRejected(mutationThunk, queryThunk));\n  let pendingTagInvalidations = [];\n  const handler = (action, mwApi) => {\n    if (isThunkActionWithTags(action)) {\n      invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n    } else if (isQueryEnd(action)) {\n      invalidateTags([], mwApi);\n    } else if (api.util.invalidateTags.match(action)) {\n      invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n    }\n  };\n  function hasPendingRequests(state) {\n    const {\n      queries,\n      mutations\n    } = state;\n    for (const cacheRecord of [queries, mutations]) {\n      for (const key in cacheRecord) {\n        if (cacheRecord[key]?.status === \"pending\" /* pending */) return true;\n      }\n    }\n    return false;\n  }\n  function invalidateTags(newTags, mwApi) {\n    const rootState = mwApi.getState();\n    const state = rootState[reducerPath];\n    pendingTagInvalidations.push(...newTags);\n    if (state.config.invalidationBehavior === \"delayed\" && hasPendingRequests(state)) {\n      return;\n    }\n    const tags = pendingTagInvalidations;\n    pendingTagInvalidations = [];\n    if (tags.length === 0) return;\n    const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n    context.batch(() => {\n      const valuesArray = Array.from(toInvalidate.values());\n      for (const {\n        queryCacheKey\n      } of valuesArray) {\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptionSubState = internalState.currentSubscriptions[queryCacheKey] ?? {};\n        if (querySubState) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            mwApi.dispatch(removeQueryResult({\n              queryCacheKey\n            }));\n          } else if (querySubState.status !== \"uninitialized\" /* uninitialized */) {\n            mwApi.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/polling.ts\nvar buildPollingHandler = ({\n  reducerPath,\n  queryThunk,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const currentPolls = {};\n  const handler = (action, mwApi) => {\n    if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n      updatePollingInterval(action.payload, mwApi);\n    }\n    if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n      updatePollingInterval(action.meta.arg, mwApi);\n    }\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n      startNextPoll(action.meta.arg, mwApi);\n    }\n    if (api.util.resetApiState.match(action)) {\n      clearPolls();\n    }\n  };\n  function getCacheEntrySubscriptions(queryCacheKey, api2) {\n    const state = api2.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */) return;\n    return subscriptions;\n  }\n  function startNextPoll({\n    queryCacheKey\n  }, api2) {\n    const state = api2.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */) return;\n    const {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) return;\n    const currentPoll = currentPolls[queryCacheKey];\n    if (currentPoll?.timeout) {\n      clearTimeout(currentPoll.timeout);\n      currentPoll.timeout = void 0;\n    }\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    currentPolls[queryCacheKey] = {\n      nextPollTimestamp,\n      pollingInterval: lowestPollingInterval,\n      timeout: setTimeout(() => {\n        if (state.config.focused || !skipPollingIfUnfocused) {\n          api2.dispatch(refetchQuery(querySubState));\n        }\n        startNextPoll({\n          queryCacheKey\n        }, api2);\n      }, lowestPollingInterval)\n    };\n  }\n  function updatePollingInterval({\n    queryCacheKey\n  }, api2) {\n    const state = api2.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */) {\n      return;\n    }\n    const {\n      lowestPollingInterval\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) {\n      cleanupPollForKey(queryCacheKey);\n      return;\n    }\n    const currentPoll = currentPolls[queryCacheKey];\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n      startNextPoll({\n        queryCacheKey\n      }, api2);\n    }\n  }\n  function cleanupPollForKey(key) {\n    const existingPoll = currentPolls[key];\n    if (existingPoll?.timeout) {\n      clearTimeout(existingPoll.timeout);\n    }\n    delete currentPolls[key];\n  }\n  function clearPolls() {\n    for (const key of Object.keys(currentPolls)) {\n      cleanupPollForKey(key);\n    }\n  }\n  function findLowestPollingInterval(subscribers = {}) {\n    let skipPollingIfUnfocused = false;\n    let lowestPollingInterval = Number.POSITIVE_INFINITY;\n    for (let key in subscribers) {\n      if (!!subscribers[key].pollingInterval) {\n        lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\n        skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;\n      }\n    }\n    return {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    };\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/queryLifecycle.ts\nvar buildQueryLifecycleHandler = ({\n  api,\n  context,\n  queryThunk,\n  mutationThunk\n}) => {\n  const isPendingThunk = isPending(queryThunk, mutationThunk);\n  const isRejectedThunk = isRejected(queryThunk, mutationThunk);\n  const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  const lifecycleMap = {};\n  const handler = (action, mwApi) => {\n    if (isPendingThunk(action)) {\n      const {\n        requestId,\n        arg: {\n          endpointName,\n          originalArgs\n        }\n      } = action.meta;\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const onQueryStarted = endpointDefinition?.onQueryStarted;\n      if (onQueryStarted) {\n        const lifecycle = {};\n        const queryFulfilled = new Promise((resolve, reject) => {\n          lifecycle.resolve = resolve;\n          lifecycle.reject = reject;\n        });\n        queryFulfilled.catch(() => {});\n        lifecycleMap[requestId] = lifecycle;\n        const selector = api.endpoints[endpointName].select(isAnyQueryDefinition(endpointDefinition) ? originalArgs : requestId);\n        const extra = mwApi.dispatch((_, __, extra2) => extra2);\n        const lifecycleApi = {\n          ...mwApi,\n          getCacheEntry: () => selector(mwApi.getState()),\n          requestId,\n          extra,\n          updateCachedData: isAnyQueryDefinition(endpointDefinition) ? updateRecipe => mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n          queryFulfilled\n        };\n        onQueryStarted(originalArgs, lifecycleApi);\n      }\n    } else if (isFullfilledThunk(action)) {\n      const {\n        requestId,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.resolve({\n        data: action.payload,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    } else if (isRejectedThunk(action)) {\n      const {\n        requestId,\n        rejectedWithValue,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.reject({\n        error: action.payload ?? action.error,\n        isUnhandledError: !rejectedWithValue,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    }\n  };\n  return handler;\n};\n\n// src/query/core/buildMiddleware/windowEventHandling.ts\nvar buildWindowEventHandler = ({\n  reducerPath,\n  context,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const handler = (action, mwApi) => {\n    if (onFocus.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnFocus\");\n    }\n    if (onOnline.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnReconnect\");\n    }\n  };\n  function refetchValidQueries(api2, type) {\n    const state = api2.getState()[reducerPath];\n    const queries = state.queries;\n    const subscriptions = internalState.currentSubscriptions;\n    context.batch(() => {\n      for (const queryCacheKey of Object.keys(subscriptions)) {\n        const querySubState = queries[queryCacheKey];\n        const subscriptionSubState = subscriptions[queryCacheKey];\n        if (!subscriptionSubState || !querySubState) continue;\n        const shouldRefetch = Object.values(subscriptionSubState).some(sub => sub[type] === true) || Object.values(subscriptionSubState).every(sub => sub[type] === void 0) && state.config[type];\n        if (shouldRefetch) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            api2.dispatch(removeQueryResult({\n              queryCacheKey\n            }));\n          } else if (querySubState.status !== \"uninitialized\" /* uninitialized */) {\n            api2.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/index.ts\nfunction buildMiddleware(input) {\n  const {\n    reducerPath,\n    queryThunk,\n    api,\n    context\n  } = input;\n  const {\n    apiUid\n  } = context;\n  const actions = {\n    invalidateTags: createAction(`${reducerPath}/invalidateTags`)\n  };\n  const isThisApiSliceAction = action => action.type.startsWith(`${reducerPath}/`);\n  const handlerBuilders = [buildDevCheckHandler, buildCacheCollectionHandler, buildInvalidationByTagsHandler, buildPollingHandler, buildCacheLifecycleHandler, buildQueryLifecycleHandler];\n  const middleware = mwApi => {\n    let initialized2 = false;\n    const internalState = {\n      currentSubscriptions: {}\n    };\n    const builderArgs = {\n      ...input,\n      internalState,\n      refetchQuery,\n      isThisApiSliceAction\n    };\n    const handlers = handlerBuilders.map(build => build(builderArgs));\n    const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n    const windowEventsHandler = buildWindowEventHandler(builderArgs);\n    return next => {\n      return action => {\n        if (!(0, src_exports.isAction)(action)) {\n          return next(action);\n        }\n        if (!initialized2) {\n          initialized2 = true;\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        const mwApiWithNext = {\n          ...mwApi,\n          next\n        };\n        const stateBefore = mwApi.getState();\n        const [actionShouldContinue, internalProbeResult] = batchedActionsHandler(action, mwApiWithNext, stateBefore);\n        let res;\n        if (actionShouldContinue) {\n          res = next(action);\n        } else {\n          res = internalProbeResult;\n        }\n        if (!!mwApi.getState()[reducerPath]) {\n          windowEventsHandler(action, mwApiWithNext, stateBefore);\n          if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n            for (const handler of handlers) {\n              handler(action, mwApiWithNext, stateBefore);\n            }\n          }\n        }\n        return res;\n      };\n    };\n  };\n  return {\n    middleware,\n    actions\n  };\n  function refetchQuery(querySubState) {\n    return input.api.endpoints[querySubState.endpointName].initiate(querySubState.originalArgs, {\n      subscribe: false,\n      forceRefetch: true\n    });\n  }\n}\n\n// src/query/core/module.ts\nvar coreModuleName = /* @__PURE__ */Symbol();\nvar coreModule = ({\n  createSelector: createSelector2 = createSelector\n} = {}) => ({\n  name: coreModuleName,\n  init(api, {\n    baseQuery,\n    tagTypes,\n    reducerPath,\n    serializeQueryArgs,\n    keepUnusedDataFor,\n    refetchOnMountOrArgChange,\n    refetchOnFocus,\n    refetchOnReconnect,\n    invalidationBehavior,\n    onSchemaFailure,\n    catchSchemaFailure,\n    skipSchemaValidation\n  }, context) {\n    enablePatches();\n    assertCast(serializeQueryArgs);\n    const assertTagType = tag => {\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n        if (!tagTypes.includes(tag.type)) {\n          console.error(`Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`);\n        }\n      }\n      return tag;\n    };\n    Object.assign(api, {\n      reducerPath,\n      endpoints: {},\n      internalActions: {\n        onOnline,\n        onOffline,\n        onFocus,\n        onFocusLost\n      },\n      util: {}\n    });\n    const selectors = buildSelectors({\n      serializeQueryArgs,\n      reducerPath,\n      createSelector: createSelector2\n    });\n    const {\n      selectInvalidatedBy,\n      selectCachedArgsForQuery,\n      buildQuerySelector,\n      buildInfiniteQuerySelector,\n      buildMutationSelector\n    } = selectors;\n    safeAssign(api.util, {\n      selectInvalidatedBy,\n      selectCachedArgsForQuery\n    });\n    const {\n      queryThunk,\n      infiniteQueryThunk,\n      mutationThunk,\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      buildMatchThunkActions\n    } = buildThunks({\n      baseQuery,\n      reducerPath,\n      context,\n      api,\n      serializeQueryArgs,\n      assertTagType,\n      selectors,\n      onSchemaFailure,\n      catchSchemaFailure,\n      skipSchemaValidation\n    });\n    const {\n      reducer,\n      actions: sliceActions\n    } = buildSlice({\n      context,\n      queryThunk,\n      infiniteQueryThunk,\n      mutationThunk,\n      serializeQueryArgs,\n      reducerPath,\n      assertTagType,\n      config: {\n        refetchOnFocus,\n        refetchOnReconnect,\n        refetchOnMountOrArgChange,\n        keepUnusedDataFor,\n        reducerPath,\n        invalidationBehavior\n      }\n    });\n    safeAssign(api.util, {\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      resetApiState: sliceActions.resetApiState,\n      upsertQueryEntries: sliceActions.cacheEntriesUpserted\n    });\n    safeAssign(api.internalActions, sliceActions);\n    const {\n      middleware,\n      actions: middlewareActions\n    } = buildMiddleware({\n      reducerPath,\n      context,\n      queryThunk,\n      mutationThunk,\n      infiniteQueryThunk,\n      api,\n      assertTagType,\n      selectors\n    });\n    safeAssign(api.util, middlewareActions);\n    safeAssign(api, {\n      reducer,\n      middleware\n    });\n    const {\n      buildInitiateQuery,\n      buildInitiateInfiniteQuery,\n      buildInitiateMutation,\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueriesThunk,\n      getRunningQueryThunk\n    } = buildInitiate({\n      queryThunk,\n      mutationThunk,\n      infiniteQueryThunk,\n      api,\n      serializeQueryArgs,\n      context\n    });\n    safeAssign(api.util, {\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueryThunk,\n      getRunningQueriesThunk\n    });\n    return {\n      name: coreModuleName,\n      injectEndpoint(endpointName, definition) {\n        const anyApi = api;\n        const endpoint = anyApi.endpoints[endpointName] ??= {};\n        if (isQueryDefinition(definition)) {\n          safeAssign(endpoint, {\n            name: endpointName,\n            select: buildQuerySelector(endpointName, definition),\n            initiate: buildInitiateQuery(endpointName, definition)\n          }, buildMatchThunkActions(queryThunk, endpointName));\n        }\n        if (isMutationDefinition(definition)) {\n          safeAssign(endpoint, {\n            name: endpointName,\n            select: buildMutationSelector(),\n            initiate: buildInitiateMutation(endpointName)\n          }, buildMatchThunkActions(mutationThunk, endpointName));\n        }\n        if (isInfiniteQueryDefinition(definition)) {\n          safeAssign(endpoint, {\n            name: endpointName,\n            select: buildInfiniteQuerySelector(endpointName, definition),\n            initiate: buildInitiateInfiniteQuery(endpointName, definition)\n          }, buildMatchThunkActions(queryThunk, endpointName));\n        }\n      }\n    };\n  }\n});\n\n// src/query/core/index.ts\nvar createApi = /* @__PURE__ */buildCreateApi(coreModule());\nexport { NamedSchemaError, QueryStatus, _NEVER, buildCreateApi, copyWithStructuralSharing, coreModule, coreModuleName, createApi, defaultSerializeQueryArgs, fakeBaseQuery, fetchBaseQuery, retry, setupListeners, skipToken };","map":{"version":3,"names":["QueryStatus","QueryStatus2","getRequestStatusFlags","status","isUninitialized","isLoading","isSuccess","isError","src_exports","__export","ReducerType","SHOULD_AUTOBATCH","TaskAbortError","Tuple","addListener","asyncThunkCreator","autoBatchEnhancer","buildCreateSlice","clearAllListeners","combineSlices","configureStore","createAction","createActionCreatorInvariantMiddleware","createAsyncThunk","createDraftSafeSelector","createDraftSafeSelectorCreator","createDynamicMiddleware","createEntityAdapter","createImmutableStateInvariantMiddleware","createListenerMiddleware","createNextState","produce","createReducer","createSelector","createSelectorCreator","createSelectorCreator2","createSerializableStateInvariantMiddleware","createSlice","current","current3","findNonSerializableValue","formatProdErrorMessage","freeze","isActionCreator","isAllOf","isAnyOf","isAsyncThunkAction","isDraft","isDraft5","isFluxStandardAction","isFSA","isFulfilled","isImmutableDefault","isPending","isPlain","isRejected","isRejectedWithValue","lruMemoize","miniSerializeError","nanoid","original","original2","prepareAutoBatched","removeListener","unwrapResult","weakMapMemoize","weakMapMemoize2","__reExport","redux_star","args","createSelector2","createDraftSafeSelector2","Object","assign","args2","selector","wrappedSelector","value","rest","withTypes","applyMiddleware","createStore","compose","compose2","combineReducers","isPlainObject","isPlainObject2","composeWithDevTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","arguments","length","apply","devToolsEnhancer","__REDUX_DEVTOOLS_EXTENSION__","noop3","thunk","thunkMiddleware","withExtraArgument","isAction","hasMatchFunction","v","match","asSafePromise","promise","fallback","catch","type","prepareAction","actionCreator","prepared","Error","process","env","NODE_ENV","payload","meta","error","toString","action","keys","every","isValidKey","key","indexOf","getMessage","splitType","split","actionName","options","next","isActionCreator2","console","warn","isDraftable","getTimeMeasureUtils","maxDelay","fnName","elapsed","measureTime","fn","started","Date","now","finished","warnIfExceeded","_Tuple","Array","constructor","items","setPrototypeOf","prototype","Symbol","species","concat","arr","prepend","isArray","freezeDraftable","val","getOrInsertComputed","map","compute","has","get","set","isFrozen","trackForMutations","isImmutable","ignorePaths","obj","trackedProperties","trackProperties","detectMutations","path","checkedObjects","Set","tracked","add","children","childPath","ignoredPaths","trackedProperty","sameParentRef","prevObj","sameRef","Number","isNaN","wasMutated","keysToDetect","hasIgnoredPaths","nestedPath","hasMatches","some","ignored","RegExp","test","result","stringify2","stringify","serializer","indent","decycler","JSON","getSerialize2","getSerialize","stack","_","slice","join","thisPos","splice","push","Infinity","call","warnAfter","track","bind","getState","state","tracker","measureUtils","dispatchedAction","isAction2","isSerializable","getEntries","cache2","foundNestedSerializable","keyPath","entries","nestedValue","isNestedFrozen","values","ignoredActions","ignoredActionPaths","ignoreState","ignoreActions","disableCache","WeakSet","storeAPI","foundActionNonSerializableValue","foundStateNonSerializableValue","isBoolean","x","buildGetDefaultMiddleware","getDefaultMiddleware","immutableCheck","serializableCheck","actionCreatorCheck","middlewareArray","extraArgument","immutableOptions","unshift","serializableOptions","actionCreatorOptions","createQueueWithTimer","timeout","notify","setTimeout","store","notifying","shouldNotifyAtEndOfTick","notificationQueued","listeners","queueCallback","queueMicrotask","requestAnimationFrame","queueNotification","notifyListeners","forEach","l","subscribe","listener2","wrappedListener","unsubscribe","delete","dispatch","buildGetDefaultEnhancers","middlewareEnhancer","getDefaultEnhancers","autoBatch","enhancerArray","reducer","middleware","devTools","duplicateMiddlewareCheck","preloadedState","enhancers","rootReducer","finalMiddleware","item","middlewareReferences","middleware2","finalCompose","trace","storeEnhancers","includes","composedEnhancer","createNextState2","isDraft2","isDraftable2","executeReducerBuilderCallback","builderCallback","actionsMap","actionMatchers","defaultCaseReducer","builder","addCase","typeOrActionCreator","addMatcher","matcher","addDefaultCase","isStateFunction","initialState2","mapOrBuilderCallback","finalActionMatchers","finalDefaultCaseReducer","getInitialState","frozenInitialState","caseReducers","filter","reducer2","cr","reduce","previousState","caseReducer","draft","matches","matchers","hasExpectedRequestMetadata","validStatus","hasValidRequestId","requestId","hasValidRequestStatus","requestStatus","isAsyncThunkArray","a","asyncThunks","asyncThunk","pending","rejected","hasFlag","rejectedWithValue","fulfilled","flatMap","urlAlphabet","size","id","i","Math","random","commonProperties","RejectWithValue","_type","FulfillWithMeta","simpleError","property","message","String","externalAbortMessage","createAsyncThunk2","typePrefix","payloadCreator","arg","serializeError","aborted","name","condition","signal","extra","idGenerator","abortController","AbortController","abortHandler","abortReason","abort","reason","addEventListener","once","finalAction","conditionResult","isThenable","abortedPromise","Promise","reject","getPendingMeta","race","resolve","rejectWithValue","fulfillWithValue","then","err","removeEventListener","skipDispatch","dispatchConditionRejection","unwrap","settled","asyncThunkSymbol","for","ReducerType2","getType","actionKey","creators","cAT","createSlice2","reducerPath","initialState","reducers","buildReducerCreators","reducerNames","context","sliceCaseReducersByName","sliceCaseReducersByType","actionCreators","sliceMatchers","contextMethods","exposeAction","name2","exposeCaseReducer","reducerName","reducerDefinition","reducerDetails","createNotation","isAsyncThunkSliceReducerDefinition","handleThunkCaseReducerDefinition","handleNormalReducerDefinition","buildReducer","extraReducers","finalCaseReducers","sM","m","selectSelf","injectedSelectorCache","Map","injectedStateCache","WeakMap","_reducer","makeSelectorProps","reducerPath2","injected","selectSlice","sliceState","getSelectors","selectState","selectorCache","selectors","wrapSelector","actions","injectInto","injectable","pathOpt","config","newReducerPath","inject","wrapper","rootState","unwrapped","_reducerDefinitionType","preparedReducer","prepare","maybeReducerWithPrepare","prepareCallback","isCaseReducerWithPrepareDefinition","noop","getInitialEntityState","ids","entities","createInitialStateFactory","stateAdapter","additionalState","setAll","createSelectorsFactory","selectIds","selectEntities","selectAll","selectId","selectById","selectTotal","selectGlobalizedEntities","createNextState3","isDraft3","isDraftTyped","createSingleArgumentStateOperator","mutator","operator","createStateOperator","operation","isPayloadActionArgument","arg2","runMutator","current2","isDraft4","selectIdValue","entity","ensureEntitiesArray","getCurrent","splitAddedUpdatedEntities","newEntities","existingIdsArray","existingIds","added","addedIds","updated","changes","createUnsortedStateAdapter","addOneMutably","addManyMutably","setOneMutably","setManyMutably","setAllMutably","removeOneMutably","removeManyMutably","didMutate","removeAllMutably","takeNewKey","update","original4","newKey","hasNewKey","updateOneMutably","updateManyMutably","updates","newKeys","updatesPerEntity","didMutateEntities","didMutateIds","e","upsertOneMutably","upsertManyMutably","removeAll","addOne","addMany","setOne","setMany","updateOne","updateMany","upsertOne","upsertMany","removeOne","removeMany","findInsertIndex","sortedItems","comparisonFunction","lowIndex","highIndex","middleIndex","currentItem","res","insert","insertAtIndex","createSortedStateAdapter","comparer","existingKeys","models","model","mergeFunction","appliedUpdates","replacedIds","newId","oldIndex","areArraysEqual","b","addedItems","currentEntities","currentIds","stateEntities","sortedEntities","wasPreviouslyEmpty","sort","newSortedIds","sortComparer","instance","stateFactory","selectorsFactory","isAction3","task","listener","completed","cancelled","taskCancelled","taskCompleted","listenerCancelled","listenerCompleted","code","assertFunction","func","expected","TypeError","noop2","catchRejection","onError","addAbortSignalListener","abortSignal","callback","abortControllerWithReason","defineProperty","enumerable","configurable","writable","validateActive","raceWithSignal","cleanup","notifyRejection","finally","runTask","task2","cleanUp","createPause","output","createDelay","pause","timeoutMs","INTERNAL_NIL_TOKEN","alm","createFork","parentAbortSignal","parentBlockingPromises","linkControllers","controller","taskExecutor","opts","childAbortController","result2","delay","autoJoin","cancel","createTakePattern","startListening","take","predicate","tuplePromise","stopListening","effect","listenerApi","getOriginalState","promises","getListenerEntryPropsFrom","createListenerEntry","entry","findListenerEntry","listenerMap","from","find","matchPredicateOrType","cancelActiveListeners","createClearListenerMiddleware","clear","safelyNotifyError","errorHandler","errorToNotify","errorInfo","errorHandlerError","defaultErrorHandler","middlewareOptions","insertEntry","cancelOptions","cancelActive","notifyListener","api","internalTaskController","autoJoinPromises","Boolean","fork","throwIfCancelled","listenerError","raisedBy","all","clearListenerMiddleware","originalState","currentState","listenerEntries","runListener","predicateError","clearListeners","compose3","createMiddlewareEntry","applied","matchInstance","instanceId","middlewareMap","withMiddleware","middlewares","addMiddleware","addMiddleware2","getFinalMiddleware","appliedMiddleware","isWithMiddleware","combineReducers2","isSliceLike","maybeSliceLike","getReducers","slices","sliceOrMap","ORIGINAL_STATE","isStateProxy","stateProxyMap","createStateProxy","reducerMap","initialStateCache","Proxy","target","prop","receiver","Reflect","cached","reducerResult","emptyObject","noopReducer","fromEntries","getReducer","combinedReducer","withLazyLoadedSlices","reducerToInject","currentReducer","overrideExisting","makeSelector","selectorFn","selector2","isPlainObject4","copyWithStructuralSharing","oldObj","newObj","oldKeys","isSameObject","mergeObj","countObjectKeys","count","_key","flatten","isAbsoluteUrl","url","isDocumentVisible","document","visibilityState","isNotNullish","isOnline","navigator","onLine","withoutTrailingSlash","replace","withoutLeadingSlash","joinUrls","base","delimiter","endsWith","startsWith","getOrInsert","defaultFetchFn","fetch","defaultValidateStatus","response","defaultIsJsonContentType","headers","stripUndefined","copy","k","fetchBaseQuery","baseUrl","prepareHeaders","fetchFn","paramsSerializer","isJsonContentType","jsonContentType","jsonReplacer","defaultTimeout","responseHandler","globalResponseHandler","validateStatus","globalValidateStatus","baseFetchOptions","extraOptions","endpoint","forced","Headers","params","isJsonifiable","body","toJSON","divider","query","URLSearchParams","request","Request","requestClone","timedOut","timeoutId","clearTimeout","responseClone","clone","resultData","responseText","handleResponseError","handleResponse","r","text","originalStatus","data","parse","HandledError","defaultBackoff","attempt","maxRetries","attempts","min","fail","throwImmediately","EMPTY_OPTIONS","retryWithBackoff","baseQuery","defaultOptions","possibleMaxRetries","defaultRetryCondition","__","backoff","retryCondition","retry2","baseQueryApi","retry","onFocus","onFocusLost","onOnline","onOffline","initialized","setupListeners","customHandler","defaultHandler","handleFocus","handleFocusLost","handleOnline","handleOffline","handleVisibilityChange","isQueryDefinition","isMutationDefinition","isInfiniteQueryDefinition","isAnyQueryDefinition","calculateProvidedBy","description","queryArg","assertTagTypes","isFunction","expandTagDescription","t","isDraftable3","produceWithPatches","forceQueryFnSymbol","isUpsertQuery","buildInitiate","serializeQueryArgs","queryThunk","infiniteQueryThunk","mutationThunk","runningQueries","runningMutations","unsubscribeQueryResult","removeMutationResult","updateSubscriptionOptions","internalActions","buildInitiateQuery","buildInitiateInfiniteQuery","buildInitiateMutation","getRunningQueryThunk","getRunningMutationThunk","getRunningQueriesThunk","getRunningMutationsThunk","endpointName","queryArgs","endpointDefinition","endpointDefinitions","queryCacheKey","_endpointName","fixedCacheKeyOrRequestId","middlewareWarning","triggered","returnedValue","internal_getRTKQSubscriptions","buildInitiateAnyQuery","queryAction","forceRefetch","subscriptionOptions","forceQueryFn","commonThunkArgs","originalArgs","direction","initialPageParam","endpoints","select","thunkResult","stateAfter","skippedSynchronously","runningQuery","selectFromState","statePromise","refetch","running","infiniteQueryAction","fixedCacheKey","returnValuePromise","reset","ret","SchemaError","NamedSchemaError","issues","schemaName","_bqMeta","parseWithSchema","schema","bqMeta","validate","defaultTransformResponse","baseQueryReturnValue","addShouldAutoBatch","buildThunks","assertTagType","onSchemaFailure","catchSchemaFailure","globalCatchSchemaFailure","skipSchemaValidation","globalSkipSchemaValidation","patchQueryData","patches","updateProvided","queryResultPatched","newValue","providedTags","providesTags","updateProvidedBy","addToStart","max","newItems","addToEnd","updateQueryData","updateRecipe","inversePatches","undo","util","op","upsertQueryData","initiate","getTransformCallbackForEndpoint","transformFieldName","executeEndpoint","metaSchema","transformResponse","isForcedQuery","finalQueryReturnValue","fetchPage","param","maxPages","previous","pages","finalQueryArg","pageParam","pageResponse","executeRequest","addTo","pageParams","argSchema","rawResponseSchema","responseSchema","queryFn","what","transformedResponse","infiniteQueryOptions","blankData","cachedData","selectQueryEntry","isForcedQueryNeedingRefetch","existingData","pageParamFn","getPreviousPageParam","getNextPageParam","cachedPageParams","firstPageParam","totalPages","fulfilledTimeStamp","baseQueryMeta","caughtError","transformErrorResponse","rawErrorResponseSchema","errorResponseSchema","transformedErrorResponse","info","requestState","baseFetchOnMountOrArgChange","selectConfig","refetchOnMountOrArgChange","fulfilledVal","refetchVal","createQueryThunk","generatedQueryThunk","startedTimeStamp","queryThunkArg","currentArg","previousArg","endpointState","hasTheForce","hasMaxAge","prefetch","force","maxAge","ifOlderThan","force2","options2","isPrefetch","latestStateValue","lastFulfilledTs","shouldRetrigger","matchesEndpoint","buildMatchThunkActions","matchPending","matchFulfilled","matchRejected","lastIndex","calculateProvidedByThunk","isDraft6","applyPatches","original3","updateQuerySubstateIfExists","substate","getMutationCacheKey","updateMutationSubstateIfExists","buildSlice","definitions","apiUid","extractRehydrationInfo","hasRehydrationInfo","resetApiState","writePendingCacheEntry","upserting","writeFulfilledCacheEntry","merge","newData","draftSubstateData","structuralSharing","querySlice","removeQueryResult","cacheEntriesUpserted","queryDescription","timestamp","queryDescriptions","queries","mutationSlice","cacheKey","mutations","initialInvalidationState","tags","invalidationSlice","removeCacheKeyFromTags","subscribedQueries","alreadySubscribed","provided","incomingTags","cacheKeys","writeProvidedTagsForQueries","mockActions","existingTags","tag","tagType","tagId","tagSubscriptions","qc","actions2","providedByEntries","subscriptionSlice","d","internalSubscriptionsSlice","subscriptionsUpdated","configSlice","online","focused","middlewareRegistered","subscriptions","skipToken","initialSubState","defaultQuerySubState","defaultMutationSubState","buildSelectors","selectSkippedQuery","selectSkippedMutation","buildQuerySelector","buildInfiniteQuerySelector","buildMutationSelector","selectInvalidatedBy","selectCachedArgsForQuery","selectApiState","selectQueries","selectMutations","withRequestFlags","buildAnyQuerySelector","combiner","serializedArgs","selectQuerySubstate","withInfiniteQueryResultFlags","stateWithRequestFlags","isForward","isBackward","hasNextPage","getHasNextPage","hasPreviousPage","getHasPreviousPage","isFetchingNextPage","isFetchingPreviousPage","isFetchNextPageError","isFetchPreviousPageError","mutationId","selectMutationSubstate","finalSelectMutationSubstate","apiState","toInvalidate","invalidateSubscriptions","invalidate","querySubState","queryName","cache","defaultSerializeQueryArgs","serialized","stringified","$bigint","acc","key2","weakMapMemoize3","buildCreateApi","modules","baseCreateApi","optionsWithDefaults","keepUnusedDataFor","refetchOnFocus","refetchOnReconnect","invalidationBehavior","queryArgsApi","finalSerializeQueryArgs","endpointSQA","queryArgsApi2","initialResult","tagTypes","batch","injectEndpoints","enhanceEndpoints","addTagTypes","eT","partialDefinition","initializedModules","init","evaluatedEndpoints","mutation","infiniteQuery","definition","getPreviousPageParam2","injectEndpoint","_NEVER","fakeBaseQuery","enablePatches","assertCast","safeAssign","produceWithPatches2","buildBatchedActionsHandler","internalState","subscriptionsPrefix","previousSubscriptions","updateSyncTimer","actuallyMutateSubscriptions","mutableState","mutated","getSubscriptions","currentSubscriptions","getSubscriptionCount","subscriptionsForQueryArg","isRequestSubscribed","subscriptionSelectors","mwApi","actionShouldContinue","newSubscriptions","isSubscriptionSliceAction","isAdditionalSubscriptionAction","isObjectEmpty","THIRTY_TWO_BIT_MAX_TIMER_SECONDS","buildCacheCollectionHandler","canTriggerUnsubscribe","anySubscriptionsRemainingForKey","currentRemovalTimeouts","handler","internalState2","queryCacheKeys","handleUnsubscribeMany","api2","handleUnsubscribe","finalKeepUnusedDataFor","currentTimeout","neverResolvedError","buildCacheLifecycleHandler","isQueryThunk","isMutationThunk","isFulfilledThunk","lifecycleMap","resolveLifecycleEntry","lifecycle","valueResolved","removeLifecycleEntry","cacheEntryRemoved","stateBefore","getCacheKey","checkForNewCacheKey","cacheKey2","oldEntry","newEntry","handleNewKey","onCacheEntryAdded","cacheDataLoaded","extra2","lifecycleApi","getCacheEntry","updateCachedData","runningHandler","buildDevCheckHandler","buildInvalidationByTagsHandler","refetchQuery","isThunkActionWithTags","isQueryEnd","pendingTagInvalidations","invalidateTags","hasPendingRequests","cacheRecord","newTags","valuesArray","subscriptionSubState","buildPollingHandler","currentPolls","updatePollingInterval","startNextPoll","clearPolls","getCacheEntrySubscriptions","lowestPollingInterval","skipPollingIfUnfocused","findLowestPollingInterval","isFinite","currentPoll","nextPollTimestamp","pollingInterval","cleanupPollForKey","existingPoll","subscribers","POSITIVE_INFINITY","buildQueryLifecycleHandler","isPendingThunk","isRejectedThunk","isFullfilledThunk","onQueryStarted","queryFulfilled","isUnhandledError","buildWindowEventHandler","refetchValidQueries","shouldRefetch","sub","buildMiddleware","input","isThisApiSliceAction","handlerBuilders","initialized2","builderArgs","handlers","build","batchedActionsHandler","windowEventsHandler","mwApiWithNext","internalProbeResult","coreModuleName","coreModule","sliceActions","upsertQueryEntries","middlewareActions","anyApi","createApi"],"sources":["C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\apiState.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\index.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\createDraftSafeSelector.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\configureStore.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\devtoolsExtension.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\getDefaultMiddleware.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\createAction.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\tsHelpers.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\actionCreatorInvariantMiddleware.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\utils.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\immutableStateInvariantMiddleware.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\serializableStateInvariantMiddleware.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\autoBatchEnhancer.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\getDefaultEnhancers.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\createReducer.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\mapBuilders.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\matchers.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\nanoid.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\createAsyncThunk.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\createSlice.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\entities\\entity_state.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\entities\\state_selectors.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\entities\\state_adapter.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\entities\\utils.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\entities\\unsorted_state_adapter.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\entities\\sorted_state_adapter.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\entities\\create_adapter.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\index.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\exceptions.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\utils.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\listenerMiddleware\\task.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\dynamicMiddleware\\index.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\combineSlices.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\formatProdErrorMessage.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\copyWithStructuralSharing.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\countObjectKeys.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\flatten.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isAbsoluteUrl.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isDocumentVisible.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isNotNullish.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isOnline.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\joinUrls.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\getOrInsert.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\fetchBaseQuery.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\HandledError.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\retry.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\setupListeners.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\endpointDefinitions.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildThunks.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildInitiate.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\standardSchema.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildSlice.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildSelectors.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\defaultSerializeQueryArgs.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\createApi.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\fakeBaseQuery.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\module.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\tsHelpers.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\batchActions.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\cacheCollection.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\cacheLifecycle.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\devMiddleware.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\invalidationByTags.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\polling.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\queryLifecycle.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\windowEventHandling.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\index.ts","C:\\Users\\binig\\Desktop\\Campus-Cartel\\campus-connect\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\index.ts"],"sourcesContent":["import type { SerializedError } from '@reduxjs/toolkit';\nimport type { BaseQueryError } from '../baseQueryTypes';\nimport type { BaseEndpointDefinition, EndpointDefinitions, FullTagDescription, InfiniteQueryDefinition, MutationDefinition, PageParamFrom, QueryArgFromAnyQuery, QueryDefinition, ResultTypeFrom } from '../endpointDefinitions';\nimport type { Id, WithRequiredProp } from '../tsHelpers';\nexport type QueryCacheKey = string & {\n  _type: 'queryCacheKey';\n};\nexport type QuerySubstateIdentifier = {\n  queryCacheKey: QueryCacheKey;\n};\nexport type MutationSubstateIdentifier = {\n  requestId: string;\n  fixedCacheKey?: string;\n} | {\n  requestId?: string;\n  fixedCacheKey: string;\n};\nexport type RefetchConfigOptions = {\n  refetchOnMountOrArgChange: boolean | number;\n  refetchOnReconnect: boolean;\n  refetchOnFocus: boolean;\n};\nexport type InfiniteQueryConfigOptions<DataType, PageParam, QueryArg> = {\n  /**\n   * The initial page parameter to use for the first page fetch.\n   */\n  initialPageParam: PageParam;\n  /**\n   * This function is required to automatically get the next cursor for infinite queries.\n   * The result will also be used to determine the value of `hasNextPage`.\n   */\n  getNextPageParam: (lastPage: DataType, allPages: Array<DataType>, lastPageParam: PageParam, allPageParams: Array<PageParam>, queryArg: QueryArg) => PageParam | undefined | null;\n  /**\n   * This function can be set to automatically get the previous cursor for infinite queries.\n   * The result will also be used to determine the value of `hasPreviousPage`.\n   */\n  getPreviousPageParam?: (firstPage: DataType, allPages: Array<DataType>, firstPageParam: PageParam, allPageParams: Array<PageParam>, queryArg: QueryArg) => PageParam | undefined | null;\n  /**\n   * If specified, only keep this many pages in cache at once.\n   * If additional pages are fetched, older pages in the other\n   * direction will be dropped from the cache.\n   */\n  maxPages?: number;\n};\nexport type InfiniteData<DataType, PageParam> = {\n  pages: Array<DataType>;\n  pageParams: Array<PageParam>;\n};\n\n/**\n * Strings describing the query state at any given time.\n */\nexport enum QueryStatus {\n  uninitialized = 'uninitialized',\n  pending = 'pending',\n  fulfilled = 'fulfilled',\n  rejected = 'rejected',\n}\nexport type RequestStatusFlags = {\n  status: QueryStatus.uninitialized;\n  isUninitialized: true;\n  isLoading: false;\n  isSuccess: false;\n  isError: false;\n} | {\n  status: QueryStatus.pending;\n  isUninitialized: false;\n  isLoading: true;\n  isSuccess: false;\n  isError: false;\n} | {\n  status: QueryStatus.fulfilled;\n  isUninitialized: false;\n  isLoading: false;\n  isSuccess: true;\n  isError: false;\n} | {\n  status: QueryStatus.rejected;\n  isUninitialized: false;\n  isLoading: false;\n  isSuccess: false;\n  isError: true;\n};\nexport function getRequestStatusFlags(status: QueryStatus): RequestStatusFlags {\n  return {\n    status,\n    isUninitialized: status === QueryStatus.uninitialized,\n    isLoading: status === QueryStatus.pending,\n    isSuccess: status === QueryStatus.fulfilled,\n    isError: status === QueryStatus.rejected\n  } as any;\n}\n\n/**\n * @public\n */\nexport type SubscriptionOptions = {\n  /**\n   * How frequently to automatically re-fetch data (in milliseconds). Defaults to `0` (off).\n   */\n  pollingInterval?: number;\n  /**\n   *  Defaults to 'false'. This setting allows you to control whether RTK Query will continue polling if the window is not focused.\n   *\n   *  If pollingInterval is not set or set to 0, this **will not be evaluated** until pollingInterval is greater than 0.\n   *\n   *  Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  skipPollingIfUnfocused?: boolean;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnReconnect?: boolean;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnFocus?: boolean;\n};\nexport type Subscribers = {\n  [requestId: string]: SubscriptionOptions;\n};\nexport type QueryKeys<Definitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<any, any, any, any> ? K : never }[keyof Definitions];\nexport type InfiniteQueryKeys<Definitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends InfiniteQueryDefinition<any, any, any, any, any> ? K : never }[keyof Definitions];\nexport type MutationKeys<Definitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends MutationDefinition<any, any, any, any> ? K : never }[keyof Definitions];\ntype BaseQuerySubState<D extends BaseEndpointDefinition<any, any, any, any>, DataType = ResultTypeFrom<D>> = {\n  /**\n   * The argument originally passed into the hook or `initiate` action call\n   */\n  originalArgs: QueryArgFromAnyQuery<D>;\n  /**\n   * A unique ID associated with the request\n   */\n  requestId: string;\n  /**\n   * The received data from the query\n   */\n  data?: DataType;\n  /**\n   * The received error if applicable\n   */\n  error?: SerializedError | (D extends QueryDefinition<any, infer BaseQuery, any, any> ? BaseQueryError<BaseQuery> : never);\n  /**\n   * The name of the endpoint associated with the query\n   */\n  endpointName: string;\n  /**\n   * Time that the latest query started\n   */\n  startedTimeStamp: number;\n  /**\n   * Time that the latest query was fulfilled\n   */\n  fulfilledTimeStamp?: number;\n};\nexport type QuerySubState<D extends BaseEndpointDefinition<any, any, any, any>, DataType = ResultTypeFrom<D>> = Id<({\n  status: QueryStatus.fulfilled;\n} & WithRequiredProp<BaseQuerySubState<D, DataType>, 'data' | 'fulfilledTimeStamp'> & {\n  error: undefined;\n}) | ({\n  status: QueryStatus.pending;\n} & BaseQuerySubState<D, DataType>) | ({\n  status: QueryStatus.rejected;\n} & WithRequiredProp<BaseQuerySubState<D, DataType>, 'error'>) | {\n  status: QueryStatus.uninitialized;\n  originalArgs?: undefined;\n  data?: undefined;\n  error?: undefined;\n  requestId?: undefined;\n  endpointName?: string;\n  startedTimeStamp?: undefined;\n  fulfilledTimeStamp?: undefined;\n}>;\nexport type InfiniteQueryDirection = 'forward' | 'backward';\nexport type InfiniteQuerySubState<D extends BaseEndpointDefinition<any, any, any, any>> = D extends InfiniteQueryDefinition<any, any, any, any, any> ? QuerySubState<D, InfiniteData<ResultTypeFrom<D>, PageParamFrom<D>>> & {\n  direction?: InfiniteQueryDirection;\n} : never;\ntype BaseMutationSubState<D extends BaseEndpointDefinition<any, any, any, any>> = {\n  requestId: string;\n  data?: ResultTypeFrom<D>;\n  error?: SerializedError | (D extends MutationDefinition<any, infer BaseQuery, any, any> ? BaseQueryError<BaseQuery> : never);\n  endpointName: string;\n  startedTimeStamp: number;\n  fulfilledTimeStamp?: number;\n};\nexport type MutationSubState<D extends BaseEndpointDefinition<any, any, any, any>> = (({\n  status: QueryStatus.fulfilled;\n} & WithRequiredProp<BaseMutationSubState<D>, 'data' | 'fulfilledTimeStamp'>) & {\n  error: undefined;\n}) | (({\n  status: QueryStatus.pending;\n} & BaseMutationSubState<D>) & {\n  data?: undefined;\n}) | ({\n  status: QueryStatus.rejected;\n} & WithRequiredProp<BaseMutationSubState<D>, 'error'>) | {\n  requestId?: undefined;\n  status: QueryStatus.uninitialized;\n  data?: undefined;\n  error?: undefined;\n  endpointName?: string;\n  startedTimeStamp?: undefined;\n  fulfilledTimeStamp?: undefined;\n};\nexport type CombinedState<D extends EndpointDefinitions, E extends string, ReducerPath extends string> = {\n  queries: QueryState<D>;\n  mutations: MutationState<D>;\n  provided: InvalidationState<E>;\n  subscriptions: SubscriptionState;\n  config: ConfigState<ReducerPath>;\n};\nexport type InvalidationState<TagTypes extends string> = {\n  tags: { [_ in TagTypes]: {\n    [id: string]: Array<QueryCacheKey>;\n    [id: number]: Array<QueryCacheKey>;\n  } };\n  keys: Record<QueryCacheKey, Array<FullTagDescription<any>>>;\n};\nexport type QueryState<D extends EndpointDefinitions> = {\n  [queryCacheKey: string]: QuerySubState<D[string]> | InfiniteQuerySubState<D[string]> | undefined;\n};\nexport type SubscriptionState = {\n  [queryCacheKey: string]: Subscribers | undefined;\n};\nexport type ConfigState<ReducerPath> = RefetchConfigOptions & {\n  reducerPath: ReducerPath;\n  online: boolean;\n  focused: boolean;\n  middlewareRegistered: boolean | 'conflict';\n} & ModifiableConfigState;\nexport type ModifiableConfigState = {\n  keepUnusedDataFor: number;\n  invalidationBehavior: 'delayed' | 'immediately';\n} & RefetchConfigOptions;\nexport type MutationState<D extends EndpointDefinitions> = {\n  [requestId: string]: MutationSubState<D[string]> | undefined;\n};\nexport type RootState<Definitions extends EndpointDefinitions, TagTypes extends string, ReducerPath extends string> = { [P in ReducerPath]: CombinedState<Definitions, TagTypes, P> };","// This must remain here so that the `mangleErrors.cjs` build script\n// does not have to import this into each source file it rewrites.\nimport { formatProdErrorMessage } from './formatProdErrorMessage';\nexport * from 'redux';\nexport { produce as createNextState, current, freeze, original, isDraft } from 'immer';\nexport type { Draft } from 'immer';\nexport { createSelector, createSelectorCreator, lruMemoize, weakMapMemoize } from 'reselect';\nexport type { Selector, OutputSelector } from 'reselect';\nexport { createDraftSafeSelector, createDraftSafeSelectorCreator } from './createDraftSafeSelector';\nexport type { ThunkAction, ThunkDispatch, ThunkMiddleware } from 'redux-thunk';\nexport {\n// js\nconfigureStore } from './configureStore';\nexport type {\n// types\nConfigureStoreOptions, EnhancedStore } from './configureStore';\nexport type { DevToolsEnhancerOptions } from './devtoolsExtension';\nexport {\n// js\ncreateAction, isActionCreator, isFSA as isFluxStandardAction } from './createAction';\nexport type {\n// types\nPayloadAction, PayloadActionCreator, ActionCreatorWithNonInferrablePayload, ActionCreatorWithOptionalPayload, ActionCreatorWithPayload, ActionCreatorWithoutPayload, ActionCreatorWithPreparedPayload, PrepareAction } from './createAction';\nexport {\n// js\ncreateReducer } from './createReducer';\nexport type {\n// types\nActions, CaseReducer, CaseReducers } from './createReducer';\nexport {\n// js\ncreateSlice, buildCreateSlice, asyncThunkCreator, ReducerType } from './createSlice';\nexport type {\n// types\nCreateSliceOptions, Slice, CaseReducerActions, SliceCaseReducers, ValidateSliceCaseReducers, CaseReducerWithPrepare, ReducerCreators, SliceSelectors } from './createSlice';\nexport type { ActionCreatorInvariantMiddlewareOptions } from './actionCreatorInvariantMiddleware';\nexport { createActionCreatorInvariantMiddleware } from './actionCreatorInvariantMiddleware';\nexport {\n// js\ncreateImmutableStateInvariantMiddleware, isImmutableDefault } from './immutableStateInvariantMiddleware';\nexport type {\n// types\nImmutableStateInvariantMiddlewareOptions } from './immutableStateInvariantMiddleware';\nexport {\n// js\ncreateSerializableStateInvariantMiddleware, findNonSerializableValue, isPlain } from './serializableStateInvariantMiddleware';\nexport type {\n// types\nSerializableStateInvariantMiddlewareOptions } from './serializableStateInvariantMiddleware';\nexport type {\n// types\nActionReducerMapBuilder } from './mapBuilders';\nexport { Tuple } from './utils';\nexport { createEntityAdapter } from './entities/create_adapter';\nexport type { EntityState, EntityAdapter, EntitySelectors, EntityStateAdapter, EntityId, Update, IdSelector, Comparer } from './entities/models';\nexport { createAsyncThunk, unwrapResult, miniSerializeError } from './createAsyncThunk';\nexport type { AsyncThunk, AsyncThunkOptions, AsyncThunkAction, AsyncThunkPayloadCreatorReturnValue, AsyncThunkPayloadCreator, GetState, GetThunkAPI, SerializedError, CreateAsyncThunkFunction } from './createAsyncThunk';\nexport {\n// js\nisAllOf, isAnyOf, isPending, isRejected, isFulfilled, isAsyncThunkAction, isRejectedWithValue } from './matchers';\nexport type {\n// types\nActionMatchingAllOf, ActionMatchingAnyOf } from './matchers';\nexport { nanoid } from './nanoid';\nexport type { ListenerEffect, ListenerMiddleware, ListenerEffectAPI, ListenerMiddlewareInstance, CreateListenerMiddlewareOptions, ListenerErrorHandler, TypedStartListening, TypedAddListener, TypedStopListening, TypedRemoveListener, UnsubscribeListener, UnsubscribeListenerOptions, ForkedTaskExecutor, ForkedTask, ForkedTaskAPI, AsyncTaskExecutor, SyncTaskExecutor, TaskCancelled, TaskRejected, TaskResolved, TaskResult } from './listenerMiddleware/index';\nexport type { AnyListenerPredicate } from './listenerMiddleware/types';\nexport { createListenerMiddleware, addListener, removeListener, clearAllListeners, TaskAbortError } from './listenerMiddleware/index';\nexport type { AddMiddleware, DynamicDispatch, DynamicMiddlewareInstance, GetDispatchType as GetDispatch, MiddlewareApiConfig } from './dynamicMiddleware/types';\nexport { createDynamicMiddleware } from './dynamicMiddleware/index';\nexport { SHOULD_AUTOBATCH, prepareAutoBatched, autoBatchEnhancer } from './autoBatchEnhancer';\nexport type { AutoBatchOptions } from './autoBatchEnhancer';\nexport { combineSlices } from './combineSlices';\nexport type { CombinedSliceReducer, WithSlice } from './combineSlices';\nexport type { ExtractDispatchExtensions as TSHelpersExtractDispatchExtensions, SafePromise } from './tsHelpers';\nexport { formatProdErrorMessage } from './formatProdErrorMessage';","import { current, isDraft } from 'immer';\nimport { createSelectorCreator, weakMapMemoize } from 'reselect';\nexport const createDraftSafeSelectorCreator: typeof createSelectorCreator = (...args: unknown[]) => {\n  const createSelector = (createSelectorCreator as any)(...args);\n  const createDraftSafeSelector = Object.assign((...args: unknown[]) => {\n    const selector = createSelector(...args);\n    const wrappedSelector = (value: unknown, ...rest: unknown[]) => selector(isDraft(value) ? current(value) : value, ...rest);\n    Object.assign(wrappedSelector, selector);\n    return wrappedSelector as any;\n  }, {\n    withTypes: () => createDraftSafeSelector\n  });\n  return createDraftSafeSelector;\n};\n\n/**\n * \"Draft-Safe\" version of `reselect`'s `createSelector`:\n * If an `immer`-drafted object is passed into the resulting selector's first argument,\n * the selector will act on the current draft value, instead of returning a cached value\n * that might be possibly outdated if the draft has been modified since.\n * @public\n */\nexport const createDraftSafeSelector = /* @__PURE__ */\ncreateDraftSafeSelectorCreator(weakMapMemoize);","import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3, formatProdErrorMessage as _formatProdErrorMessage4, formatProdErrorMessage as _formatProdErrorMessage5, formatProdErrorMessage as _formatProdErrorMessage6, formatProdErrorMessage as _formatProdErrorMessage7, formatProdErrorMessage as _formatProdErrorMessage8 } from \"@reduxjs/toolkit\";\nimport type { Reducer, ReducersMapObject, Middleware, Action, StoreEnhancer, Store, UnknownAction } from 'redux';\nimport { applyMiddleware, createStore, compose, combineReducers, isPlainObject } from 'redux';\nimport type { DevToolsEnhancerOptions as DevToolsOptions } from './devtoolsExtension';\nimport { composeWithDevTools } from './devtoolsExtension';\nimport type { ThunkMiddlewareFor, GetDefaultMiddleware } from './getDefaultMiddleware';\nimport { buildGetDefaultMiddleware } from './getDefaultMiddleware';\nimport type { ExtractDispatchExtensions, ExtractStoreExtensions, ExtractStateExtensions, UnknownIfNonSpecific } from './tsHelpers';\nimport type { Tuple } from './utils';\nimport type { GetDefaultEnhancers } from './getDefaultEnhancers';\nimport { buildGetDefaultEnhancers } from './getDefaultEnhancers';\n\n/**\n * Options for `configureStore()`.\n *\n * @public\n */\nexport interface ConfigureStoreOptions<S = any, A extends Action = UnknownAction, M extends Tuple<Middlewares<S>> = Tuple<Middlewares<S>>, E extends Tuple<Enhancers> = Tuple<Enhancers>, P = S> {\n  /**\n   * A single reducer function that will be used as the root reducer, or an\n   * object of slice reducers that will be passed to `combineReducers()`.\n   */\n  reducer: Reducer<S, A, P> | ReducersMapObject<S, A, P>;\n\n  /**\n   * An array of Redux middleware to install, or a callback receiving `getDefaultMiddleware` and returning a Tuple of middleware.\n   * If not supplied, defaults to the set of middleware returned by `getDefaultMiddleware()`.\n   *\n   * @example `middleware: (gDM) => gDM().concat(logger, apiMiddleware, yourCustomMiddleware)`\n   * @see https://redux-toolkit.js.org/api/getDefaultMiddleware#intended-usage\n   */\n  middleware?: (getDefaultMiddleware: GetDefaultMiddleware<S>) => M;\n\n  /**\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\n   *\n   * Additional configuration can be done by passing Redux DevTools options\n   */\n  devTools?: boolean | DevToolsOptions;\n\n  /**\n   * Whether to check for duplicate middleware instances. Defaults to `true`.\n   */\n  duplicateMiddlewareCheck?: boolean;\n\n  /**\n   * The initial state, same as Redux's createStore.\n   * You may optionally specify it to hydrate the state\n   * from the server in universal apps, or to restore a previously serialized\n   * user session. If you use `combineReducers()` to produce the root reducer\n   * function (either directly or indirectly by passing an object as `reducer`),\n   * this must be an object with the same shape as the reducer map keys.\n   */\n  // we infer here, and instead complain if the reducer doesn't match\n  preloadedState?: P;\n\n  /**\n   * The store enhancers to apply. See Redux's `createStore()`.\n   * All enhancers will be included before the DevTools Extension enhancer.\n   * If you need to customize the order of enhancers, supply a callback\n   * function that will receive a `getDefaultEnhancers` function that returns a Tuple,\n   * and should return a Tuple of enhancers (such as `getDefaultEnhancers().concat(offline)`).\n   * If you only need to add middleware, you can use the `middleware` parameter instead.\n   */\n  enhancers?: (getDefaultEnhancers: GetDefaultEnhancers<M>) => E;\n}\nexport type Middlewares<S> = ReadonlyArray<Middleware<{}, S>>;\ntype Enhancers = ReadonlyArray<StoreEnhancer>;\n\n/**\n * A Redux store returned by `configureStore()`. Supports dispatching\n * side-effectful _thunks_ in addition to plain actions.\n *\n * @public\n */\nexport type EnhancedStore<S = any, A extends Action = UnknownAction, E extends Enhancers = Enhancers> = ExtractStoreExtensions<E> & Store<S, A, UnknownIfNonSpecific<ExtractStateExtensions<E>>>;\n\n/**\n * A friendly abstraction over the standard Redux `createStore()` function.\n *\n * @param options The store configuration.\n * @returns A configured Redux store.\n *\n * @public\n */\nexport function configureStore<S = any, A extends Action = UnknownAction, M extends Tuple<Middlewares<S>> = Tuple<[ThunkMiddlewareFor<S>]>, E extends Tuple<Enhancers> = Tuple<[StoreEnhancer<{\n  dispatch: ExtractDispatchExtensions<M>;\n}>, StoreEnhancer]>, P = S>(options: ConfigureStoreOptions<S, A, M, E, P>): EnhancedStore<S, A, E> {\n  const getDefaultMiddleware = buildGetDefaultMiddleware<S>();\n  const {\n    reducer = undefined,\n    middleware,\n    devTools = true,\n    duplicateMiddlewareCheck = true,\n    preloadedState = undefined,\n    enhancers = undefined\n  } = options || {};\n  let rootReducer: Reducer<S, A, P>;\n  if (typeof reducer === 'function') {\n    rootReducer = reducer;\n  } else if (isPlainObject(reducer)) {\n    rootReducer = combineReducers(reducer) as unknown as Reducer<S, A, P>;\n  } else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(1) : '`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\n  }\n  if (process.env.NODE_ENV !== 'production' && middleware && typeof middleware !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(2) : '`middleware` field must be a callback');\n  }\n  let finalMiddleware: Tuple<Middlewares<S>>;\n  if (typeof middleware === 'function') {\n    finalMiddleware = middleware(getDefaultMiddleware);\n    if (process.env.NODE_ENV !== 'production' && !Array.isArray(finalMiddleware)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(3) : 'when using a middleware builder function, an array of middleware must be returned');\n    }\n  } else {\n    finalMiddleware = getDefaultMiddleware();\n  }\n  if (process.env.NODE_ENV !== 'production' && finalMiddleware.some((item: any) => typeof item !== 'function')) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(4) : 'each middleware provided to configureStore must be a function');\n  }\n  if (process.env.NODE_ENV !== 'production' && duplicateMiddlewareCheck) {\n    let middlewareReferences = new Set<Middleware<any, S>>();\n    finalMiddleware.forEach(middleware => {\n      if (middlewareReferences.has(middleware)) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(42) : 'Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.');\n      }\n      middlewareReferences.add(middleware);\n    });\n  }\n  let finalCompose = compose;\n  if (devTools) {\n    finalCompose = composeWithDevTools({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: process.env.NODE_ENV !== 'production',\n      ...(typeof devTools === 'object' && devTools)\n    });\n  }\n  const middlewareEnhancer = applyMiddleware(...finalMiddleware);\n  const getDefaultEnhancers = buildGetDefaultEnhancers<M>(middlewareEnhancer);\n  if (process.env.NODE_ENV !== 'production' && enhancers && typeof enhancers !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(5) : '`enhancers` field must be a callback');\n  }\n  let storeEnhancers = typeof enhancers === 'function' ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();\n  if (process.env.NODE_ENV !== 'production' && !Array.isArray(storeEnhancers)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage7(6) : '`enhancers` callback must return an array');\n  }\n  if (process.env.NODE_ENV !== 'production' && storeEnhancers.some((item: any) => typeof item !== 'function')) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage8(7) : 'each enhancer provided to configureStore must be a function');\n  }\n  if (process.env.NODE_ENV !== 'production' && finalMiddleware.length && !storeEnhancers.includes(middlewareEnhancer)) {\n    console.error('middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`');\n  }\n  const composedEnhancer: StoreEnhancer<any> = finalCompose(...storeEnhancers);\n  return createStore(rootReducer, preloadedState as P, composedEnhancer);\n}","import type { Action, ActionCreator, StoreEnhancer } from 'redux';\nimport { compose } from 'redux';\n\n/**\n * @public\n */\nexport interface DevToolsEnhancerOptions {\n  /**\n   * the instance name to be showed on the monitor page. Default value is `document.title`.\n   * If not specified and there's no document title, it will consist of `tabId` and `instanceId`.\n   */\n  name?: string;\n  /**\n   * action creators functions to be available in the Dispatcher.\n   */\n  actionCreators?: ActionCreator<any>[] | {\n    [key: string]: ActionCreator<any>;\n  };\n  /**\n   * if more than one action is dispatched in the indicated interval, all new actions will be collected and sent at once.\n   * It is the joint between performance and speed. When set to `0`, all actions will be sent instantly.\n   * Set it to a higher value when experiencing perf issues (also `maxAge` to a lower value).\n   *\n   * @default 500 ms.\n   */\n  latency?: number;\n  /**\n   * (> 1) - maximum allowed actions to be stored in the history tree. The oldest actions are removed once maxAge is reached. It's critical for performance.\n   *\n   * @default 50\n   */\n  maxAge?: number;\n  /**\n   * Customizes how actions and state are serialized and deserialized. Can be a boolean or object. If given a boolean, the behavior is the same as if you\n   * were to pass an object and specify `options` as a boolean. Giving an object allows fine-grained customization using the `replacer` and `reviver`\n   * functions.\n   */\n  serialize?: boolean | {\n    /**\n     * - `undefined` - will use regular `JSON.stringify` to send data (it's the fast mode).\n     * - `false` - will handle also circular references.\n     * - `true` - will handle also date, regex, undefined, error objects, symbols, maps, sets and functions.\n     * - object, which contains `date`, `regex`, `undefined`, `error`, `symbol`, `map`, `set` and `function` keys.\n     *   For each of them you can indicate if to include (by setting as `true`).\n     *   For `function` key you can also specify a custom function which handles serialization.\n     *   See [`jsan`](https://github.com/kolodny/jsan) for more details.\n     */\n    options?: undefined | boolean | {\n      date?: true;\n      regex?: true;\n      undefined?: true;\n      error?: true;\n      symbol?: true;\n      map?: true;\n      set?: true;\n      function?: true | ((fn: (...args: any[]) => any) => string);\n    };\n    /**\n     * [JSON replacer function](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter) used for both actions and states stringify.\n     * In addition, you can specify a data type by adding a [`__serializedType__`](https://github.com/zalmoxisus/remotedev-serialize/blob/master/helpers/index.js#L4)\n     * key. So you can deserialize it back while importing or persisting data.\n     * Moreover, it will also [show a nice preview showing the provided custom type](https://cloud.githubusercontent.com/assets/7957859/21814330/a17d556a-d761-11e6-85ef-159dd12f36c5.png):\n     */\n    replacer?: (key: string, value: unknown) => any;\n    /**\n     * [JSON `reviver` function](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter)\n     * used for parsing the imported actions and states. See [`remotedev-serialize`](https://github.com/zalmoxisus/remotedev-serialize/blob/master/immutable/serialize.js#L8-L41)\n     * as an example on how to serialize special data types and get them back.\n     */\n    reviver?: (key: string, value: unknown) => any;\n    /**\n     * Automatically serialize/deserialize immutablejs via [remotedev-serialize](https://github.com/zalmoxisus/remotedev-serialize).\n     * Just pass the Immutable library. It will support all ImmutableJS structures. You can even export them into a file and get them back.\n     * The only exception is `Record` class, for which you should pass this in addition the references to your classes in `refs`.\n     */\n    immutable?: any;\n    /**\n     * ImmutableJS `Record` classes used to make possible restore its instances back when importing, persisting...\n     */\n    refs?: any;\n  };\n  /**\n   * function which takes `action` object and id number as arguments, and should return `action` object back.\n   */\n  actionSanitizer?: <A extends Action>(action: A, id: number) => A;\n  /**\n   * function which takes `state` object and index as arguments, and should return `state` object back.\n   */\n  stateSanitizer?: <S>(state: S, index: number) => S;\n  /**\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\n   * If `actionsAllowlist` specified, `actionsDenylist` is ignored.\n   */\n  actionsDenylist?: string | string[];\n  /**\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\n   * If `actionsAllowlist` specified, `actionsDenylist` is ignored.\n   */\n  actionsAllowlist?: string | string[];\n  /**\n   * called for every action before sending, takes `state` and `action` object, and returns `true` in case it allows sending the current data to the monitor.\n   * Use it as a more advanced version of `actionsDenylist`/`actionsAllowlist` parameters.\n   */\n  predicate?: <S, A extends Action>(state: S, action: A) => boolean;\n  /**\n   * if specified as `false`, it will not record the changes till clicking on `Start recording` button.\n   * Available only for Redux enhancer, for others use `autoPause`.\n   *\n   * @default true\n   */\n  shouldRecordChanges?: boolean;\n  /**\n   * if specified, whenever clicking on `Pause recording` button and there are actions in the history log, will add this action type.\n   * If not specified, will commit when paused. Available only for Redux enhancer.\n   *\n   * @default \"@@PAUSED\"\"\n   */\n  pauseActionType?: string;\n  /**\n   * auto pauses when the extension’s window is not opened, and so has zero impact on your app when not in use.\n   * Not available for Redux enhancer (as it already does it but storing the data to be sent).\n   *\n   * @default false\n   */\n  autoPause?: boolean;\n  /**\n   * if specified as `true`, it will not allow any non-monitor actions to be dispatched till clicking on `Unlock changes` button.\n   * Available only for Redux enhancer.\n   *\n   * @default false\n   */\n  shouldStartLocked?: boolean;\n  /**\n   * if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Available only for Redux enhancer.\n   *\n   * @default true\n   */\n  shouldHotReload?: boolean;\n  /**\n   * if specified as `true`, whenever there's an exception in reducers, the monitors will show the error message, and next actions will not be dispatched.\n   *\n   * @default false\n   */\n  shouldCatchErrors?: boolean;\n  /**\n   * If you want to restrict the extension, specify the features you allow.\n   * If not specified, all of the features are enabled. When set as an object, only those included as `true` will be allowed.\n   * Note that except `true`/`false`, `import` and `export` can be set as `custom` (which is by default for Redux enhancer), meaning that the importing/exporting occurs on the client side.\n   * Otherwise, you'll get/set the data right from the monitor part.\n   */\n  features?: {\n    /**\n     * start/pause recording of dispatched actions\n     */\n    pause?: boolean;\n    /**\n     * lock/unlock dispatching actions and side effects\n     */\n    lock?: boolean;\n    /**\n     * persist states on page reloading\n     */\n    persist?: boolean;\n    /**\n     * export history of actions in a file\n     */\n    export?: boolean | 'custom';\n    /**\n     * import history of actions from a file\n     */\n    import?: boolean | 'custom';\n    /**\n     * jump back and forth (time travelling)\n     */\n    jump?: boolean;\n    /**\n     * skip (cancel) actions\n     */\n    skip?: boolean;\n    /**\n     * drag and drop actions in the history list\n     */\n    reorder?: boolean;\n    /**\n     * dispatch custom actions or action creators\n     */\n    dispatch?: boolean;\n    /**\n     * generate tests for the selected actions\n     */\n    test?: boolean;\n  };\n  /**\n   * Set to true or a stacktrace-returning function to record call stack traces for dispatched actions.\n   * Defaults to false.\n   */\n  trace?: boolean | (<A extends Action>(action: A) => string);\n  /**\n   * The maximum number of stack trace entries to record per action. Defaults to 10.\n   */\n  traceLimit?: number;\n}\ntype Compose = typeof compose;\ninterface ComposeWithDevTools {\n  (options: DevToolsEnhancerOptions): Compose;\n  <StoreExt extends {}>(...funcs: StoreEnhancer<StoreExt>[]): StoreEnhancer<StoreExt>;\n}\n\n/**\n * @public\n */\nexport const composeWithDevTools: ComposeWithDevTools = typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\n  if (arguments.length === 0) return undefined;\n  if (typeof arguments[0] === 'object') return compose;\n  return compose.apply(null, arguments as any as Function[]);\n};\n\n/**\n * @public\n */\nexport const devToolsEnhancer: {\n  (options: DevToolsEnhancerOptions): StoreEnhancer<any>;\n} = typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION__ ? (window as any).__REDUX_DEVTOOLS_EXTENSION__ : function () {\n  return function (noop) {\n    return noop;\n  };\n};","import type { Middleware, UnknownAction } from 'redux';\nimport type { ThunkMiddleware } from 'redux-thunk';\nimport { thunk as thunkMiddleware, withExtraArgument } from 'redux-thunk';\nimport type { ActionCreatorInvariantMiddlewareOptions } from './actionCreatorInvariantMiddleware';\nimport { createActionCreatorInvariantMiddleware } from './actionCreatorInvariantMiddleware';\nimport type { ImmutableStateInvariantMiddlewareOptions } from './immutableStateInvariantMiddleware';\n/* PROD_START_REMOVE_UMD */\nimport { createImmutableStateInvariantMiddleware } from './immutableStateInvariantMiddleware';\n/* PROD_STOP_REMOVE_UMD */\n\nimport type { SerializableStateInvariantMiddlewareOptions } from './serializableStateInvariantMiddleware';\nimport { createSerializableStateInvariantMiddleware } from './serializableStateInvariantMiddleware';\nimport type { ExcludeFromTuple } from './tsHelpers';\nimport { Tuple } from './utils';\nfunction isBoolean(x: any): x is boolean {\n  return typeof x === 'boolean';\n}\ninterface ThunkOptions<E = any> {\n  extraArgument: E;\n}\ninterface GetDefaultMiddlewareOptions {\n  thunk?: boolean | ThunkOptions;\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions;\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions;\n  actionCreatorCheck?: boolean | ActionCreatorInvariantMiddlewareOptions;\n}\nexport type ThunkMiddlewareFor<S, O extends GetDefaultMiddlewareOptions = {}> = O extends {\n  thunk: false;\n} ? never : O extends {\n  thunk: {\n    extraArgument: infer E;\n  };\n} ? ThunkMiddleware<S, UnknownAction, E> : ThunkMiddleware<S, UnknownAction>;\nexport type GetDefaultMiddleware<S = any> = <O extends GetDefaultMiddlewareOptions = {\n  thunk: true;\n  immutableCheck: true;\n  serializableCheck: true;\n  actionCreatorCheck: true;\n}>(options?: O) => Tuple<ExcludeFromTuple<[ThunkMiddlewareFor<S, O>], never>>;\nexport const buildGetDefaultMiddleware = <S = any,>(): GetDefaultMiddleware<S> => function getDefaultMiddleware(options) {\n  const {\n    thunk = true,\n    immutableCheck = true,\n    serializableCheck = true,\n    actionCreatorCheck = true\n  } = options ?? {};\n  let middlewareArray = new Tuple<Middleware[]>();\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(thunkMiddleware);\n    } else {\n      middlewareArray.push(withExtraArgument(thunk.extraArgument));\n    }\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    if (immutableCheck) {\n      /* PROD_START_REMOVE_UMD */\n      let immutableOptions: ImmutableStateInvariantMiddlewareOptions = {};\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n      /* PROD_STOP_REMOVE_UMD */\n    }\n    if (serializableCheck) {\n      let serializableOptions: SerializableStateInvariantMiddlewareOptions = {};\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n    if (actionCreatorCheck) {\n      let actionCreatorOptions: ActionCreatorInvariantMiddlewareOptions = {};\n      if (!isBoolean(actionCreatorCheck)) {\n        actionCreatorOptions = actionCreatorCheck;\n      }\n      middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));\n    }\n  }\n  return middlewareArray as any;\n};","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport { isAction } from 'redux';\nimport type { IsUnknownOrNonInferrable, IfMaybeUndefined, IfVoid, IsAny } from './tsHelpers';\nimport { hasMatchFunction } from './tsHelpers';\n\n/**\n * An action with a string type and an associated payload. This is the\n * type of action returned by `createAction()` action creators.\n *\n * @template P The type of the action's payload.\n * @template T the type used for the action type.\n * @template M The type of the action's meta (optional)\n * @template E The type of the action's error (optional)\n *\n * @public\n */\nexport type PayloadAction<P = void, T extends string = string, M = never, E = never> = {\n  payload: P;\n  type: T;\n} & ([M] extends [never] ? {} : {\n  meta: M;\n}) & ([E] extends [never] ? {} : {\n  error: E;\n});\n\n/**\n * A \"prepare\" method to be used as the second parameter of `createAction`.\n * Takes any number of arguments and returns a Flux Standard Action without\n * type (will be added later) that *must* contain a payload (might be undefined).\n *\n * @public\n */\nexport type PrepareAction<P> = ((...args: any[]) => {\n  payload: P;\n}) | ((...args: any[]) => {\n  payload: P;\n  meta: any;\n}) | ((...args: any[]) => {\n  payload: P;\n  error: any;\n}) | ((...args: any[]) => {\n  payload: P;\n  meta: any;\n  error: any;\n});\n\n/**\n * Internal version of `ActionCreatorWithPreparedPayload`. Not to be used externally.\n *\n * @internal\n */\nexport type _ActionCreatorWithPreparedPayload<PA extends PrepareAction<any> | void, T extends string = string> = PA extends PrepareAction<infer P> ? ActionCreatorWithPreparedPayload<Parameters<PA>, P, T, ReturnType<PA> extends {\n  error: infer E;\n} ? E : never, ReturnType<PA> extends {\n  meta: infer M;\n} ? M : never> : void;\n\n/**\n * Basic type for all action creators.\n *\n * @inheritdoc {redux#ActionCreator}\n */\nexport type BaseActionCreator<P, T extends string, M = never, E = never> = {\n  type: T;\n  match: (action: unknown) => action is PayloadAction<P, T, M, E>;\n};\n\n/**\n * An action creator that takes multiple arguments that are passed\n * to a `PrepareAction` method to create the final Action.\n * @typeParam Args arguments for the action creator function\n * @typeParam P `payload` type\n * @typeParam T `type` name\n * @typeParam E optional `error` type\n * @typeParam M optional `meta` type\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithPreparedPayload<Args extends unknown[], P, T extends string = string, E = never, M = never> extends BaseActionCreator<P, T, M, E> {\n  /**\n   * Calling this {@link redux#ActionCreator} with `Args` will return\n   * an Action with a payload of type `P` and (depending on the `PrepareAction`\n   * method used) a `meta`- and `error` property of types `M` and `E` respectively.\n   */\n  (...args: Args): PayloadAction<P, T, M, E>;\n}\n\n/**\n * An action creator of type `T` that takes an optional payload of type `P`.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithOptionalPayload<P, T extends string = string> extends BaseActionCreator<P, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} with an argument will\n   * return a {@link PayloadAction} of type `T` with a payload of `P`.\n   * Calling it without an argument will return a PayloadAction with a payload of `undefined`.\n   */\n  (payload?: P): PayloadAction<P, T>;\n}\n\n/**\n * An action creator of type `T` that takes no payload.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithoutPayload<T extends string = string> extends BaseActionCreator<undefined, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} will\n   * return a {@link PayloadAction} of type `T` with a payload of `undefined`\n   */\n  (noArgument: void): PayloadAction<undefined, T>;\n}\n\n/**\n * An action creator of type `T` that requires a payload of type P.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithPayload<P, T extends string = string> extends BaseActionCreator<P, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} with an argument will\n   * return a {@link PayloadAction} of type `T` with a payload of `P`\n   */\n  (payload: P): PayloadAction<P, T>;\n}\n\n/**\n * An action creator of type `T` whose `payload` type could not be inferred. Accepts everything as `payload`.\n *\n * @inheritdoc {redux#ActionCreator}\n *\n * @public\n */\nexport interface ActionCreatorWithNonInferrablePayload<T extends string = string> extends BaseActionCreator<unknown, T> {\n  /**\n   * Calling this {@link redux#ActionCreator} with an argument will\n   * return a {@link PayloadAction} of type `T` with a payload\n   * of exactly the type of the argument.\n   */\n  <PT extends unknown>(payload: PT): PayloadAction<PT, T>;\n}\n\n/**\n * An action creator that produces actions with a `payload` attribute.\n *\n * @typeParam P the `payload` type\n * @typeParam T the `type` of the resulting action\n * @typeParam PA if the resulting action is preprocessed by a `prepare` method, the signature of said method.\n *\n * @public\n */\nexport type PayloadActionCreator<P = void, T extends string = string, PA extends PrepareAction<P> | void = void> = IfPrepareActionMethodProvided<PA, _ActionCreatorWithPreparedPayload<PA, T>,\n// else\nIsAny<P, ActionCreatorWithPayload<any, T>, IsUnknownOrNonInferrable<P, ActionCreatorWithNonInferrablePayload<T>,\n// else\nIfVoid<P, ActionCreatorWithoutPayload<T>,\n// else\nIfMaybeUndefined<P, ActionCreatorWithOptionalPayload<P, T>,\n// else\nActionCreatorWithPayload<P, T>>>>>>;\n\n/**\n * A utility function to create an action creator for the given action type\n * string. The action creator accepts a single argument, which will be included\n * in the action object as a field called payload. The action creator function\n * will also have its toString() overridden so that it returns the action type.\n *\n * @param type The action type to use for created actions.\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\n *                If this is given, the resulting action creator will pass its arguments to this method to calculate payload & meta.\n *\n * @public\n */\nexport function createAction<P = void, T extends string = string>(type: T): PayloadActionCreator<P, T>;\n\n/**\n * A utility function to create an action creator for the given action type\n * string. The action creator accepts a single argument, which will be included\n * in the action object as a field called payload. The action creator function\n * will also have its toString() overridden so that it returns the action type.\n *\n * @param type The action type to use for created actions.\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\n *                If this is given, the resulting action creator will pass its arguments to this method to calculate payload & meta.\n *\n * @public\n */\nexport function createAction<PA extends PrepareAction<any>, T extends string = string>(type: T, prepareAction: PA): PayloadActionCreator<ReturnType<PA>['payload'], T, PA>;\nexport function createAction(type: string, prepareAction?: Function): any {\n  function actionCreator(...args: any[]) {\n    if (prepareAction) {\n      let prepared = prepareAction(...args);\n      if (!prepared) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(0) : 'prepareAction did not return an object');\n      }\n      return {\n        type,\n        payload: prepared.payload,\n        ...('meta' in prepared && {\n          meta: prepared.meta\n        }),\n        ...('error' in prepared && {\n          error: prepared.error\n        })\n      };\n    }\n    return {\n      type,\n      payload: args[0]\n    };\n  }\n  actionCreator.toString = () => `${type}`;\n  actionCreator.type = type;\n  actionCreator.match = (action: unknown): action is PayloadAction => isAction(action) && action.type === type;\n  return actionCreator;\n}\n\n/**\n * Returns true if value is an RTK-like action creator, with a static type property and match method.\n */\nexport function isActionCreator(action: unknown): action is BaseActionCreator<unknown, string> & Function {\n  return typeof action === 'function' && 'type' in action &&\n  // hasMatchFunction only wants Matchers but I don't see the point in rewriting it\n  hasMatchFunction(action as any);\n}\n\n/**\n * Returns true if value is an action with a string type and valid Flux Standard Action keys.\n */\nexport function isFSA(action: unknown): action is {\n  type: string;\n  payload?: unknown;\n  error?: unknown;\n  meta?: unknown;\n} {\n  return isAction(action) && Object.keys(action).every(isValidKey);\n}\nfunction isValidKey(key: string) {\n  return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;\n}\n\n// helper types for more readable typings\n\ntype IfPrepareActionMethodProvided<PA extends PrepareAction<any> | void, True, False> = PA extends ((...args: any[]) => any) ? True : False;","import type { Middleware, StoreEnhancer } from 'redux';\nimport type { Tuple } from './utils';\nexport function safeAssign<T extends object>(target: T, ...args: Array<Partial<NoInfer<T>>>) {\n  Object.assign(target, ...args);\n}\n\n/**\n * return True if T is `any`, otherwise return False\n * taken from https://github.com/joonhocho/tsdef\n *\n * @internal\n */\nexport type IsAny<T, True, False = never> =\n// test if we are going the left AND right path in the condition\ntrue | false extends (T extends never ? true : false) ? True : False;\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>;\n\n/**\n * return True if T is `unknown`, otherwise return False\n * taken from https://github.com/joonhocho/tsdef\n *\n * @internal\n */\nexport type IsUnknown<T, True, False = never> = unknown extends T ? IsAny<T, False, True> : False;\nexport type FallbackIfUnknown<T, Fallback> = IsUnknown<T, Fallback, T>;\n\n/**\n * @internal\n */\nexport type IfMaybeUndefined<P, True, False> = [undefined] extends [P] ? True : False;\n\n/**\n * @internal\n */\nexport type IfVoid<P, True, False> = [void] extends [P] ? True : False;\n\n/**\n * @internal\n */\nexport type IsEmptyObj<T, True, False = never> = T extends any ? keyof T extends never ? IsUnknown<T, False, IfMaybeUndefined<T, False, IfVoid<T, False, True>>> : False : never;\n\n/**\n * returns True if TS version is above 3.5, False if below.\n * uses feature detection to detect TS version >= 3.5\n * * versions below 3.5 will return `{}` for unresolvable interference\n * * versions above will return `unknown`\n *\n * @internal\n */\nexport type AtLeastTS35<True, False> = [True, False][IsUnknown<ReturnType<<T>() => T>, 0, 1>];\n\n/**\n * @internal\n */\nexport type IsUnknownOrNonInferrable<T, True, False> = AtLeastTS35<IsUnknown<T, True, False>, IsEmptyObj<T, True, IsUnknown<T, True, False>>>;\n\n/**\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\n */\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\n\n// Appears to have a convenient side effect of ignoring `never` even if that's not what you specified\nexport type ExcludeFromTuple<T, E, Acc extends unknown[] = []> = T extends [infer Head, ...infer Tail] ? ExcludeFromTuple<Tail, E, [...Acc, ...([Head] extends [E] ? [] : [Head])]> : Acc;\ntype ExtractDispatchFromMiddlewareTuple<MiddlewareTuple extends readonly any[], Acc extends {}> = MiddlewareTuple extends [infer Head, ...infer Tail] ? ExtractDispatchFromMiddlewareTuple<Tail, Acc & (Head extends Middleware<infer D> ? IsAny<D, {}, D> : {})> : Acc;\nexport type ExtractDispatchExtensions<M> = M extends Tuple<infer MiddlewareTuple> ? ExtractDispatchFromMiddlewareTuple<MiddlewareTuple, {}> : M extends ReadonlyArray<Middleware> ? ExtractDispatchFromMiddlewareTuple<[...M], {}> : never;\ntype ExtractStoreExtensionsFromEnhancerTuple<EnhancerTuple extends readonly any[], Acc extends {}> = EnhancerTuple extends [infer Head, ...infer Tail] ? ExtractStoreExtensionsFromEnhancerTuple<Tail, Acc & (Head extends StoreEnhancer<infer Ext> ? IsAny<Ext, {}, Ext> : {})> : Acc;\nexport type ExtractStoreExtensions<E> = E extends Tuple<infer EnhancerTuple> ? ExtractStoreExtensionsFromEnhancerTuple<EnhancerTuple, {}> : E extends ReadonlyArray<StoreEnhancer> ? UnionToIntersection<E[number] extends StoreEnhancer<infer Ext> ? Ext extends {} ? IsAny<Ext, {}, Ext> : {} : {}> : never;\ntype ExtractStateExtensionsFromEnhancerTuple<EnhancerTuple extends readonly any[], Acc extends {}> = EnhancerTuple extends [infer Head, ...infer Tail] ? ExtractStateExtensionsFromEnhancerTuple<Tail, Acc & (Head extends StoreEnhancer<any, infer StateExt> ? IsAny<StateExt, {}, StateExt> : {})> : Acc;\nexport type ExtractStateExtensions<E> = E extends Tuple<infer EnhancerTuple> ? ExtractStateExtensionsFromEnhancerTuple<EnhancerTuple, {}> : E extends ReadonlyArray<StoreEnhancer> ? UnionToIntersection<E[number] extends StoreEnhancer<any, infer StateExt> ? StateExt extends {} ? IsAny<StateExt, {}, StateExt> : {} : {}> : never;\n\n/**\n * Helper type. Passes T out again, but boxes it in a way that it cannot\n * \"widen\" the type by accident if it is a generic that should be inferred\n * from elsewhere.\n *\n * @internal\n */\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\nexport type NonUndefined<T> = T extends undefined ? never : T;\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\nexport type WithOptionalProp<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport interface TypeGuard<T> {\n  (value: any): value is T;\n}\nexport interface HasMatchFunction<T> {\n  match: TypeGuard<T>;\n}\nexport const hasMatchFunction = <T,>(v: Matcher<T>): v is HasMatchFunction<T> => {\n  return v && typeof (v as HasMatchFunction<T>).match === 'function';\n};\n\n/** @public */\nexport type Matcher<T> = HasMatchFunction<T> | TypeGuard<T>;\n\n/** @public */\nexport type ActionFromMatcher<M extends Matcher<any>> = M extends Matcher<infer T> ? T : never;\nexport type Id<T> = { [K in keyof T]: T[K] } & {};\nexport type Tail<T extends any[]> = T extends [any, ...infer Tail] ? Tail : never;\nexport type UnknownIfNonSpecific<T> = {} extends T ? unknown : T;\n\n/**\n * A Promise that will never reject.\n * @see https://github.com/reduxjs/redux-toolkit/issues/4101\n */\nexport type SafePromise<T> = Promise<T> & {\n  __linterBrands: 'SafePromise';\n};\n\n/**\n * Properly wraps a Promise as a {@link SafePromise} with .catch(fallback).\n */\nexport function asSafePromise<Resolved, Rejected>(promise: Promise<Resolved>, fallback: (error: unknown) => Rejected) {\n  return promise.catch(fallback) as SafePromise<Resolved | Rejected>;\n}","import type { Middleware } from 'redux';\nimport { isActionCreator as isRTKAction } from './createAction';\nexport interface ActionCreatorInvariantMiddlewareOptions {\n  /**\n   * The function to identify whether a value is an action creator.\n   * The default checks for a function with a static type property and match method.\n   */\n  isActionCreator?: (action: unknown) => action is Function & {\n    type?: unknown;\n  };\n}\nexport function getMessage(type?: unknown) {\n  const splitType = type ? `${type}`.split('/') : [];\n  const actionName = splitType[splitType.length - 1] || 'actionCreator';\n  return `Detected an action creator with type \"${type || 'unknown'}\" being dispatched. \nMake sure you're calling the action creator before dispatching, i.e. \\`dispatch(${actionName}())\\` instead of \\`dispatch(${actionName})\\`. This is necessary even if the action has no payload.`;\n}\nexport function createActionCreatorInvariantMiddleware(options: ActionCreatorInvariantMiddlewareOptions = {}): Middleware {\n  if (process.env.NODE_ENV === 'production') {\n    return () => next => action => next(action);\n  }\n  const {\n    isActionCreator = isRTKAction\n  } = options;\n  return () => next => action => {\n    if (isActionCreator(action)) {\n      console.warn(getMessage(action.type));\n    }\n    return next(action);\n  };\n}","import { produce as createNextState, isDraftable } from 'immer';\nexport function getTimeMeasureUtils(maxDelay: number, fnName: string) {\n  let elapsed = 0;\n  return {\n    measureTime<T>(fn: () => T): T {\n      const started = Date.now();\n      try {\n        return fn();\n      } finally {\n        const finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.`);\n      }\n    }\n  };\n}\nexport function delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport class Tuple<Items extends ReadonlyArray<unknown> = []> extends Array<Items[number]> {\n  constructor(length: number);\n  constructor(...items: Items);\n  constructor(...items: any[]) {\n    super(...items);\n    Object.setPrototypeOf(this, Tuple.prototype);\n  }\n  static override get [Symbol.species]() {\n    return Tuple as any;\n  }\n  override concat<AdditionalItems extends ReadonlyArray<unknown>>(items: Tuple<AdditionalItems>): Tuple<[...Items, ...AdditionalItems]>;\n  override concat<AdditionalItems extends ReadonlyArray<unknown>>(items: AdditionalItems): Tuple<[...Items, ...AdditionalItems]>;\n  override concat<AdditionalItems extends ReadonlyArray<unknown>>(...items: AdditionalItems): Tuple<[...Items, ...AdditionalItems]>;\n  override concat(...arr: any[]) {\n    return super.concat.apply(this, arr);\n  }\n  prepend<AdditionalItems extends ReadonlyArray<unknown>>(items: Tuple<AdditionalItems>): Tuple<[...AdditionalItems, ...Items]>;\n  prepend<AdditionalItems extends ReadonlyArray<unknown>>(items: AdditionalItems): Tuple<[...AdditionalItems, ...Items]>;\n  prepend<AdditionalItems extends ReadonlyArray<unknown>>(...items: AdditionalItems): Tuple<[...AdditionalItems, ...Items]>;\n  prepend(...arr: any[]) {\n    if (arr.length === 1 && Array.isArray(arr[0])) {\n      return new Tuple(...arr[0].concat(this));\n    }\n    return new Tuple(...arr.concat(this));\n  }\n}\nexport function freezeDraftable<T>(val: T) {\n  return isDraftable(val) ? createNextState(val, () => {}) : val;\n}\nexport function getOrInsert<K extends object, V>(map: WeakMap<K, V>, key: K, value: V): V;\nexport function getOrInsert<K, V>(map: Map<K, V>, key: K, value: V): V;\nexport function getOrInsert<K extends object, V>(map: Map<K, V> | WeakMap<K, V>, key: K, value: V): V {\n  if (map.has(key)) return map.get(key) as V;\n  return map.set(key, value).get(key) as V;\n}\nexport function getOrInsertComputed<K extends object, V>(map: WeakMap<K, V>, key: K, compute: (key: K) => V): V;\nexport function getOrInsertComputed<K, V>(map: Map<K, V>, key: K, compute: (key: K) => V): V;\nexport function getOrInsertComputed<K extends object, V>(map: Map<K, V> | WeakMap<K, V>, key: K, compute: (key: K) => V): V {\n  if (map.has(key)) return map.get(key) as V;\n  return map.set(key, compute(key)).get(key) as V;\n}\nexport function promiseWithResolvers<T>(): {\n  promise: Promise<T>;\n  resolve: (value: T | PromiseLike<T>) => void;\n  reject: (reason?: any) => void;\n} {\n  let resolve: any;\n  let reject: any;\n  const promise = new Promise<T>((res, rej) => {\n    resolve = res;\n    reject = rej;\n  });\n  return {\n    promise,\n    resolve,\n    reject\n  };\n}","import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\nimport type { Middleware } from 'redux';\nimport type { IgnorePaths } from './serializableStateInvariantMiddleware';\nimport { getTimeMeasureUtils } from './utils';\ntype EntryProcessor = (key: string, value: any) => any;\n\n/**\n * The default `isImmutable` function.\n *\n * @public\n */\nexport function isImmutableDefault(value: unknown): boolean {\n  return typeof value !== 'object' || value == null || Object.isFrozen(value);\n}\nexport function trackForMutations(isImmutable: IsImmutableFunc, ignorePaths: IgnorePaths | undefined, obj: any) {\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations() {\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\ninterface TrackedProperty {\n  value: any;\n  children: Record<string, any>;\n}\nfunction trackProperties(isImmutable: IsImmutableFunc, ignorePaths: IgnorePaths = [], obj: Record<string, any>, path: string = '', checkedObjects: Set<Record<string, any>> = new Set()) {\n  const tracked: Partial<TrackedProperty> = {\n    value: obj\n  };\n  if (!isImmutable(obj) && !checkedObjects.has(obj)) {\n    checkedObjects.add(obj);\n    tracked.children = {};\n    for (const key in obj) {\n      const childPath = path ? path + '.' + key : key;\n      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {\n        continue;\n      }\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n  return tracked as TrackedProperty;\n}\nfunction detectMutations(isImmutable: IsImmutableFunc, ignoredPaths: IgnorePaths = [], trackedProperty: TrackedProperty, obj: any, sameParentRef: boolean = false, path: string = ''): {\n  wasMutated: boolean;\n  path?: string;\n} {\n  const prevObj = trackedProperty ? trackedProperty.value : undefined;\n  const sameRef = prevObj === obj;\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path\n    };\n  }\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  }\n\n  // Gather all keys from prev (tracked) and after objs\n  const keysToDetect: Record<string, boolean> = {};\n  for (let key in trackedProperty.children) {\n    keysToDetect[key] = true;\n  }\n  for (let key in obj) {\n    keysToDetect[key] = true;\n  }\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (let key in keysToDetect) {\n    const nestedPath = path ? path + '.' + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some(ignored => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    const result = detectMutations(isImmutable, ignoredPaths, trackedProperty.children[key], obj[key], sameRef, nestedPath);\n    if (result.wasMutated) {\n      return result;\n    }\n  }\n  return {\n    wasMutated: false\n  };\n}\ntype IsImmutableFunc = (value: any) => boolean;\n\n/**\n * Options for `createImmutableStateInvariantMiddleware()`.\n *\n * @public\n */\nexport interface ImmutableStateInvariantMiddlewareOptions {\n  /**\n    Callback function to check if a value is considered to be immutable.\n    This function is applied recursively to every value contained in the state.\n    The default implementation will return true for primitive types\n    (like numbers, strings, booleans, null and undefined).\n   */\n  isImmutable?: IsImmutableFunc;\n  /**\n    An array of dot-separated path strings that match named nodes from\n    the root state to ignore when checking for immutability.\n    Defaults to undefined\n   */\n  ignoredPaths?: IgnorePaths;\n  /** Print a warning if checks take longer than N ms. Default: 32ms */\n  warnAfter?: number;\n}\n\n/**\n * Creates a middleware that checks whether any state was mutated in between\n * dispatches or during a dispatch. If any mutations are detected, an error is\n * thrown.\n *\n * @param options Middleware options.\n *\n * @public\n */\nexport function createImmutableStateInvariantMiddleware(options: ImmutableStateInvariantMiddlewareOptions = {}): Middleware {\n  if (process.env.NODE_ENV === 'production') {\n    return () => next => action => next(action);\n  } else {\n    function stringify(obj: any, serializer?: EntryProcessor, indent?: string | number, decycler?: EntryProcessor): string {\n      return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\n    }\n    function getSerialize(serializer?: EntryProcessor, decycler?: EntryProcessor): EntryProcessor {\n      let stack: any[] = [],\n        keys: any[] = [];\n      if (!decycler) decycler = function (_: string, value: any) {\n        if (stack[0] === value) return '[Circular ~]';\n        return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';\n      };\n      return function (this: any, key: string, value: any) {\n        if (stack.length > 0) {\n          var thisPos = stack.indexOf(this);\n          ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n          ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n          if (~stack.indexOf(value)) value = decycler!.call(this, key, value);\n        } else stack.push(value);\n        return serializer == null ? value : serializer.call(this, key, value);\n      };\n    }\n    let {\n      isImmutable = isImmutableDefault,\n      ignoredPaths,\n      warnAfter = 32\n    } = options;\n    const track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n    return ({\n      getState\n    }) => {\n      let state = getState();\n      let tracker = track(state);\n      let result;\n      return next => action => {\n        const measureUtils = getTimeMeasureUtils(warnAfter, 'ImmutableStateInvariantMiddleware');\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          // Track before potentially not meeting the invariant\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(19) : `A state mutation was detected between dispatches, in the path '${result.path || ''}'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        const dispatchedAction = next(action);\n        measureUtils.measureTime(() => {\n          state = getState();\n          result = tracker.detectMutations();\n          // Track before potentially not meeting the invariant\n          tracker = track(state);\n          if (result.wasMutated) {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(20) : `A state mutation was detected inside a dispatch, in the path: ${result.path || ''}. Take a look at the reducer(s) handling the action ${stringify(action)}. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  }\n}","import type { Middleware } from 'redux';\nimport { isAction, isPlainObject } from 'redux';\nimport { getTimeMeasureUtils } from './utils';\n\n/**\n * Returns true if the passed value is \"plain\", i.e. a value that is either\n * directly JSON-serializable (boolean, number, string, array, plain object)\n * or `undefined`.\n *\n * @param val The value to check.\n *\n * @public\n */\nexport function isPlain(val: any) {\n  const type = typeof val;\n  return val == null || type === 'string' || type === 'boolean' || type === 'number' || Array.isArray(val) || isPlainObject(val);\n}\ninterface NonSerializableValue {\n  keyPath: string;\n  value: unknown;\n}\nexport type IgnorePaths = readonly (string | RegExp)[];\n\n/**\n * @public\n */\nexport function findNonSerializableValue(value: unknown, path: string = '', isSerializable: (value: unknown) => boolean = isPlain, getEntries?: (value: unknown) => [string, any][], ignoredPaths: IgnorePaths = [], cache?: WeakSet<object>): NonSerializableValue | false {\n  let foundNestedSerializable: NonSerializableValue | false;\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path || '<root>',\n      value: value\n    };\n  }\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  if (cache?.has(value)) return false;\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  const hasIgnoredPaths = ignoredPaths.length > 0;\n  for (const [key, nestedValue] of entries) {\n    const nestedPath = path ? path + '.' + key : key;\n    if (hasIgnoredPaths) {\n      const hasMatches = ignoredPaths.some(ignored => {\n        if (ignored instanceof RegExp) {\n          return ignored.test(nestedPath);\n        }\n        return nestedPath === ignored;\n      });\n      if (hasMatches) {\n        continue;\n      }\n    }\n    if (!isSerializable(nestedValue)) {\n      return {\n        keyPath: nestedPath,\n        value: nestedValue\n      };\n    }\n    if (typeof nestedValue === 'object') {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths, cache);\n      if (foundNestedSerializable) {\n        return foundNestedSerializable;\n      }\n    }\n  }\n  if (cache && isNestedFrozen(value)) cache.add(value);\n  return false;\n}\nexport function isNestedFrozen(value: object) {\n  if (!Object.isFrozen(value)) return false;\n  for (const nestedValue of Object.values(value)) {\n    if (typeof nestedValue !== 'object' || nestedValue === null) continue;\n    if (!isNestedFrozen(nestedValue)) return false;\n  }\n  return true;\n}\n\n/**\n * Options for `createSerializableStateInvariantMiddleware()`.\n *\n * @public\n */\nexport interface SerializableStateInvariantMiddlewareOptions {\n  /**\n   * The function to check if a value is considered serializable. This\n   * function is applied recursively to every value contained in the\n   * state. Defaults to `isPlain()`.\n   */\n  isSerializable?: (value: any) => boolean;\n  /**\n   * The function that will be used to retrieve entries from each\n   * value.  If unspecified, `Object.entries` will be used. Defaults\n   * to `undefined`.\n   */\n  getEntries?: (value: any) => [string, any][];\n\n  /**\n   * An array of action types to ignore when checking for serializability.\n   * Defaults to []\n   */\n  ignoredActions?: string[];\n\n  /**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to\n   * ['meta.arg', 'meta.baseQueryMeta']\n   */\n  ignoredActionPaths?: (string | RegExp)[];\n\n  /**\n   * An array of dot-separated path strings or regular expressions to ignore\n   * when checking for serializability, Defaults to []\n   */\n  ignoredPaths?: (string | RegExp)[];\n  /**\n   * Execution time warning threshold. If the middleware takes longer\n   * than `warnAfter` ms, a warning will be displayed in the console.\n   * Defaults to 32ms.\n   */\n  warnAfter?: number;\n\n  /**\n   * Opt out of checking state. When set to `true`, other state-related params will be ignored.\n   */\n  ignoreState?: boolean;\n\n  /**\n   * Opt out of checking actions. When set to `true`, other action-related params will be ignored.\n   */\n  ignoreActions?: boolean;\n\n  /**\n   * Opt out of caching the results. The cache uses a WeakSet and speeds up repeated checking processes.\n   * The cache is automatically disabled if no browser support for WeakSet is present.\n   */\n  disableCache?: boolean;\n}\n\n/**\n * Creates a middleware that, after every state change, checks if the new\n * state is serializable. If a non-serializable value is found within the\n * state, an error is printed to the console.\n *\n * @param options Middleware options.\n *\n * @public\n */\nexport function createSerializableStateInvariantMiddleware(options: SerializableStateInvariantMiddlewareOptions = {}): Middleware {\n  if (process.env.NODE_ENV === 'production') {\n    return () => next => action => next(action);\n  } else {\n    const {\n      isSerializable = isPlain,\n      getEntries,\n      ignoredActions = [],\n      ignoredActionPaths = ['meta.arg', 'meta.baseQueryMeta'],\n      ignoredPaths = [],\n      warnAfter = 32,\n      ignoreState = false,\n      ignoreActions = false,\n      disableCache = false\n    } = options;\n    const cache: WeakSet<object> | undefined = !disableCache && WeakSet ? new WeakSet() : undefined;\n    return storeAPI => next => action => {\n      if (!isAction(action)) {\n        return next(action);\n      }\n      const result = next(action);\n      const measureUtils = getTimeMeasureUtils(warnAfter, 'SerializableStateInvariantMiddleware');\n      if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type as any) !== -1)) {\n        measureUtils.measureTime(() => {\n          const foundActionNonSerializableValue = findNonSerializableValue(action, '', isSerializable, getEntries, ignoredActionPaths, cache);\n          if (foundActionNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundActionNonSerializableValue;\n            console.error(`A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`, value, '\\nTake a look at the logic that dispatched this action: ', action, '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)', '\\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)');\n          }\n        });\n      }\n      if (!ignoreState) {\n        measureUtils.measureTime(() => {\n          const state = storeAPI.getState();\n          const foundStateNonSerializableValue = findNonSerializableValue(state, '', isSerializable, getEntries, ignoredPaths, cache);\n          if (foundStateNonSerializableValue) {\n            const {\n              keyPath,\n              value\n            } = foundStateNonSerializableValue;\n            console.error(`A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`, value, `\nTake a look at the reducer(s) handling this action type: ${action.type}.\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`);\n          }\n        });\n        measureUtils.warnIfExceeded();\n      }\n      return result;\n    };\n  }\n}","import type { StoreEnhancer } from 'redux';\nexport const SHOULD_AUTOBATCH = 'RTK_autoBatch';\nexport const prepareAutoBatched = <T,>() => (payload: T): {\n  payload: T;\n  meta: unknown;\n} => ({\n  payload,\n  meta: {\n    [SHOULD_AUTOBATCH]: true\n  }\n});\nconst createQueueWithTimer = (timeout: number) => {\n  return (notify: () => void) => {\n    setTimeout(notify, timeout);\n  };\n};\nexport type AutoBatchOptions = {\n  type: 'tick';\n} | {\n  type: 'timer';\n  timeout: number;\n} | {\n  type: 'raf';\n} | {\n  type: 'callback';\n  queueNotification: (notify: () => void) => void;\n};\n\n/**\n * A Redux store enhancer that watches for \"low-priority\" actions, and delays\n * notifying subscribers until either the queued callback executes or the\n * next \"standard-priority\" action is dispatched.\n *\n * This allows dispatching multiple \"low-priority\" actions in a row with only\n * a single subscriber notification to the UI after the sequence of actions\n * is finished, thus improving UI re-render performance.\n *\n * Watches for actions with the `action.meta[SHOULD_AUTOBATCH]` attribute.\n * This can be added to `action.meta` manually, or by using the\n * `prepareAutoBatched` helper.\n *\n * By default, it will queue a notification for the end of the event loop tick.\n * However, you can pass several other options to configure the behavior:\n * - `{type: 'tick'}`: queues using `queueMicrotask`\n * - `{type: 'timer', timeout: number}`: queues using `setTimeout`\n * - `{type: 'raf'}`: queues using `requestAnimationFrame` (default)\n * - `{type: 'callback', queueNotification: (notify: () => void) => void}`: lets you provide your own callback\n *\n *\n */\nexport const autoBatchEnhancer = (options: AutoBatchOptions = {\n  type: 'raf'\n}): StoreEnhancer => next => (...args) => {\n  const store = next(...args);\n  let notifying = true;\n  let shouldNotifyAtEndOfTick = false;\n  let notificationQueued = false;\n  const listeners = new Set<() => void>();\n  const queueCallback = options.type === 'tick' ? queueMicrotask : options.type === 'raf' ?\n  // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.\n  typeof window !== 'undefined' && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10) : options.type === 'callback' ? options.queueNotification : createQueueWithTimer(options.timeout);\n  const notifyListeners = () => {\n    // We're running at the end of the event loop tick.\n    // Run the real listener callbacks to actually update the UI.\n    notificationQueued = false;\n    if (shouldNotifyAtEndOfTick) {\n      shouldNotifyAtEndOfTick = false;\n      listeners.forEach(l => l());\n    }\n  };\n  return Object.assign({}, store, {\n    // Override the base `store.subscribe` method to keep original listeners\n    // from running if we're delaying notifications\n    subscribe(listener: () => void) {\n      // Each wrapped listener will only call the real listener if\n      // the `notifying` flag is currently active when it's called.\n      // This lets the base store work as normal, while the actual UI\n      // update becomes controlled by this enhancer.\n      const wrappedListener: typeof listener = () => notifying && listener();\n      const unsubscribe = store.subscribe(wrappedListener);\n      listeners.add(listener);\n      return () => {\n        unsubscribe();\n        listeners.delete(listener);\n      };\n    },\n    // Override the base `store.dispatch` method so that we can check actions\n    // for the `shouldAutoBatch` flag and determine if batching is active\n    dispatch(action: any) {\n      try {\n        // If the action does _not_ have the `shouldAutoBatch` flag,\n        // we resume/continue normal notify-after-each-dispatch behavior\n        notifying = !action?.meta?.[SHOULD_AUTOBATCH];\n        // If a `notifyListeners` microtask was queued, you can't cancel it.\n        // Instead, we set a flag so that it's a no-op when it does run\n        shouldNotifyAtEndOfTick = !notifying;\n        if (shouldNotifyAtEndOfTick) {\n          // We've seen at least 1 action with `SHOULD_AUTOBATCH`. Try to queue\n          // a microtask to notify listeners at the end of the event loop tick.\n          // Make sure we only enqueue this _once_ per tick.\n          if (!notificationQueued) {\n            notificationQueued = true;\n            queueCallback(notifyListeners);\n          }\n        }\n        // Go ahead and process the action as usual, including reducers.\n        // If normal notification behavior is enabled, the store will notify\n        // all of its own listeners, and the wrapper callbacks above will\n        // see `notifying` is true and pass on to the real listener callbacks.\n        // If we're \"batching\" behavior, then the wrapped callbacks will\n        // bail out, causing the base store notification behavior to be no-ops.\n        return store.dispatch(action);\n      } finally {\n        // Assume we're back to normal behavior after each action\n        notifying = true;\n      }\n    }\n  });\n};","import type { StoreEnhancer } from 'redux';\nimport type { AutoBatchOptions } from './autoBatchEnhancer';\nimport { autoBatchEnhancer } from './autoBatchEnhancer';\nimport { Tuple } from './utils';\nimport type { Middlewares } from './configureStore';\nimport type { ExtractDispatchExtensions } from './tsHelpers';\ntype GetDefaultEnhancersOptions = {\n  autoBatch?: boolean | AutoBatchOptions;\n};\nexport type GetDefaultEnhancers<M extends Middlewares<any>> = (options?: GetDefaultEnhancersOptions) => Tuple<[StoreEnhancer<{\n  dispatch: ExtractDispatchExtensions<M>;\n}>]>;\nexport const buildGetDefaultEnhancers = <M extends Middlewares<any>,>(middlewareEnhancer: StoreEnhancer<{\n  dispatch: ExtractDispatchExtensions<M>;\n}>): GetDefaultEnhancers<M> => function getDefaultEnhancers(options) {\n  const {\n    autoBatch = true\n  } = options ?? {};\n  let enhancerArray = new Tuple<StoreEnhancer[]>(middlewareEnhancer);\n  if (autoBatch) {\n    enhancerArray.push(autoBatchEnhancer(typeof autoBatch === 'object' ? autoBatch : undefined));\n  }\n  return enhancerArray as any;\n};","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { Draft } from 'immer';\nimport { produce as createNextState, isDraft, isDraftable } from 'immer';\nimport type { Action, Reducer, UnknownAction } from 'redux';\nimport type { ActionReducerMapBuilder } from './mapBuilders';\nimport { executeReducerBuilderCallback } from './mapBuilders';\nimport type { NoInfer, TypeGuard } from './tsHelpers';\nimport { freezeDraftable } from './utils';\n\n/**\n * Defines a mapping from action types to corresponding action object shapes.\n *\n * @deprecated This should not be used manually - it is only used for internal\n *             inference purposes and should not have any further value.\n *             It might be removed in the future.\n * @public\n */\nexport type Actions<T extends keyof any = string> = Record<T, Action>;\nexport type ActionMatcherDescription<S, A extends Action> = {\n  matcher: TypeGuard<A>;\n  reducer: CaseReducer<S, NoInfer<A>>;\n};\nexport type ReadonlyActionMatcherDescriptionCollection<S> = ReadonlyArray<ActionMatcherDescription<S, any>>;\nexport type ActionMatcherDescriptionCollection<S> = Array<ActionMatcherDescription<S, any>>;\n\n/**\n * A *case reducer* is a reducer function for a specific action type. Case\n * reducers can be composed to full reducers using `createReducer()`.\n *\n * Unlike a normal Redux reducer, a case reducer is never called with an\n * `undefined` state to determine the initial state. Instead, the initial\n * state is explicitly specified as an argument to `createReducer()`.\n *\n * In addition, a case reducer can choose to mutate the passed-in `state`\n * value directly instead of returning a new state. This does not actually\n * cause the store state to be mutated directly; instead, thanks to\n * [immer](https://github.com/mweststrate/immer), the mutations are\n * translated to copy operations that result in a new state.\n *\n * @public\n */\nexport type CaseReducer<S = any, A extends Action = UnknownAction> = (state: Draft<S>, action: A) => NoInfer<S> | void | Draft<NoInfer<S>>;\n\n/**\n * A mapping from action types to case reducers for `createReducer()`.\n *\n * @deprecated This should not be used manually - it is only used\n *             for internal inference purposes and using it manually\n *             would lead to type erasure.\n *             It might be removed in the future.\n * @public\n */\nexport type CaseReducers<S, AS extends Actions> = { [T in keyof AS]: AS[T] extends Action ? CaseReducer<S, AS[T]> : void };\nexport type NotFunction<T> = T extends Function ? never : T;\nfunction isStateFunction<S>(x: unknown): x is () => S {\n  return typeof x === 'function';\n}\nexport type ReducerWithInitialState<S extends NotFunction<any>> = Reducer<S> & {\n  getInitialState: () => S;\n};\n\n/**\n * A utility function that allows defining a reducer as a mapping from action\n * type to *case reducer* functions that handle these action types. The\n * reducer's initial state is passed as the first argument.\n *\n * @remarks\n * The body of every case reducer is implicitly wrapped with a call to\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\n * This means that rather than returning a new state object, you can also\n * mutate the passed-in state object directly; these mutations will then be\n * automatically and efficiently translated into copies, giving you both\n * convenience and immutability.\n *\n * @overloadSummary\n * This function accepts a callback that receives a `builder` object as its argument.\n * That builder provides `addCase`, `addMatcher` and `addDefaultCase` functions that may be\n * called to define what actions this reducer will handle.\n *\n * @param initialState - `State | (() => State)`: The initial state that should be used when the reducer is called the first time. This may also be a \"lazy initializer\" function, which should return an initial state value when called. This will be used whenever the reducer is called with `undefined` as its state value, and is primarily useful for cases like reading initial state from `localStorage`.\n * @param builderCallback - `(builder: Builder) => void` A callback that receives a *builder* object to define\n *   case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\n * @example\n```ts\nimport {\n  createAction,\n  createReducer,\n  UnknownAction,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\n\nconst increment = createAction<number>(\"increment\");\nconst decrement = createAction<number>(\"decrement\");\n\nfunction isActionWithNumberPayload(\n  action: UnknownAction\n): action is PayloadAction<number> {\n  return typeof action.payload === \"number\";\n}\n\nconst reducer = createReducer(\n  {\n    counter: 0,\n    sumOfNumberPayloads: 0,\n    unhandledActions: 0,\n  },\n  (builder) => {\n    builder\n      .addCase(increment, (state, action) => {\n        // action is inferred correctly here\n        state.counter += action.payload;\n      })\n      // You can chain calls, or have separate `builder.addCase()` lines each time\n      .addCase(decrement, (state, action) => {\n        state.counter -= action.payload;\n      })\n      // You can apply a \"matcher function\" to incoming actions\n      .addMatcher(isActionWithNumberPayload, (state, action) => {})\n      // and provide a default case if no other handlers matched\n      .addDefaultCase((state, action) => {});\n  }\n);\n```\n * @public\n */\nexport function createReducer<S extends NotFunction<any>>(initialState: S | (() => S), mapOrBuilderCallback: (builder: ActionReducerMapBuilder<S>) => void): ReducerWithInitialState<S> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof mapOrBuilderCallback === 'object') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(8) : \"The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer\");\n    }\n  }\n  let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);\n\n  // Ensure the initial state gets frozen either way (if draftable)\n  let getInitialState: () => S;\n  if (isStateFunction(initialState)) {\n    getInitialState = () => freezeDraftable(initialState());\n  } else {\n    const frozenInitialState = freezeDraftable(initialState);\n    getInitialState = () => frozenInitialState;\n  }\n  function reducer(state = getInitialState(), action: any): S {\n    let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({\n      matcher\n    }) => matcher(action)).map(({\n      reducer\n    }) => reducer)];\n    if (caseReducers.filter(cr => !!cr).length === 0) {\n      caseReducers = [finalDefaultCaseReducer];\n    }\n    return caseReducers.reduce((previousState, caseReducer): S => {\n      if (caseReducer) {\n        if (isDraft(previousState)) {\n          // If it's already a draft, we must already be inside a `createNextState` call,\n          // likely because this is being wrapped in `createReducer`, `createSlice`, or nested\n          // inside an existing draft. It's safe to just pass the draft to the mutator.\n          const draft = previousState as Draft<S>; // We can assume this is already a draft\n          const result = caseReducer(draft, action);\n          if (result === undefined) {\n            return previousState;\n          }\n          return result as S;\n        } else if (!isDraftable(previousState)) {\n          // If state is not draftable (ex: a primitive, such as 0), we want to directly\n          // return the caseReducer func and not wrap it with produce.\n          const result = caseReducer(previousState as any, action);\n          if (result === undefined) {\n            if (previousState === null) {\n              return previousState;\n            }\n            throw Error('A case reducer on a non-draftable value must not return undefined');\n          }\n          return result as S;\n        } else {\n          // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\n          // than an Immutable<S>, and TypeScript cannot find out how to reconcile\n          // these two types.\n          return createNextState(previousState, (draft: Draft<S>) => {\n            return caseReducer(draft, action);\n          });\n        }\n      }\n      return previousState;\n    }, state);\n  }\n  reducer.getInitialState = getInitialState;\n  return reducer as ReducerWithInitialState<S>;\n}","import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3, formatProdErrorMessage as _formatProdErrorMessage4, formatProdErrorMessage as _formatProdErrorMessage5, formatProdErrorMessage as _formatProdErrorMessage6 } from \"@reduxjs/toolkit\";\nimport type { Action } from 'redux';\nimport type { CaseReducer, CaseReducers, ActionMatcherDescriptionCollection } from './createReducer';\nimport type { TypeGuard } from './tsHelpers';\nexport type TypedActionCreator<Type extends string> = {\n  (...args: any[]): Action<Type>;\n  type: Type;\n};\n\n/**\n * A builder for an action <-> reducer map.\n *\n * @public\n */\nexport interface ActionReducerMapBuilder<State> {\n  /**\n   * Adds a case reducer to handle a single exact action type.\n   * @remarks\n   * All calls to `builder.addCase` must come before any calls to `builder.addMatcher` or `builder.addDefaultCase`.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<ActionCreator extends TypedActionCreator<string>>(actionCreator: ActionCreator, reducer: CaseReducer<State, ReturnType<ActionCreator>>): ActionReducerMapBuilder<State>;\n  /**\n   * Adds a case reducer to handle a single exact action type.\n   * @remarks\n   * All calls to `builder.addCase` must come before any calls to `builder.addMatcher` or `builder.addDefaultCase`.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<Type extends string, A extends Action<Type>>(type: Type, reducer: CaseReducer<State, A>): ActionReducerMapBuilder<State>;\n\n  /**\n   * Allows you to match your incoming actions against your own filter function instead of only the `action.type` property.\n   * @remarks\n   * If multiple matcher reducers match, all of them will be executed in the order\n   * they were defined in - even if a case reducer already matched.\n   * All calls to `builder.addMatcher` must come after any calls to `builder.addCase` and before any calls to `builder.addDefaultCase`.\n   * @param matcher - A matcher function. In TypeScript, this should be a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates)\n   *   function\n   * @param reducer - The actual case reducer function.\n   *\n   * @example\n  ```ts\n  import {\n  createAction,\n  createReducer,\n  AsyncThunk,\n  UnknownAction,\n  } from \"@reduxjs/toolkit\";\n  type GenericAsyncThunk = AsyncThunk<unknown, unknown, any>;\n  type PendingAction = ReturnType<GenericAsyncThunk[\"pending\"]>;\n  type RejectedAction = ReturnType<GenericAsyncThunk[\"rejected\"]>;\n  type FulfilledAction = ReturnType<GenericAsyncThunk[\"fulfilled\"]>;\n  const initialState: Record<string, string> = {};\n  const resetAction = createAction(\"reset-tracked-loading-state\");\n  function isPendingAction(action: UnknownAction): action is PendingAction {\n  return typeof action.type === \"string\" && action.type.endsWith(\"/pending\");\n  }\n  const reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(resetAction, () => initialState)\n    // matcher can be defined outside as a type predicate function\n    .addMatcher(isPendingAction, (state, action) => {\n      state[action.meta.requestId] = \"pending\";\n    })\n    .addMatcher(\n      // matcher can be defined inline as a type predicate function\n      (action): action is RejectedAction => action.type.endsWith(\"/rejected\"),\n      (state, action) => {\n        state[action.meta.requestId] = \"rejected\";\n      }\n    )\n    // matcher can just return boolean and the matcher can receive a generic argument\n    .addMatcher<FulfilledAction>(\n      (action) => action.type.endsWith(\"/fulfilled\"),\n      (state, action) => {\n        state[action.meta.requestId] = \"fulfilled\";\n      }\n    );\n  });\n  ```\n   */\n  addMatcher<A>(matcher: TypeGuard<A> | ((action: any) => boolean), reducer: CaseReducer<State, A extends Action ? A : A & Action>): Omit<ActionReducerMapBuilder<State>, 'addCase'>;\n\n  /**\n   * Adds a \"default case\" reducer that is executed if no case reducer and no matcher\n   * reducer was executed for this action.\n   * @param reducer - The fallback \"default case\" reducer function.\n   *\n   * @example\n  ```ts\n  import { createReducer } from '@reduxjs/toolkit'\n  const initialState = { otherActions: 0 }\n  const reducer = createReducer(initialState, builder => {\n  builder\n    // .addCase(...)\n    // .addMatcher(...)\n    .addDefaultCase((state, action) => {\n      state.otherActions++\n    })\n  })\n  ```\n   */\n  addDefaultCase(reducer: CaseReducer<State, Action>): {};\n}\nexport function executeReducerBuilderCallback<S>(builderCallback: (builder: ActionReducerMapBuilder<S>) => void): [CaseReducers<S, any>, ActionMatcherDescriptionCollection<S>, CaseReducer<S, Action> | undefined] {\n  const actionsMap: CaseReducers<S, any> = {};\n  const actionMatchers: ActionMatcherDescriptionCollection<S> = [];\n  let defaultCaseReducer: CaseReducer<S, Action> | undefined;\n  const builder = {\n    addCase(typeOrActionCreator: string | TypedActionCreator<any>, reducer: CaseReducer<S>) {\n      if (process.env.NODE_ENV !== 'production') {\n        /*\n         to keep the definition by the user in line with actual behavior,\n         we enforce `addCase` to always be called before calling `addMatcher`\n         as matching cases take precedence over matchers\n         */\n        if (actionMatchers.length > 0) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(26) : '`builder.addCase` should only be called before calling `builder.addMatcher`');\n        }\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(27) : '`builder.addCase` should only be called before calling `builder.addDefaultCase`');\n        }\n      }\n      const type = typeof typeOrActionCreator === 'string' ? typeOrActionCreator : typeOrActionCreator.type;\n      if (!type) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(28) : '`builder.addCase` cannot be called with an empty action type');\n      }\n      if (type in actionsMap) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(29) : '`builder.addCase` cannot be called with two reducers for the same action type ' + `'${type}'`);\n      }\n      actionsMap[type] = reducer;\n      return builder;\n    },\n    addMatcher<A>(matcher: TypeGuard<A>, reducer: CaseReducer<S, A extends Action ? A : A & Action>) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(30) : '`builder.addMatcher` should only be called before calling `builder.addDefaultCase`');\n        }\n      }\n      actionMatchers.push({\n        matcher,\n        reducer\n      });\n      return builder;\n    },\n    addDefaultCase(reducer: CaseReducer<S, Action>) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (defaultCaseReducer) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(31) : '`builder.addDefaultCase` can only be called once');\n        }\n      }\n      defaultCaseReducer = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return [actionsMap, actionMatchers, defaultCaseReducer];\n}","import type { ActionFromMatcher, Matcher, UnionToIntersection } from './tsHelpers';\nimport { hasMatchFunction } from './tsHelpers';\nimport type { AsyncThunk, AsyncThunkFulfilledActionCreator, AsyncThunkPendingActionCreator, AsyncThunkRejectedActionCreator } from './createAsyncThunk';\n\n/** @public */\nexport type ActionMatchingAnyOf<Matchers extends Matcher<any>[]> = ActionFromMatcher<Matchers[number]>;\n\n/** @public */\nexport type ActionMatchingAllOf<Matchers extends Matcher<any>[]> = UnionToIntersection<ActionMatchingAnyOf<Matchers>>;\nconst matches = (matcher: Matcher<any>, action: any) => {\n  if (hasMatchFunction(matcher)) {\n    return matcher.match(action);\n  } else {\n    return matcher(action);\n  }\n};\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action matches any one of the supplied type guards or action\n * creators.\n *\n * @param matchers The type guards or action creators to match against.\n *\n * @public\n */\nexport function isAnyOf<Matchers extends Matcher<any>[]>(...matchers: Matchers) {\n  return (action: any): action is ActionMatchingAnyOf<Matchers> => {\n    return matchers.some(matcher => matches(matcher, action));\n  };\n}\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action matches all of the supplied type guards or action\n * creators.\n *\n * @param matchers The type guards or action creators to match against.\n *\n * @public\n */\nexport function isAllOf<Matchers extends Matcher<any>[]>(...matchers: Matchers) {\n  return (action: any): action is ActionMatchingAllOf<Matchers> => {\n    return matchers.every(matcher => matches(matcher, action));\n  };\n}\n\n/**\n * @param action A redux action\n * @param validStatus An array of valid meta.requestStatus values\n *\n * @internal\n */\nexport function hasExpectedRequestMetadata(action: any, validStatus: readonly string[]) {\n  if (!action || !action.meta) return false;\n  const hasValidRequestId = typeof action.meta.requestId === 'string';\n  const hasValidRequestStatus = validStatus.indexOf(action.meta.requestStatus) > -1;\n  return hasValidRequestId && hasValidRequestStatus;\n}\nfunction isAsyncThunkArray(a: [any] | AnyAsyncThunk[]): a is AnyAsyncThunk[] {\n  return typeof a[0] === 'function' && 'pending' in a[0] && 'fulfilled' in a[0] && 'rejected' in a[0];\n}\nexport type UnknownAsyncThunkPendingAction = ReturnType<AsyncThunkPendingActionCreator<unknown>>;\nexport type PendingActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['pending']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is pending.\n *\n * @public\n */\nexport function isPending(): (action: any) => action is UnknownAsyncThunkPendingAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is pending.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isPending<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is PendingActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a pending thunk action\n * @public\n */\nexport function isPending(action: any): action is UnknownAsyncThunkPendingAction;\nexport function isPending<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['pending']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isPending()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.pending));\n}\nexport type UnknownAsyncThunkRejectedAction = ReturnType<AsyncThunkRejectedActionCreator<unknown, unknown>>;\nexport type RejectedActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['rejected']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is rejected.\n *\n * @public\n */\nexport function isRejected(): (action: any) => action is UnknownAsyncThunkRejectedAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is rejected.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isRejected<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is RejectedActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a rejected thunk action\n * @public\n */\nexport function isRejected(action: any): action is UnknownAsyncThunkRejectedAction;\nexport function isRejected<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['rejected']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejected()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.rejected));\n}\nexport type UnknownAsyncThunkRejectedWithValueAction = ReturnType<AsyncThunkRejectedActionCreator<unknown, unknown>>;\nexport type RejectedWithValueActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['rejected']> & (T extends AsyncThunk<any, any, {\n  rejectValue: infer RejectedValue;\n}> ? {\n  payload: RejectedValue;\n} : unknown);\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is rejected with value.\n *\n * @public\n */\nexport function isRejectedWithValue(): (action: any) => action is UnknownAsyncThunkRejectedAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is rejected with value.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isRejectedWithValue<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is RejectedWithValueActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a rejected thunk action with value\n * @public\n */\nexport function isRejectedWithValue(action: any): action is UnknownAsyncThunkRejectedAction;\nexport function isRejectedWithValue<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  const hasFlag = (action: any): action is any => {\n    return action && action.meta && action.meta.rejectedWithValue;\n  };\n  if (asyncThunks.length === 0) {\n    return isAllOf(isRejected(...asyncThunks), hasFlag);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isRejectedWithValue()(asyncThunks[0]);\n  }\n  return isAllOf(isRejected(...asyncThunks), hasFlag);\n}\nexport type UnknownAsyncThunkFulfilledAction = ReturnType<AsyncThunkFulfilledActionCreator<unknown, unknown>>;\nexport type FulfilledActionFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['fulfilled']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator, and that\n * the action is fulfilled.\n *\n * @public\n */\nexport function isFulfilled(): (action: any) => action is UnknownAsyncThunkFulfilledAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators,\n * and that the action is fulfilled.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isFulfilled<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is FulfilledActionFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a fulfilled thunk action\n * @public\n */\nexport function isFulfilled(action: any): action is UnknownAsyncThunkFulfilledAction;\nexport function isFulfilled<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['fulfilled']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isFulfilled()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.map(asyncThunk => asyncThunk.fulfilled));\n}\nexport type UnknownAsyncThunkAction = UnknownAsyncThunkPendingAction | UnknownAsyncThunkRejectedAction | UnknownAsyncThunkFulfilledAction;\nexport type AnyAsyncThunk = {\n  pending: {\n    match: (action: any) => action is any;\n  };\n  fulfilled: {\n    match: (action: any) => action is any;\n  };\n  rejected: {\n    match: (action: any) => action is any;\n  };\n};\nexport type ActionsFromAsyncThunk<T extends AnyAsyncThunk> = ActionFromMatcher<T['pending']> | ActionFromMatcher<T['fulfilled']> | ActionFromMatcher<T['rejected']>;\n\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action was created by an async thunk action creator.\n *\n * @public\n */\nexport function isAsyncThunkAction(): (action: any) => action is UnknownAsyncThunkAction;\n/**\n * A higher-order function that returns a function that may be used to check\n * whether an action belongs to one of the provided async thunk action creators.\n *\n * @param asyncThunks (optional) The async thunk action creators to match against.\n *\n * @public\n */\nexport function isAsyncThunkAction<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks): (action: any) => action is ActionsFromAsyncThunk<AsyncThunks[number]>;\n/**\n * Tests if `action` is a thunk action\n * @public\n */\nexport function isAsyncThunkAction(action: any): action is UnknownAsyncThunkAction;\nexport function isAsyncThunkAction<AsyncThunks extends [AnyAsyncThunk, ...AnyAsyncThunk[]]>(...asyncThunks: AsyncThunks | [any]) {\n  if (asyncThunks.length === 0) {\n    return (action: any) => hasExpectedRequestMetadata(action, ['pending', 'fulfilled', 'rejected']);\n  }\n  if (!isAsyncThunkArray(asyncThunks)) {\n    return isAsyncThunkAction()(asyncThunks[0]);\n  }\n  return isAnyOf(...asyncThunks.flatMap(asyncThunk => [asyncThunk.pending, asyncThunk.rejected, asyncThunk.fulfilled]));\n}","// Borrowed from https://github.com/ai/nanoid/blob/3.0.2/non-secure/index.js\n// This alphabet uses `A-Za-z0-9_-` symbols. A genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\n\n/**\r\n *\r\n * @public\r\n */\nexport let nanoid = (size = 21) => {\n  let id = '';\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  let i = size;\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n  return id;\n};","import type { Dispatch, UnknownAction } from 'redux';\nimport type { ThunkDispatch } from 'redux-thunk';\nimport type { ActionCreatorWithPreparedPayload } from './createAction';\nimport { createAction } from './createAction';\nimport { isAnyOf } from './matchers';\nimport { nanoid } from './nanoid';\nimport type { FallbackIfUnknown, Id, IsAny, IsUnknown, SafePromise } from './tsHelpers';\nexport type BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = unknown, RejectedMeta = unknown, FulfilledMeta = unknown> = {\n  dispatch: D;\n  getState: () => S;\n  extra: E;\n  requestId: string;\n  signal: AbortSignal;\n  abort: (reason?: string) => void;\n  rejectWithValue: IsUnknown<RejectedMeta, (value: RejectedValue) => RejectWithValue<RejectedValue, RejectedMeta>, (value: RejectedValue, meta: RejectedMeta) => RejectWithValue<RejectedValue, RejectedMeta>>;\n  fulfillWithValue: IsUnknown<FulfilledMeta, <FulfilledValue>(value: FulfilledValue) => FulfilledValue, <FulfilledValue>(value: FulfilledValue, meta: FulfilledMeta) => FulfillWithMeta<FulfilledValue, FulfilledMeta>>;\n};\n\n/**\n * @public\n */\nexport interface SerializedError {\n  name?: string;\n  message?: string;\n  stack?: string;\n  code?: string;\n}\nconst commonProperties: Array<keyof SerializedError> = ['name', 'message', 'stack', 'code'];\nclass RejectWithValue<Payload, RejectedMeta> {\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  private readonly _type!: 'RejectWithValue';\n  constructor(public readonly payload: Payload, public readonly meta: RejectedMeta) {}\n}\nclass FulfillWithMeta<Payload, FulfilledMeta> {\n  /*\n  type-only property to distinguish between RejectWithValue and FulfillWithMeta\n  does not exist at runtime\n  */\n  private readonly _type!: 'FulfillWithMeta';\n  constructor(public readonly payload: Payload, public readonly meta: FulfilledMeta) {}\n}\n\n/**\n * Serializes an error into a plain object.\n * Reworked from https://github.com/sindresorhus/serialize-error\n *\n * @public\n */\nexport const miniSerializeError = (value: any): SerializedError => {\n  if (typeof value === 'object' && value !== null) {\n    const simpleError: SerializedError = {};\n    for (const property of commonProperties) {\n      if (typeof value[property] === 'string') {\n        simpleError[property] = value[property];\n      }\n    }\n    return simpleError;\n  }\n  return {\n    message: String(value)\n  };\n};\nexport type AsyncThunkConfig = {\n  state?: unknown;\n  dispatch?: ThunkDispatch<unknown, unknown, UnknownAction>;\n  extra?: unknown;\n  rejectValue?: unknown;\n  serializedErrorType?: unknown;\n  pendingMeta?: unknown;\n  fulfilledMeta?: unknown;\n  rejectedMeta?: unknown;\n};\nexport type GetState<ThunkApiConfig> = ThunkApiConfig extends {\n  state: infer State;\n} ? State : unknown;\ntype GetExtra<ThunkApiConfig> = ThunkApiConfig extends {\n  extra: infer Extra;\n} ? Extra : unknown;\ntype GetDispatch<ThunkApiConfig> = ThunkApiConfig extends {\n  dispatch: infer Dispatch;\n} ? FallbackIfUnknown<Dispatch, ThunkDispatch<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, UnknownAction>> : ThunkDispatch<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, UnknownAction>;\nexport type GetThunkAPI<ThunkApiConfig> = BaseThunkAPI<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, GetDispatch<ThunkApiConfig>, GetRejectValue<ThunkApiConfig>, GetRejectedMeta<ThunkApiConfig>, GetFulfilledMeta<ThunkApiConfig>>;\ntype GetRejectValue<ThunkApiConfig> = ThunkApiConfig extends {\n  rejectValue: infer RejectValue;\n} ? RejectValue : unknown;\ntype GetPendingMeta<ThunkApiConfig> = ThunkApiConfig extends {\n  pendingMeta: infer PendingMeta;\n} ? PendingMeta : unknown;\ntype GetFulfilledMeta<ThunkApiConfig> = ThunkApiConfig extends {\n  fulfilledMeta: infer FulfilledMeta;\n} ? FulfilledMeta : unknown;\ntype GetRejectedMeta<ThunkApiConfig> = ThunkApiConfig extends {\n  rejectedMeta: infer RejectedMeta;\n} ? RejectedMeta : unknown;\ntype GetSerializedErrorType<ThunkApiConfig> = ThunkApiConfig extends {\n  serializedErrorType: infer GetSerializedErrorType;\n} ? GetSerializedErrorType : SerializedError;\ntype MaybePromise<T> = T | Promise<T> | (T extends any ? Promise<T> : never);\n\n/**\n * A type describing the return value of the `payloadCreator` argument to `createAsyncThunk`.\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\n *\n * @public\n */\nexport type AsyncThunkPayloadCreatorReturnValue<Returned, ThunkApiConfig extends AsyncThunkConfig> = MaybePromise<IsUnknown<GetFulfilledMeta<ThunkApiConfig>, Returned, FulfillWithMeta<Returned, GetFulfilledMeta<ThunkApiConfig>>> | RejectWithValue<GetRejectValue<ThunkApiConfig>, GetRejectedMeta<ThunkApiConfig>>>;\n/**\n * A type describing the `payloadCreator` argument to `createAsyncThunk`.\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\n *\n * @public\n */\nexport type AsyncThunkPayloadCreator<Returned, ThunkArg = void, ThunkApiConfig extends AsyncThunkConfig = {}> = (arg: ThunkArg, thunkAPI: GetThunkAPI<ThunkApiConfig>) => AsyncThunkPayloadCreatorReturnValue<Returned, ThunkApiConfig>;\n\n/**\n * A ThunkAction created by `createAsyncThunk`.\n * Dispatching it returns a Promise for either a\n * fulfilled or rejected action.\n * Also, the returned value contains an `abort()` method\n * that allows the asyncAction to be cancelled from the outside.\n *\n * @public\n */\nexport type AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig> = (dispatch: NonNullable<GetDispatch<ThunkApiConfig>>, getState: () => GetState<ThunkApiConfig>, extra: GetExtra<ThunkApiConfig>) => SafePromise<ReturnType<AsyncThunkFulfilledActionCreator<Returned, ThunkArg>> | ReturnType<AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig>>> & {\n  abort: (reason?: string) => void;\n  requestId: string;\n  arg: ThunkArg;\n  unwrap: () => Promise<Returned>;\n};\n\n/**\n * Config provided when calling the async thunk action creator.\n */\nexport interface AsyncThunkDispatchConfig {\n  /**\n   * An external `AbortSignal` that will be tracked by the internal `AbortSignal`.\n   */\n  signal?: AbortSignal;\n}\ntype AsyncThunkActionCreator<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig> = IsAny<ThunkArg,\n// any handling\n(arg: ThunkArg, config?: AsyncThunkDispatchConfig) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\n// unknown handling\nunknown extends ThunkArg ? (arg: ThunkArg, config?: AsyncThunkDispatchConfig) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument not specified or specified as void or undefined\n: [ThunkArg] extends [void] | [undefined] ? (arg?: undefined, config?: AsyncThunkDispatchConfig) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument contains void\n: [void] extends [ThunkArg] // make optional\n? (arg?: ThunkArg, config?: AsyncThunkDispatchConfig) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument contains undefined\n: [undefined] extends [ThunkArg] ? WithStrictNullChecks<\n// with strict nullChecks: make optional\n(arg?: ThunkArg, config?: AsyncThunkDispatchConfig) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\n// without strict null checks this will match everything, so don't make it optional\n(arg: ThunkArg, config?: AsyncThunkDispatchConfig) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>> // default case: normal argument\n: (arg: ThunkArg, config?: AsyncThunkDispatchConfig) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>>;\n\n/**\n * Options object for `createAsyncThunk`.\n *\n * @public\n */\nexport type AsyncThunkOptions<ThunkArg = void, ThunkApiConfig extends AsyncThunkConfig = {}> = {\n  /**\n   * A method to control whether the asyncThunk should be executed. Has access to the\n   * `arg`, `api.getState()` and `api.extra` arguments.\n   *\n   * @returns `false` if it should be skipped\n   */\n  condition?(arg: ThunkArg, api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>): MaybePromise<boolean | undefined>;\n  /**\n   * If `condition` returns `false`, the asyncThunk will be skipped.\n   * This option allows you to control whether a `rejected` action with `meta.condition == false`\n   * will be dispatched or not.\n   *\n   * @default `false`\n   */\n  dispatchConditionRejection?: boolean;\n  serializeError?: (x: unknown) => GetSerializedErrorType<ThunkApiConfig>;\n\n  /**\n   * A function to use when generating the `requestId` for the request sequence.\n   *\n   * @default `nanoid`\n   */\n  idGenerator?: (arg: ThunkArg) => string;\n} & IsUnknown<GetPendingMeta<ThunkApiConfig>, {\n  /**\n   * A method to generate additional properties to be added to `meta` of the pending action.\n   *\n   * Using this optional overload will not modify the types correctly, this overload is only in place to support JavaScript users.\n   * Please use the `ThunkApiConfig` parameter `pendingMeta` to get access to a correctly typed overload\n   */\n  getPendingMeta?(base: {\n    arg: ThunkArg;\n    requestId: string;\n  }, api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>): GetPendingMeta<ThunkApiConfig>;\n}, {\n  /**\n   * A method to generate additional properties to be added to `meta` of the pending action.\n   */\n  getPendingMeta(base: {\n    arg: ThunkArg;\n    requestId: string;\n  }, api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>): GetPendingMeta<ThunkApiConfig>;\n}>;\nexport type AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig = {}> = ActionCreatorWithPreparedPayload<[string, ThunkArg, GetPendingMeta<ThunkApiConfig>?], undefined, string, never, {\n  arg: ThunkArg;\n  requestId: string;\n  requestStatus: 'pending';\n} & GetPendingMeta<ThunkApiConfig>>;\nexport type AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig = {}> = ActionCreatorWithPreparedPayload<[Error | null, string, ThunkArg, GetRejectValue<ThunkApiConfig>?, GetRejectedMeta<ThunkApiConfig>?], GetRejectValue<ThunkApiConfig> | undefined, string, GetSerializedErrorType<ThunkApiConfig>, {\n  arg: ThunkArg;\n  requestId: string;\n  requestStatus: 'rejected';\n  aborted: boolean;\n  condition: boolean;\n} & (({\n  rejectedWithValue: false;\n} & { [K in keyof GetRejectedMeta<ThunkApiConfig>]?: undefined }) | ({\n  rejectedWithValue: true;\n} & GetRejectedMeta<ThunkApiConfig>))>;\nexport type AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig = {}> = ActionCreatorWithPreparedPayload<[Returned, string, ThunkArg, GetFulfilledMeta<ThunkApiConfig>?], Returned, string, never, {\n  arg: ThunkArg;\n  requestId: string;\n  requestStatus: 'fulfilled';\n} & GetFulfilledMeta<ThunkApiConfig>>;\n\n/**\n * A type describing the return value of `createAsyncThunk`.\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\n *\n * @public\n */\nexport type AsyncThunk<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig> = AsyncThunkActionCreator<Returned, ThunkArg, ThunkApiConfig> & {\n  pending: AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig>;\n  rejected: AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig>;\n  fulfilled: AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig>;\n  // matchSettled?\n  settled: (action: any) => action is ReturnType<AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig> | AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig>>;\n  typePrefix: string;\n};\nexport type OverrideThunkApiConfigs<OldConfig, NewConfig> = Id<NewConfig & Omit<OldConfig, keyof NewConfig>>;\nexport type CreateAsyncThunkFunction<CurriedThunkApiConfig extends AsyncThunkConfig> = {\n  /**\n   *\n   * @param typePrefix\n   * @param payloadCreator\n   * @param options\n   *\n   * @public\n   */\n  // separate signature without `AsyncThunkConfig` for better inference\n  <Returned, ThunkArg = void>(typePrefix: string, payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, CurriedThunkApiConfig>, options?: AsyncThunkOptions<ThunkArg, CurriedThunkApiConfig>): AsyncThunk<Returned, ThunkArg, CurriedThunkApiConfig>;\n\n  /**\n   *\n   * @param typePrefix\n   * @param payloadCreator\n   * @param options\n   *\n   * @public\n   */\n  <Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig>(typePrefix: string, payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>, options?: AsyncThunkOptions<ThunkArg, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>): AsyncThunk<Returned, ThunkArg, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>;\n};\ntype CreateAsyncThunk<CurriedThunkApiConfig extends AsyncThunkConfig> = CreateAsyncThunkFunction<CurriedThunkApiConfig> & {\n  withTypes<ThunkApiConfig extends AsyncThunkConfig>(): CreateAsyncThunk<OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>;\n};\nconst externalAbortMessage = 'External signal was aborted';\nexport const createAsyncThunk = /* @__PURE__ */(() => {\n  function createAsyncThunk<Returned, ThunkArg, ThunkApiConfig extends AsyncThunkConfig>(typePrefix: string, payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>, options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>): AsyncThunk<Returned, ThunkArg, ThunkApiConfig> {\n    type RejectedValue = GetRejectValue<ThunkApiConfig>;\n    type PendingMeta = GetPendingMeta<ThunkApiConfig>;\n    type FulfilledMeta = GetFulfilledMeta<ThunkApiConfig>;\n    type RejectedMeta = GetRejectedMeta<ThunkApiConfig>;\n    const fulfilled: AsyncThunkFulfilledActionCreator<Returned, ThunkArg, ThunkApiConfig> = createAction(typePrefix + '/fulfilled', (payload: Returned, requestId: string, arg: ThunkArg, meta?: FulfilledMeta) => ({\n      payload,\n      meta: {\n        ...(meta as any || {}),\n        arg,\n        requestId,\n        requestStatus: 'fulfilled' as const\n      }\n    }));\n    const pending: AsyncThunkPendingActionCreator<ThunkArg, ThunkApiConfig> = createAction(typePrefix + '/pending', (requestId: string, arg: ThunkArg, meta?: PendingMeta) => ({\n      payload: undefined,\n      meta: {\n        ...(meta as any || {}),\n        arg,\n        requestId,\n        requestStatus: 'pending' as const\n      }\n    }));\n    const rejected: AsyncThunkRejectedActionCreator<ThunkArg, ThunkApiConfig> = createAction(typePrefix + '/rejected', (error: Error | null, requestId: string, arg: ThunkArg, payload?: RejectedValue, meta?: RejectedMeta) => ({\n      payload,\n      error: (options && options.serializeError || miniSerializeError)(error || 'Rejected') as GetSerializedErrorType<ThunkApiConfig>,\n      meta: {\n        ...(meta as any || {}),\n        arg,\n        requestId,\n        rejectedWithValue: !!payload,\n        requestStatus: 'rejected' as const,\n        aborted: error?.name === 'AbortError',\n        condition: error?.name === 'ConditionError'\n      }\n    }));\n    function actionCreator(arg: ThunkArg, {\n      signal\n    }: AsyncThunkDispatchConfig = {}): AsyncThunkAction<Returned, ThunkArg, Required<ThunkApiConfig>> {\n      return (dispatch, getState, extra) => {\n        const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();\n        const abortController = new AbortController();\n        let abortHandler: (() => void) | undefined;\n        let abortReason: string | undefined;\n        function abort(reason?: string) {\n          abortReason = reason;\n          abortController.abort();\n        }\n        if (signal) {\n          if (signal.aborted) {\n            abort(externalAbortMessage);\n          } else {\n            signal.addEventListener('abort', () => abort(externalAbortMessage), {\n              once: true\n            });\n          }\n        }\n        const promise = async function () {\n          let finalAction: ReturnType<typeof fulfilled | typeof rejected>;\n          try {\n            let conditionResult = options?.condition?.(arg, {\n              getState,\n              extra\n            });\n            if (isThenable(conditionResult)) {\n              conditionResult = await conditionResult;\n            }\n            if (conditionResult === false || abortController.signal.aborted) {\n              // eslint-disable-next-line no-throw-literal\n              throw {\n                name: 'ConditionError',\n                message: 'Aborted due to condition callback returning false.'\n              };\n            }\n            const abortedPromise = new Promise<never>((_, reject) => {\n              abortHandler = () => {\n                reject({\n                  name: 'AbortError',\n                  message: abortReason || 'Aborted'\n                });\n              };\n              abortController.signal.addEventListener('abort', abortHandler);\n            });\n            dispatch(pending(requestId, arg, options?.getPendingMeta?.({\n              requestId,\n              arg\n            }, {\n              getState,\n              extra\n            })) as any);\n            finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n              dispatch,\n              getState,\n              extra,\n              requestId,\n              signal: abortController.signal,\n              abort,\n              rejectWithValue: ((value: RejectedValue, meta?: RejectedMeta) => {\n                return new RejectWithValue(value, meta);\n              }) as any,\n              fulfillWithValue: ((value: unknown, meta?: FulfilledMeta) => {\n                return new FulfillWithMeta(value, meta);\n              }) as any\n            })).then(result => {\n              if (result instanceof RejectWithValue) {\n                throw result;\n              }\n              if (result instanceof FulfillWithMeta) {\n                return fulfilled(result.payload, requestId, arg, result.meta);\n              }\n              return fulfilled(result as any, requestId, arg);\n            })]);\n          } catch (err) {\n            finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err as any, requestId, arg);\n          } finally {\n            if (abortHandler) {\n              abortController.signal.removeEventListener('abort', abortHandler);\n            }\n          }\n          // We dispatch the result action _after_ the catch, to avoid having any errors\n          // here get swallowed by the try/catch block,\n          // per https://twitter.com/dan_abramov/status/770914221638942720\n          // and https://github.com/reduxjs/redux-toolkit/blob/e85eb17b39a2118d859f7b7746e0f3fee523e089/docs/tutorials/advanced-tutorial.md#async-error-handling-logic-in-thunks\n\n          const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && (finalAction as any).meta.condition;\n          if (!skipDispatch) {\n            dispatch(finalAction as any);\n          }\n          return finalAction;\n        }();\n        return Object.assign(promise as SafePromise<any>, {\n          abort,\n          requestId,\n          arg,\n          unwrap() {\n            return promise.then<any>(unwrapResult);\n          }\n        });\n      };\n    }\n    return Object.assign(actionCreator as AsyncThunkActionCreator<Returned, ThunkArg, ThunkApiConfig>, {\n      pending,\n      rejected,\n      fulfilled,\n      settled: isAnyOf(rejected, fulfilled),\n      typePrefix\n    });\n  }\n  createAsyncThunk.withTypes = () => createAsyncThunk;\n  return createAsyncThunk as CreateAsyncThunk<AsyncThunkConfig>;\n})();\ninterface UnwrappableAction {\n  payload: any;\n  meta?: any;\n  error?: any;\n}\ntype UnwrappedActionPayload<T extends UnwrappableAction> = Exclude<T, {\n  error: any;\n}>['payload'];\n\n/**\n * @public\n */\nexport function unwrapResult<R extends UnwrappableAction>(action: R): UnwrappedActionPayload<R> {\n  if (action.meta && action.meta.rejectedWithValue) {\n    throw action.payload;\n  }\n  if (action.error) {\n    throw action.error;\n  }\n  return action.payload;\n}\ntype WithStrictNullChecks<True, False> = undefined extends boolean ? False : True;\nfunction isThenable(value: any): value is PromiseLike<any> {\n  return value !== null && typeof value === 'object' && typeof value.then === 'function';\n}","import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3, formatProdErrorMessage as _formatProdErrorMessage4, formatProdErrorMessage as _formatProdErrorMessage5, formatProdErrorMessage as _formatProdErrorMessage6, formatProdErrorMessage as _formatProdErrorMessage7, formatProdErrorMessage as _formatProdErrorMessage8 } from \"@reduxjs/toolkit\";\nimport type { Action, Reducer, UnknownAction } from 'redux';\nimport type { Selector } from 'reselect';\nimport type { InjectConfig } from './combineSlices';\nimport type { ActionCreatorWithoutPayload, PayloadAction, PayloadActionCreator, PrepareAction, _ActionCreatorWithPreparedPayload } from './createAction';\nimport { createAction } from './createAction';\nimport type { AsyncThunk, AsyncThunkConfig, AsyncThunkOptions, AsyncThunkPayloadCreator, OverrideThunkApiConfigs } from './createAsyncThunk';\nimport { createAsyncThunk as _createAsyncThunk } from './createAsyncThunk';\nimport type { ActionMatcherDescriptionCollection, CaseReducer, ReducerWithInitialState } from './createReducer';\nimport { createReducer } from './createReducer';\nimport type { ActionReducerMapBuilder, TypedActionCreator } from './mapBuilders';\nimport { executeReducerBuilderCallback } from './mapBuilders';\nimport type { Id, TypeGuard } from './tsHelpers';\nimport { getOrInsertComputed } from './utils';\nconst asyncThunkSymbol = /* @__PURE__ */Symbol.for('rtk-slice-createasyncthunk');\n// type is annotated because it's too long to infer\nexport const asyncThunkCreator: {\n  [asyncThunkSymbol]: typeof _createAsyncThunk;\n} = {\n  [asyncThunkSymbol]: _createAsyncThunk\n};\ntype InjectIntoConfig<NewReducerPath extends string> = InjectConfig & {\n  reducerPath?: NewReducerPath;\n};\n\n/**\n * The return value of `createSlice`\n *\n * @public\n */\nexport interface Slice<State = any, CaseReducers extends SliceCaseReducers<State> = SliceCaseReducers<State>, Name extends string = string, ReducerPath extends string = Name, Selectors extends SliceSelectors<State> = SliceSelectors<State>> {\n  /**\n   * The slice name.\n   */\n  name: Name;\n\n  /**\n   *  The slice reducer path.\n   */\n  reducerPath: ReducerPath;\n\n  /**\n   * The slice's reducer.\n   */\n  reducer: Reducer<State>;\n\n  /**\n   * Action creators for the types of actions that are handled by the slice\n   * reducer.\n   */\n  actions: CaseReducerActions<CaseReducers, Name>;\n\n  /**\n   * The individual case reducer functions that were passed in the `reducers` parameter.\n   * This enables reuse and testing if they were defined inline when calling `createSlice`.\n   */\n  caseReducers: SliceDefinedCaseReducers<CaseReducers>;\n\n  /**\n   * Provides access to the initial state value given to the slice.\n   * If a lazy state initializer was provided, it will be called and a fresh value returned.\n   */\n  getInitialState: () => State;\n\n  /**\n   * Get localised slice selectors (expects to be called with *just* the slice's state as the first parameter)\n   */\n  getSelectors(): Id<SliceDefinedSelectors<State, Selectors, State>>;\n\n  /**\n   * Get globalised slice selectors (`selectState` callback is expected to receive first parameter and return slice state)\n   */\n  getSelectors<RootState>(selectState: (rootState: RootState) => State): Id<SliceDefinedSelectors<State, Selectors, RootState>>;\n\n  /**\n   * Selectors that assume the slice's state is `rootState[slice.reducerPath]` (which is usually the case)\n   *\n   * Equivalent to `slice.getSelectors((state: RootState) => state[slice.reducerPath])`.\n   */\n  get selectors(): Id<SliceDefinedSelectors<State, Selectors, { [K in ReducerPath]: State }>>;\n\n  /**\n   * Inject slice into provided reducer (return value from `combineSlices`), and return injected slice.\n   */\n  injectInto<NewReducerPath extends string = ReducerPath>(this: this, injectable: {\n    inject: (slice: {\n      reducerPath: string;\n      reducer: Reducer;\n    }, config?: InjectConfig) => void;\n  }, config?: InjectIntoConfig<NewReducerPath>): InjectedSlice<State, CaseReducers, Name, NewReducerPath, Selectors>;\n\n  /**\n   * Select the slice state, using the slice's current reducerPath.\n   *\n   * Will throw an error if slice is not found.\n   */\n  selectSlice(state: { [K in ReducerPath]: State }): State;\n}\n\n/**\n * A slice after being called with `injectInto(reducer)`.\n *\n * Selectors can now be called with an `undefined` value, in which case they use the slice's initial state.\n */\ntype InjectedSlice<State = any, CaseReducers extends SliceCaseReducers<State> = SliceCaseReducers<State>, Name extends string = string, ReducerPath extends string = Name, Selectors extends SliceSelectors<State> = SliceSelectors<State>> = Omit<Slice<State, CaseReducers, Name, ReducerPath, Selectors>, 'getSelectors' | 'selectors'> & {\n  /**\n   * Get localised slice selectors (expects to be called with *just* the slice's state as the first parameter)\n   */\n  getSelectors(): Id<SliceDefinedSelectors<State, Selectors, State | undefined>>;\n\n  /**\n   * Get globalised slice selectors (`selectState` callback is expected to receive first parameter and return slice state)\n   */\n  getSelectors<RootState>(selectState: (rootState: RootState) => State | undefined): Id<SliceDefinedSelectors<State, Selectors, RootState>>;\n\n  /**\n   * Selectors that assume the slice's state is `rootState[slice.name]` (which is usually the case)\n   *\n   * Equivalent to `slice.getSelectors((state: RootState) => state[slice.name])`.\n   */\n  get selectors(): Id<SliceDefinedSelectors<State, Selectors, { [K in ReducerPath]?: State | undefined }>>;\n\n  /**\n   * Select the slice state, using the slice's current reducerPath.\n   *\n   * Returns initial state if slice is not found.\n   */\n  selectSlice(state: { [K in ReducerPath]?: State | undefined }): State;\n};\n\n/**\n * Options for `createSlice()`.\n *\n * @public\n */\nexport interface CreateSliceOptions<State = any, CR extends SliceCaseReducers<State> = SliceCaseReducers<State>, Name extends string = string, ReducerPath extends string = Name, Selectors extends SliceSelectors<State> = SliceSelectors<State>> {\n  /**\n   * The slice's name. Used to namespace the generated action types.\n   */\n  name: Name;\n\n  /**\n   * The slice's reducer path. Used when injecting into a combined slice reducer.\n   */\n  reducerPath?: ReducerPath;\n\n  /**\n   * The initial state that should be used when the reducer is called the first time. This may also be a \"lazy initializer\" function, which should return an initial state value when called. This will be used whenever the reducer is called with `undefined` as its state value, and is primarily useful for cases like reading initial state from `localStorage`.\n   */\n  initialState: State | (() => State);\n\n  /**\n   * A mapping from action types to action-type-specific *case reducer*\n   * functions. For every action type, a matching action creator will be\n   * generated using `createAction()`.\n   */\n  reducers: ValidateSliceCaseReducers<State, CR> | ((creators: ReducerCreators<State>) => CR);\n\n  /**\n   * A callback that receives a *builder* object to define\n   * case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\n   *\n   *\n   * @example\n  ```ts\n  import { createAction, createSlice, Action } from '@reduxjs/toolkit'\n  const incrementBy = createAction<number>('incrementBy')\n  const decrement = createAction('decrement')\n  interface RejectedAction extends Action {\n  error: Error\n  }\n  function isRejectedAction(action: Action): action is RejectedAction {\n  return action.type.endsWith('rejected')\n  }\n  createSlice({\n  name: 'counter',\n  initialState: 0,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(incrementBy, (state, action) => {\n        // action is inferred correctly here if using TS\n      })\n      // You can chain calls, or have separate `builder.addCase()` lines each time\n      .addCase(decrement, (state, action) => {})\n      // You can match a range of action types\n      .addMatcher(\n        isRejectedAction,\n        // `action` will be inferred as a RejectedAction due to isRejectedAction being defined as a type guard\n        (state, action) => {}\n      )\n      // and provide a default case if no other handlers matched\n      .addDefaultCase((state, action) => {})\n    }\n  })\n  ```\n   */\n  extraReducers?: (builder: ActionReducerMapBuilder<State>) => void;\n\n  /**\n   * A map of selectors that receive the slice's state and any additional arguments, and return a result.\n   */\n  selectors?: Selectors;\n}\nexport enum ReducerType {\n  reducer = 'reducer',\n  reducerWithPrepare = 'reducerWithPrepare',\n  asyncThunk = 'asyncThunk',\n}\ntype ReducerDefinition<T extends ReducerType = ReducerType> = {\n  _reducerDefinitionType: T;\n};\nexport type CaseReducerDefinition<S = any, A extends Action = UnknownAction> = CaseReducer<S, A> & ReducerDefinition<ReducerType.reducer>;\n\n/**\n * A CaseReducer with a `prepare` method.\n *\n * @public\n */\nexport type CaseReducerWithPrepare<State, Action extends PayloadAction> = {\n  reducer: CaseReducer<State, Action>;\n  prepare: PrepareAction<Action['payload']>;\n};\nexport interface CaseReducerWithPrepareDefinition<State, Action extends PayloadAction> extends CaseReducerWithPrepare<State, Action>, ReducerDefinition<ReducerType.reducerWithPrepare> {}\ntype AsyncThunkSliceReducerConfig<State, ThunkArg extends any, Returned = unknown, ThunkApiConfig extends AsyncThunkConfig = {}> = {\n  pending?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['pending']>>;\n  rejected?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['rejected']>>;\n  fulfilled?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['fulfilled']>>;\n  settled?: CaseReducer<State, ReturnType<AsyncThunk<Returned, ThunkArg, ThunkApiConfig>['rejected' | 'fulfilled']>>;\n  options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>;\n};\ntype AsyncThunkSliceReducerDefinition<State, ThunkArg extends any, Returned = unknown, ThunkApiConfig extends AsyncThunkConfig = {}> = AsyncThunkSliceReducerConfig<State, ThunkArg, Returned, ThunkApiConfig> & ReducerDefinition<ReducerType.asyncThunk> & {\n  payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>;\n};\n\n/**\n * Providing these as part of the config would cause circular types, so we disallow passing them\n */\ntype PreventCircular<ThunkApiConfig> = { [K in keyof ThunkApiConfig]: K extends 'state' | 'dispatch' ? never : ThunkApiConfig[K] };\ninterface AsyncThunkCreator<State, CurriedThunkApiConfig extends PreventCircular<AsyncThunkConfig> = PreventCircular<AsyncThunkConfig>> {\n  <Returned, ThunkArg = void>(payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, CurriedThunkApiConfig>, config?: AsyncThunkSliceReducerConfig<State, ThunkArg, Returned, CurriedThunkApiConfig>): AsyncThunkSliceReducerDefinition<State, ThunkArg, Returned, CurriedThunkApiConfig>;\n  <Returned, ThunkArg, ThunkApiConfig extends PreventCircular<AsyncThunkConfig> = {}>(payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>, config?: AsyncThunkSliceReducerConfig<State, ThunkArg, Returned, ThunkApiConfig>): AsyncThunkSliceReducerDefinition<State, ThunkArg, Returned, ThunkApiConfig>;\n  withTypes<ThunkApiConfig extends PreventCircular<AsyncThunkConfig>>(): AsyncThunkCreator<State, OverrideThunkApiConfigs<CurriedThunkApiConfig, ThunkApiConfig>>;\n}\nexport interface ReducerCreators<State> {\n  reducer(caseReducer: CaseReducer<State, PayloadAction>): CaseReducerDefinition<State, PayloadAction>;\n  reducer<Payload>(caseReducer: CaseReducer<State, PayloadAction<Payload>>): CaseReducerDefinition<State, PayloadAction<Payload>>;\n  asyncThunk: AsyncThunkCreator<State>;\n  preparedReducer<Prepare extends PrepareAction<any>>(prepare: Prepare, reducer: CaseReducer<State, ReturnType<_ActionCreatorWithPreparedPayload<Prepare>>>): {\n    _reducerDefinitionType: ReducerType.reducerWithPrepare;\n    prepare: Prepare;\n    reducer: CaseReducer<State, ReturnType<_ActionCreatorWithPreparedPayload<Prepare>>>;\n  };\n}\n\n/**\n * The type describing a slice's `reducers` option.\n *\n * @public\n */\nexport type SliceCaseReducers<State> = Record<string, ReducerDefinition> | Record<string, CaseReducer<State, PayloadAction<any>> | CaseReducerWithPrepare<State, PayloadAction<any, string, any, any>>>;\n\n/**\n * The type describing a slice's `selectors` option.\n */\nexport type SliceSelectors<State> = {\n  [K: string]: (sliceState: State, ...args: any[]) => any;\n};\ntype SliceActionType<SliceName extends string, ActionName extends keyof any> = ActionName extends string | number ? `${SliceName}/${ActionName}` : string;\n\n/**\n * Derives the slice's `actions` property from the `reducers` options\n *\n * @public\n */\nexport type CaseReducerActions<CaseReducers extends SliceCaseReducers<any>, SliceName extends string> = { [Type in keyof CaseReducers]: CaseReducers[Type] extends infer Definition ? Definition extends {\n  prepare: any;\n} ? ActionCreatorForCaseReducerWithPrepare<Definition, SliceActionType<SliceName, Type>> : Definition extends AsyncThunkSliceReducerDefinition<any, infer ThunkArg, infer Returned, infer ThunkApiConfig> ? AsyncThunk<Returned, ThunkArg, ThunkApiConfig> : Definition extends {\n  reducer: any;\n} ? ActionCreatorForCaseReducer<Definition['reducer'], SliceActionType<SliceName, Type>> : ActionCreatorForCaseReducer<Definition, SliceActionType<SliceName, Type>> : never };\n\n/**\n * Get a `PayloadActionCreator` type for a passed `CaseReducerWithPrepare`\n *\n * @internal\n */\ntype ActionCreatorForCaseReducerWithPrepare<CR extends {\n  prepare: any;\n}, Type extends string> = _ActionCreatorWithPreparedPayload<CR['prepare'], Type>;\n\n/**\n * Get a `PayloadActionCreator` type for a passed `CaseReducer`\n *\n * @internal\n */\ntype ActionCreatorForCaseReducer<CR, Type extends string> = CR extends ((state: any, action: infer Action) => any) ? Action extends {\n  payload: infer P;\n} ? PayloadActionCreator<P, Type> : ActionCreatorWithoutPayload<Type> : ActionCreatorWithoutPayload<Type>;\n\n/**\n * Extracts the CaseReducers out of a `reducers` object, even if they are\n * tested into a `CaseReducerWithPrepare`.\n *\n * @internal\n */\ntype SliceDefinedCaseReducers<CaseReducers extends SliceCaseReducers<any>> = { [Type in keyof CaseReducers]: CaseReducers[Type] extends infer Definition ? Definition extends AsyncThunkSliceReducerDefinition<any, any, any> ? Id<Pick<Required<Definition>, 'fulfilled' | 'rejected' | 'pending' | 'settled'>> : Definition extends {\n  reducer: infer Reducer;\n} ? Reducer : Definition : never };\ntype RemappedSelector<S extends Selector, NewState> = S extends Selector<any, infer R, infer P> ? Selector<NewState, R, P> & {\n  unwrapped: S;\n} : never;\n\n/**\n * Extracts the final selector type from the `selectors` object.\n *\n * Removes the `string` index signature from the default value.\n */\ntype SliceDefinedSelectors<State, Selectors extends SliceSelectors<State>, RootState> = { [K in keyof Selectors as string extends K ? never : K]: RemappedSelector<Selectors[K], RootState> };\n\n/**\n * Used on a SliceCaseReducers object.\n * Ensures that if a CaseReducer is a `CaseReducerWithPrepare`, that\n * the `reducer` and the `prepare` function use the same type of `payload`.\n *\n * Might do additional such checks in the future.\n *\n * This type is only ever useful if you want to write your own wrapper around\n * `createSlice`. Please don't use it otherwise!\n *\n * @public\n */\nexport type ValidateSliceCaseReducers<S, ACR extends SliceCaseReducers<S>> = ACR & { [T in keyof ACR]: ACR[T] extends {\n  reducer(s: S, action?: infer A): any;\n} ? {\n  prepare(...a: never[]): Omit<A, 'type'>;\n} : {} };\nfunction getType(slice: string, actionKey: string): string {\n  return `${slice}/${actionKey}`;\n}\ninterface BuildCreateSliceConfig {\n  creators?: {\n    asyncThunk?: typeof asyncThunkCreator;\n  };\n}\nexport function buildCreateSlice({\n  creators\n}: BuildCreateSliceConfig = {}) {\n  const cAT = creators?.asyncThunk?.[asyncThunkSymbol];\n  return function createSlice<State, CaseReducers extends SliceCaseReducers<State>, Name extends string, Selectors extends SliceSelectors<State>, ReducerPath extends string = Name>(options: CreateSliceOptions<State, CaseReducers, Name, ReducerPath, Selectors>): Slice<State, CaseReducers, Name, ReducerPath, Selectors> {\n    const {\n      name,\n      reducerPath = name as unknown as ReducerPath\n    } = options;\n    if (!name) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(11) : '`name` is a required option for createSlice');\n    }\n    if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n      if (options.initialState === undefined) {\n        console.error('You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`');\n      }\n    }\n    const reducers = (typeof options.reducers === 'function' ? options.reducers(buildReducerCreators<State>()) : options.reducers) || {};\n    const reducerNames = Object.keys(reducers);\n    const context: ReducerHandlingContext<State> = {\n      sliceCaseReducersByName: {},\n      sliceCaseReducersByType: {},\n      actionCreators: {},\n      sliceMatchers: []\n    };\n    const contextMethods: ReducerHandlingContextMethods<State> = {\n      addCase(typeOrActionCreator: string | TypedActionCreator<any>, reducer: CaseReducer<State>) {\n        const type = typeof typeOrActionCreator === 'string' ? typeOrActionCreator : typeOrActionCreator.type;\n        if (!type) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(12) : '`context.addCase` cannot be called with an empty action type');\n        }\n        if (type in context.sliceCaseReducersByType) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(13) : '`context.addCase` cannot be called with two reducers for the same action type: ' + type);\n        }\n        context.sliceCaseReducersByType[type] = reducer;\n        return contextMethods;\n      },\n      addMatcher(matcher, reducer) {\n        context.sliceMatchers.push({\n          matcher,\n          reducer\n        });\n        return contextMethods;\n      },\n      exposeAction(name, actionCreator) {\n        context.actionCreators[name] = actionCreator;\n        return contextMethods;\n      },\n      exposeCaseReducer(name, reducer) {\n        context.sliceCaseReducersByName[name] = reducer;\n        return contextMethods;\n      }\n    };\n    reducerNames.forEach(reducerName => {\n      const reducerDefinition = reducers[reducerName];\n      const reducerDetails: ReducerDetails = {\n        reducerName,\n        type: getType(name, reducerName),\n        createNotation: typeof options.reducers === 'function'\n      };\n      if (isAsyncThunkSliceReducerDefinition<State>(reducerDefinition)) {\n        handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);\n      } else {\n        handleNormalReducerDefinition<State>(reducerDetails, reducerDefinition as any, contextMethods);\n      }\n    });\n    function buildReducer() {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof options.extraReducers === 'object') {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(14) : \"The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice\");\n        }\n      }\n      const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = undefined] = typeof options.extraReducers === 'function' ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];\n      const finalCaseReducers = {\n        ...extraReducers,\n        ...context.sliceCaseReducersByType\n      };\n      return createReducer(options.initialState, builder => {\n        for (let key in finalCaseReducers) {\n          builder.addCase(key, finalCaseReducers[key] as CaseReducer<any>);\n        }\n        for (let sM of context.sliceMatchers) {\n          builder.addMatcher(sM.matcher, sM.reducer);\n        }\n        for (let m of actionMatchers) {\n          builder.addMatcher(m.matcher, m.reducer);\n        }\n        if (defaultCaseReducer) {\n          builder.addDefaultCase(defaultCaseReducer);\n        }\n      });\n    }\n    const selectSelf = (state: State) => state;\n    const injectedSelectorCache = new Map<boolean, WeakMap<(rootState: any) => State | undefined, Record<string, (rootState: any) => any>>>();\n    const injectedStateCache = new WeakMap<(rootState: any) => State, State>();\n    let _reducer: ReducerWithInitialState<State>;\n    function reducer(state: State | undefined, action: UnknownAction) {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer(state, action);\n    }\n    function getInitialState() {\n      if (!_reducer) _reducer = buildReducer();\n      return _reducer.getInitialState();\n    }\n    function makeSelectorProps<CurrentReducerPath extends string = ReducerPath>(reducerPath: CurrentReducerPath, injected = false): Pick<Slice<State, CaseReducers, Name, CurrentReducerPath, Selectors>, 'getSelectors' | 'selectors' | 'selectSlice' | 'reducerPath'> {\n      function selectSlice(state: { [K in CurrentReducerPath]: State }) {\n        let sliceState = state[reducerPath];\n        if (typeof sliceState === 'undefined') {\n          if (injected) {\n            sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);\n          } else if (process.env.NODE_ENV !== 'production') {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(15) : 'selectSlice returned undefined for an uninjected slice reducer');\n          }\n        }\n        return sliceState;\n      }\n      function getSelectors(selectState: (rootState: any) => State = selectSelf) {\n        const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => new WeakMap());\n        return getOrInsertComputed(selectorCache, selectState, () => {\n          const map: Record<string, Selector<any, any>> = {};\n          for (const [name, selector] of Object.entries(options.selectors ?? {})) {\n            map[name] = wrapSelector(selector, selectState, () => getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);\n          }\n          return map;\n        }) as any;\n      }\n      return {\n        reducerPath,\n        getSelectors,\n        get selectors() {\n          return getSelectors(selectSlice);\n        },\n        selectSlice\n      };\n    }\n    const slice: Slice<State, CaseReducers, Name, ReducerPath, Selectors> = {\n      name,\n      reducer,\n      actions: context.actionCreators as any,\n      caseReducers: context.sliceCaseReducersByName as any,\n      getInitialState,\n      ...makeSelectorProps(reducerPath),\n      injectInto(injectable, {\n        reducerPath: pathOpt,\n        ...config\n      } = {}) {\n        const newReducerPath = pathOpt ?? reducerPath;\n        injectable.inject({\n          reducerPath: newReducerPath,\n          reducer\n        }, config);\n        return {\n          ...slice,\n          ...makeSelectorProps(newReducerPath, true)\n        } as any;\n      }\n    };\n    return slice;\n  };\n}\nfunction wrapSelector<State, NewState, S extends Selector<State>>(selector: S, selectState: Selector<NewState, State>, getInitialState: () => State, injected?: boolean) {\n  function wrapper(rootState: NewState, ...args: any[]) {\n    let sliceState = selectState(rootState);\n    if (typeof sliceState === 'undefined') {\n      if (injected) {\n        sliceState = getInitialState();\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(16) : 'selectState returned undefined for an uninjected slice reducer');\n      }\n    }\n    return selector(sliceState, ...args);\n  }\n  wrapper.unwrapped = selector;\n  return wrapper as RemappedSelector<S, NewState>;\n}\n\n/**\n * A function that accepts an initial state, an object full of reducer\n * functions, and a \"slice name\", and automatically generates\n * action creators and action types that correspond to the\n * reducers and state.\n *\n * @public\n */\nexport const createSlice = /* @__PURE__ */buildCreateSlice();\ninterface ReducerHandlingContext<State> {\n  sliceCaseReducersByName: Record<string, CaseReducer<State, any> | Pick<AsyncThunkSliceReducerDefinition<State, any, any, any>, 'fulfilled' | 'rejected' | 'pending' | 'settled'>>;\n  sliceCaseReducersByType: Record<string, CaseReducer<State, any>>;\n  sliceMatchers: ActionMatcherDescriptionCollection<State>;\n  actionCreators: Record<string, Function>;\n}\ninterface ReducerHandlingContextMethods<State> {\n  /**\n   * Adds a case reducer to handle a single action type.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<ActionCreator extends TypedActionCreator<string>>(actionCreator: ActionCreator, reducer: CaseReducer<State, ReturnType<ActionCreator>>): ReducerHandlingContextMethods<State>;\n  /**\n   * Adds a case reducer to handle a single action type.\n   * @param actionCreator - Either a plain action type string, or an action creator generated by [`createAction`](./createAction) that can be used to determine the action type.\n   * @param reducer - The actual case reducer function.\n   */\n  addCase<Type extends string, A extends Action<Type>>(type: Type, reducer: CaseReducer<State, A>): ReducerHandlingContextMethods<State>;\n\n  /**\n   * Allows you to match incoming actions against your own filter function instead of only the `action.type` property.\n   * @remarks\n   * If multiple matcher reducers match, all of them will be executed in the order\n   * they were defined in - even if a case reducer already matched.\n   * All calls to `builder.addMatcher` must come after any calls to `builder.addCase` and before any calls to `builder.addDefaultCase`.\n   * @param matcher - A matcher function. In TypeScript, this should be a [type predicate](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates)\n   *   function\n   * @param reducer - The actual case reducer function.\n   *\n   */\n  addMatcher<A>(matcher: TypeGuard<A>, reducer: CaseReducer<State, A extends Action ? A : A & Action>): ReducerHandlingContextMethods<State>;\n  /**\n   * Add an action to be exposed under the final `slice.actions` key.\n   * @param name The key to be exposed as.\n   * @param actionCreator The action to expose.\n   * @example\n   * context.exposeAction(\"addPost\", createAction<Post>(\"addPost\"));\n   *\n   * export const { addPost } = slice.actions\n   *\n   * dispatch(addPost(post))\n   */\n  exposeAction(name: string, actionCreator: Function): ReducerHandlingContextMethods<State>;\n  /**\n   * Add a case reducer to be exposed under the final `slice.caseReducers` key.\n   * @param name The key to be exposed as.\n   * @param reducer The reducer to expose.\n   * @example\n   * context.exposeCaseReducer(\"addPost\", (state, action: PayloadAction<Post>) => {\n   *   state.push(action.payload)\n   * })\n   *\n   * slice.caseReducers.addPost([], addPost(post))\n   */\n  exposeCaseReducer(name: string, reducer: CaseReducer<State, any> | Pick<AsyncThunkSliceReducerDefinition<State, any, any, any>, 'fulfilled' | 'rejected' | 'pending' | 'settled'>): ReducerHandlingContextMethods<State>;\n}\ninterface ReducerDetails {\n  /** The key the reducer was defined under */\n  reducerName: string;\n  /** The predefined action type, i.e. `${slice.name}/${reducerName}` */\n  type: string;\n  /** Whether create. notation was used when defining reducers */\n  createNotation: boolean;\n}\nfunction buildReducerCreators<State>(): ReducerCreators<State> {\n  function asyncThunk(payloadCreator: AsyncThunkPayloadCreator<any, any>, config: AsyncThunkSliceReducerConfig<State, any>): AsyncThunkSliceReducerDefinition<State, any> {\n    return {\n      _reducerDefinitionType: ReducerType.asyncThunk,\n      payloadCreator,\n      ...config\n    };\n  }\n  asyncThunk.withTypes = () => asyncThunk;\n  return {\n    reducer(caseReducer: CaseReducer<State, any>) {\n      return Object.assign({\n        // hack so the wrapping function has the same name as the original\n        // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original\n        [caseReducer.name](...args: Parameters<typeof caseReducer>) {\n          return caseReducer(...args);\n        }\n      }[caseReducer.name], {\n        _reducerDefinitionType: ReducerType.reducer\n      } as const);\n    },\n    preparedReducer(prepare, reducer) {\n      return {\n        _reducerDefinitionType: ReducerType.reducerWithPrepare,\n        prepare,\n        reducer\n      };\n    },\n    asyncThunk: asyncThunk as any\n  };\n}\nfunction handleNormalReducerDefinition<State>({\n  type,\n  reducerName,\n  createNotation\n}: ReducerDetails, maybeReducerWithPrepare: CaseReducer<State, {\n  payload: any;\n  type: string;\n}> | CaseReducerWithPrepare<State, PayloadAction<any, string, any, any>>, context: ReducerHandlingContextMethods<State>) {\n  let caseReducer: CaseReducer<State, any>;\n  let prepareCallback: PrepareAction<any> | undefined;\n  if ('reducer' in maybeReducerWithPrepare) {\n    if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage7(17) : 'Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.');\n    }\n    caseReducer = maybeReducerWithPrepare.reducer;\n    prepareCallback = maybeReducerWithPrepare.prepare;\n  } else {\n    caseReducer = maybeReducerWithPrepare;\n  }\n  context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));\n}\nfunction isAsyncThunkSliceReducerDefinition<State>(reducerDefinition: any): reducerDefinition is AsyncThunkSliceReducerDefinition<State, any, any, any> {\n  return reducerDefinition._reducerDefinitionType === ReducerType.asyncThunk;\n}\nfunction isCaseReducerWithPrepareDefinition<State>(reducerDefinition: any): reducerDefinition is CaseReducerWithPrepareDefinition<State, any> {\n  return reducerDefinition._reducerDefinitionType === ReducerType.reducerWithPrepare;\n}\nfunction handleThunkCaseReducerDefinition<State>({\n  type,\n  reducerName\n}: ReducerDetails, reducerDefinition: AsyncThunkSliceReducerDefinition<State, any, any, any>, context: ReducerHandlingContextMethods<State>, cAT: typeof _createAsyncThunk | undefined) {\n  if (!cAT) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage8(18) : 'Cannot use `create.asyncThunk` in the built-in `createSlice`. ' + 'Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.');\n  }\n  const {\n    payloadCreator,\n    fulfilled,\n    pending,\n    rejected,\n    settled,\n    options\n  } = reducerDefinition;\n  const thunk = cAT(type, payloadCreator, options as any);\n  context.exposeAction(reducerName, thunk);\n  if (fulfilled) {\n    context.addCase(thunk.fulfilled, fulfilled);\n  }\n  if (pending) {\n    context.addCase(thunk.pending, pending);\n  }\n  if (rejected) {\n    context.addCase(thunk.rejected, rejected);\n  }\n  if (settled) {\n    context.addMatcher(thunk.settled, settled);\n  }\n  context.exposeCaseReducer(reducerName, {\n    fulfilled: fulfilled || noop,\n    pending: pending || noop,\n    rejected: rejected || noop,\n    settled: settled || noop\n  });\n}\nfunction noop() {}","import type { EntityId, EntityState, EntityStateAdapter, EntityStateFactory } from './models';\nexport function getInitialEntityState<T, Id extends EntityId>(): EntityState<T, Id> {\n  return {\n    ids: [],\n    entities: {} as Record<Id, T>\n  };\n}\nexport function createInitialStateFactory<T, Id extends EntityId>(stateAdapter: EntityStateAdapter<T, Id>): EntityStateFactory<T, Id> {\n  function getInitialState(state?: undefined, entities?: readonly T[] | Record<Id, T>): EntityState<T, Id>;\n  function getInitialState<S extends object>(additionalState: S, entities?: readonly T[] | Record<Id, T>): EntityState<T, Id> & S;\n  function getInitialState(additionalState: any = {}, entities?: readonly T[] | Record<Id, T>): any {\n    const state = Object.assign(getInitialEntityState(), additionalState);\n    return entities ? stateAdapter.setAll(state, entities) : state;\n  }\n  return {\n    getInitialState\n  };\n}","import type { CreateSelectorFunction, Selector } from 'reselect';\nimport { createDraftSafeSelector } from '../createDraftSafeSelector';\nimport type { EntityId, EntitySelectors, EntityState } from './models';\ntype AnyFunction = (...args: any) => any;\ntype AnyCreateSelectorFunction = CreateSelectorFunction<<F extends AnyFunction>(f: F) => F, <F extends AnyFunction>(f: F) => F>;\nexport type GetSelectorsOptions = {\n  createSelector?: AnyCreateSelectorFunction;\n};\nexport function createSelectorsFactory<T, Id extends EntityId>() {\n  function getSelectors(selectState?: undefined, options?: GetSelectorsOptions): EntitySelectors<T, EntityState<T, Id>, Id>;\n  function getSelectors<V>(selectState: (state: V) => EntityState<T, Id>, options?: GetSelectorsOptions): EntitySelectors<T, V, Id>;\n  function getSelectors<V>(selectState?: (state: V) => EntityState<T, Id>, options: GetSelectorsOptions = {}): EntitySelectors<T, any, Id> {\n    const {\n      createSelector = createDraftSafeSelector as AnyCreateSelectorFunction\n    } = options;\n    const selectIds = (state: EntityState<T, Id>) => state.ids;\n    const selectEntities = (state: EntityState<T, Id>) => state.entities;\n    const selectAll = createSelector(selectIds, selectEntities, (ids, entities): T[] => ids.map(id => entities[id]!));\n    const selectId = (_: unknown, id: Id) => id;\n    const selectById = (entities: Record<Id, T>, id: Id) => entities[id];\n    const selectTotal = createSelector(selectIds, ids => ids.length);\n    if (!selectState) {\n      return {\n        selectIds,\n        selectEntities,\n        selectAll,\n        selectTotal,\n        selectById: createSelector(selectEntities, selectId, selectById)\n      };\n    }\n    const selectGlobalizedEntities = createSelector(selectState as Selector<V, EntityState<T, Id>>, selectEntities);\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n      selectById: createSelector(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n  return {\n    getSelectors\n  };\n}","import { produce as createNextState, isDraft } from 'immer';\nimport type { Draft } from 'immer';\nimport type { EntityId, DraftableEntityState, PreventAny } from './models';\nimport type { PayloadAction } from '../createAction';\nimport { isFSA } from '../createAction';\nexport const isDraftTyped = isDraft as <T>(value: T | Draft<T>) => value is Draft<T>;\nexport function createSingleArgumentStateOperator<T, Id extends EntityId>(mutator: (state: DraftableEntityState<T, Id>) => void) {\n  const operator = createStateOperator((_: undefined, state: DraftableEntityState<T, Id>) => mutator(state));\n  return function operation<S extends DraftableEntityState<T, Id>>(state: PreventAny<S, T, Id>): S {\n    return operator(state as S, undefined);\n  };\n}\nexport function createStateOperator<T, Id extends EntityId, R>(mutator: (arg: R, state: DraftableEntityState<T, Id>) => void) {\n  return function operation<S extends DraftableEntityState<T, Id>>(state: S, arg: R | PayloadAction<R>): S {\n    function isPayloadActionArgument(arg: R | PayloadAction<R>): arg is PayloadAction<R> {\n      return isFSA(arg);\n    }\n    const runMutator = (draft: DraftableEntityState<T, Id>) => {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n    if (isDraftTyped<DraftableEntityState<T, Id>>(state)) {\n      // we must already be inside a `createNextState` call, likely because\n      // this is being wrapped in `createReducer` or `createSlice`.\n      // It's safe to just pass the draft to the mutator.\n      runMutator(state);\n\n      // since it's a draft, we'll just return it\n      return state;\n    }\n    return createNextState(state, runMutator);\n  };\n}","import type { Draft } from 'immer';\nimport { current, isDraft } from 'immer';\nimport type { DraftableEntityState, EntityId, IdSelector, Update } from './models';\nexport function selectIdValue<T, Id extends EntityId>(entity: T, selectId: IdSelector<T, Id>) {\n  const key = selectId(entity);\n  if (process.env.NODE_ENV !== 'production' && key === undefined) {\n    console.warn('The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n  }\n  return key;\n}\nexport function ensureEntitiesArray<T, Id extends EntityId>(entities: readonly T[] | Record<Id, T>): readonly T[] {\n  if (!Array.isArray(entities)) {\n    entities = Object.values(entities);\n  }\n  return entities;\n}\nexport function getCurrent<T>(value: T | Draft<T>): T {\n  return (isDraft(value) ? current(value) : value) as T;\n}\nexport function splitAddedUpdatedEntities<T, Id extends EntityId>(newEntities: readonly T[] | Record<Id, T>, selectId: IdSelector<T, Id>, state: DraftableEntityState<T, Id>): [T[], Update<T, Id>[], Id[]] {\n  newEntities = ensureEntitiesArray(newEntities);\n  const existingIdsArray = getCurrent(state.ids);\n  const existingIds = new Set<Id>(existingIdsArray);\n  const added: T[] = [];\n  const addedIds = new Set<Id>([]);\n  const updated: Update<T, Id>[] = [];\n  for (const entity of newEntities) {\n    const id = selectIdValue(entity, selectId);\n    if (existingIds.has(id) || addedIds.has(id)) {\n      updated.push({\n        id,\n        changes: entity\n      });\n    } else {\n      addedIds.add(id);\n      added.push(entity);\n    }\n  }\n  return [added, updated, existingIdsArray];\n}","import type { Draft } from 'immer';\nimport type { EntityStateAdapter, IdSelector, Update, EntityId, DraftableEntityState } from './models';\nimport { createStateOperator, createSingleArgumentStateOperator } from './state_adapter';\nimport { selectIdValue, ensureEntitiesArray, splitAddedUpdatedEntities } from './utils';\nexport function createUnsortedStateAdapter<T, Id extends EntityId>(selectId: IdSelector<T, Id>): EntityStateAdapter<T, Id> {\n  type R = DraftableEntityState<T, Id>;\n  function addOneMutably(entity: T, state: R): void {\n    const key = selectIdValue(entity, selectId);\n    if (key in state.entities) {\n      return;\n    }\n    state.ids.push(key as Id & Draft<Id>);\n    (state.entities as Record<Id, T>)[key] = entity;\n  }\n  function addManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      addOneMutably(entity, state);\n    }\n  }\n  function setOneMutably(entity: T, state: R): void {\n    const key = selectIdValue(entity, selectId);\n    if (!(key in state.entities)) {\n      state.ids.push(key as Id & Draft<Id>);\n    }\n    ;\n    (state.entities as Record<Id, T>)[key] = entity;\n  }\n  function setManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    for (const entity of newEntities) {\n      setOneMutably(entity, state);\n    }\n  }\n  function setAllMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.ids = [];\n    state.entities = {} as Record<Id, T>;\n    addManyMutably(newEntities, state);\n  }\n  function removeOneMutably(key: Id, state: R): void {\n    return removeManyMutably([key], state);\n  }\n  function removeManyMutably(keys: readonly Id[], state: R): void {\n    let didMutate = false;\n    keys.forEach(key => {\n      if (key in state.entities) {\n        delete (state.entities as Record<Id, T>)[key];\n        didMutate = true;\n      }\n    });\n    if (didMutate) {\n      state.ids = (state.ids as Id[]).filter(id => id in state.entities) as Id[] | Draft<Id[]>;\n    }\n  }\n  function removeAllMutably(state: R): void {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n  function takeNewKey(keys: {\n    [id: string]: Id;\n  }, update: Update<T, Id>, state: R): boolean {\n    const original: T | undefined = (state.entities as Record<Id, T>)[update.id];\n    if (original === undefined) {\n      return false;\n    }\n    const updated: T = Object.assign({}, original, update.changes);\n    const newKey = selectIdValue(updated, selectId);\n    const hasNewKey = newKey !== update.id;\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete (state.entities as Record<Id, T>)[update.id];\n    }\n    ;\n    (state.entities as Record<Id, T>)[newKey] = updated;\n    return hasNewKey;\n  }\n  function updateOneMutably(update: Update<T, Id>, state: R): void {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates: ReadonlyArray<Update<T, Id>>, state: R): void {\n    const newKeys: {\n      [id: string]: Id;\n    } = {};\n    const updatesPerEntity: {\n      [id: string]: Update<T, Id>;\n    } = {};\n    updates.forEach(update => {\n      // Only apply updates to entities that currently exist\n      if (update.id in state.entities) {\n        // If there are multiple updates to one entity, merge them together\n        updatesPerEntity[update.id] = {\n          id: update.id,\n          // Spreads ignore falsy values, so this works even if there isn't\n          // an existing update already at this key\n          changes: {\n            ...updatesPerEntity[update.id]?.changes,\n            ...update.changes\n          }\n        };\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    const didMutateEntities = updates.length > 0;\n    if (didMutateEntities) {\n      const didMutateIds = updates.filter(update => takeNewKey(newKeys, update, state)).length > 0;\n      if (didMutateIds) {\n        state.ids = Object.values(state.entities).map(e => selectIdValue(e as T, selectId));\n      }\n    }\n  }\n  function upsertOneMutably(entity: T, state: R): void {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    const [added, updated] = splitAddedUpdatedEntities<T, Id>(newEntities, selectId, state);\n    addManyMutably(added, state);\n    updateManyMutably(updated, state);\n  }\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}","import type { IdSelector, Comparer, EntityStateAdapter, Update, EntityId, DraftableEntityState } from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport { selectIdValue, ensureEntitiesArray, splitAddedUpdatedEntities, getCurrent } from './utils';\n\n// Borrowed from Replay\nexport function findInsertIndex<T>(sortedItems: T[], item: T, comparisonFunction: Comparer<T>): number {\n  let lowIndex = 0;\n  let highIndex = sortedItems.length;\n  while (lowIndex < highIndex) {\n    let middleIndex = lowIndex + highIndex >>> 1;\n    const currentItem = sortedItems[middleIndex];\n    const res = comparisonFunction(item, currentItem);\n    if (res >= 0) {\n      lowIndex = middleIndex + 1;\n    } else {\n      highIndex = middleIndex;\n    }\n  }\n  return lowIndex;\n}\nexport function insert<T>(sortedItems: T[], item: T, comparisonFunction: Comparer<T>): T[] {\n  const insertAtIndex = findInsertIndex(sortedItems, item, comparisonFunction);\n  sortedItems.splice(insertAtIndex, 0, item);\n  return sortedItems;\n}\nexport function createSortedStateAdapter<T, Id extends EntityId>(selectId: IdSelector<T, Id>, comparer: Comparer<T>): EntityStateAdapter<T, Id> {\n  type R = DraftableEntityState<T, Id>;\n  const {\n    removeOne,\n    removeMany,\n    removeAll\n  } = createUnsortedStateAdapter(selectId);\n  function addOneMutably(entity: T, state: R): void {\n    return addManyMutably([entity], state);\n  }\n  function addManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R, existingIds?: Id[]): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    const existingKeys = new Set<Id>(existingIds ?? getCurrent(state.ids));\n    const models = newEntities.filter(model => !existingKeys.has(selectIdValue(model, selectId)));\n    if (models.length !== 0) {\n      mergeFunction(state, models);\n    }\n  }\n  function setOneMutably(entity: T, state: R): void {\n    return setManyMutably([entity], state);\n  }\n  function setManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    if (newEntities.length !== 0) {\n      for (const item of newEntities) {\n        delete (state.entities as Record<Id, T>)[selectId(item)];\n      }\n      mergeFunction(state, newEntities);\n    }\n  }\n  function setAllMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    newEntities = ensureEntitiesArray(newEntities);\n    state.entities = {} as Record<Id, T>;\n    state.ids = [];\n    addManyMutably(newEntities, state, []);\n  }\n  function updateOneMutably(update: Update<T, Id>, state: R): void {\n    return updateManyMutably([update], state);\n  }\n  function updateManyMutably(updates: ReadonlyArray<Update<T, Id>>, state: R): void {\n    let appliedUpdates = false;\n    let replacedIds = false;\n    for (let update of updates) {\n      const entity: T | undefined = (state.entities as Record<Id, T>)[update.id];\n      if (!entity) {\n        continue;\n      }\n      appliedUpdates = true;\n      Object.assign(entity, update.changes);\n      const newId = selectId(entity);\n      if (update.id !== newId) {\n        // We do support the case where updates can change an item's ID.\n        // This makes things trickier - go ahead and swap the IDs in state now.\n        replacedIds = true;\n        delete (state.entities as Record<Id, T>)[update.id];\n        const oldIndex = (state.ids as Id[]).indexOf(update.id);\n        state.ids[oldIndex] = newId;\n        (state.entities as Record<Id, T>)[newId] = entity;\n      }\n    }\n    if (appliedUpdates) {\n      mergeFunction(state, [], appliedUpdates, replacedIds);\n    }\n  }\n  function upsertOneMutably(entity: T, state: R): void {\n    return upsertManyMutably([entity], state);\n  }\n  function upsertManyMutably(newEntities: readonly T[] | Record<Id, T>, state: R): void {\n    const [added, updated, existingIdsArray] = splitAddedUpdatedEntities<T, Id>(newEntities, selectId, state);\n    if (added.length) {\n      addManyMutably(added, state, existingIdsArray);\n    }\n    if (updated.length) {\n      updateManyMutably(updated, state);\n    }\n  }\n  function areArraysEqual(a: readonly unknown[], b: readonly unknown[]) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n  type MergeFunction = (state: R, addedItems: readonly T[], appliedUpdates?: boolean, replacedIds?: boolean) => void;\n  const mergeFunction: MergeFunction = (state, addedItems, appliedUpdates, replacedIds) => {\n    const currentEntities = getCurrent(state.entities);\n    const currentIds = getCurrent(state.ids);\n    const stateEntities = state.entities as Record<Id, T>;\n    let ids: Iterable<Id> = currentIds;\n    if (replacedIds) {\n      ids = new Set(currentIds);\n    }\n    let sortedEntities: T[] = [];\n    for (const id of ids) {\n      const entity = currentEntities[id];\n      if (entity) {\n        sortedEntities.push(entity);\n      }\n    }\n    const wasPreviouslyEmpty = sortedEntities.length === 0;\n\n    // Insert/overwrite all new/updated\n    for (const item of addedItems) {\n      stateEntities[selectId(item)] = item;\n      if (!wasPreviouslyEmpty) {\n        // Binary search insertion generally requires fewer comparisons\n        insert(sortedEntities, item, comparer);\n      }\n    }\n    if (wasPreviouslyEmpty) {\n      // All we have is the incoming values, sort them\n      sortedEntities = addedItems.slice().sort(comparer);\n    } else if (appliedUpdates) {\n      // We should have a _mostly_-sorted array already\n      sortedEntities.sort(comparer);\n    }\n    const newSortedIds = sortedEntities.map(selectId);\n    if (!areArraysEqual(currentIds, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  };\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setOne: createStateOperator(setOneMutably),\n    setMany: createStateOperator(setManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}","import type { EntityAdapter, EntityId, EntityAdapterOptions } from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\nimport type { WithRequiredProp } from '../tsHelpers';\nexport function createEntityAdapter<T, Id extends EntityId>(options: WithRequiredProp<EntityAdapterOptions<T, Id>, 'selectId'>): EntityAdapter<T, Id>;\nexport function createEntityAdapter<T extends {\n  id: EntityId;\n}>(options?: Omit<EntityAdapterOptions<T, T['id']>, 'selectId'>): EntityAdapter<T, T['id']>;\n\n/**\n *\n * @param options\n *\n * @public\n */\nexport function createEntityAdapter<T>(options: EntityAdapterOptions<T, EntityId> = {}): EntityAdapter<T, EntityId> {\n  const {\n    selectId,\n    sortComparer\n  }: Required<EntityAdapterOptions<T, EntityId>> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options\n  };\n  const stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  const stateFactory = createInitialStateFactory(stateAdapter);\n  const selectorsFactory = createSelectorsFactory<T, EntityId>();\n  return {\n    selectId,\n    sortComparer,\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter\n  };\n}","import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3 } from \"@reduxjs/toolkit\";\nimport type { Action, Dispatch, MiddlewareAPI, UnknownAction } from 'redux';\nimport { isAction } from 'redux';\nimport type { ThunkDispatch } from 'redux-thunk';\nimport { createAction } from '../createAction';\nimport { nanoid } from '../nanoid';\nimport { TaskAbortError, listenerCancelled, listenerCompleted, taskCancelled, taskCompleted } from './exceptions';\nimport { createDelay, createPause, raceWithSignal, runTask, validateActive } from './task';\nimport type { AbortSignalWithReason, AddListenerOverloads, AnyListenerPredicate, CreateListenerMiddlewareOptions, FallbackAddListenerOptions, ForkOptions, ForkedTask, ForkedTaskExecutor, ListenerEntry, ListenerErrorHandler, ListenerErrorInfo, ListenerMiddleware, ListenerMiddlewareInstance, TakePattern, TaskResult, TypedAddListener, TypedCreateListenerEntry, TypedRemoveListener, UnsubscribeListener, UnsubscribeListenerOptions } from './types';\nimport { abortControllerWithReason, addAbortSignalListener, assertFunction, catchRejection, noop } from './utils';\nexport { TaskAbortError } from './exceptions';\nexport type { AsyncTaskExecutor, CreateListenerMiddlewareOptions, ForkedTask, ForkedTaskAPI, ForkedTaskExecutor, ListenerEffect, ListenerEffectAPI, ListenerErrorHandler, ListenerMiddleware, ListenerMiddlewareInstance, SyncTaskExecutor, TaskCancelled, TaskRejected, TaskResolved, TaskResult, TypedAddListener, TypedRemoveListener, TypedStartListening, TypedStopListening, UnsubscribeListener, UnsubscribeListenerOptions } from './types';\n\n//Overly-aggressive byte-shaving\nconst {\n  assign\n} = Object;\n/**\n * @internal\n */\nconst INTERNAL_NIL_TOKEN = {} as const;\nconst alm = 'listenerMiddleware' as const;\nconst createFork = (parentAbortSignal: AbortSignalWithReason<unknown>, parentBlockingPromises: Promise<any>[]) => {\n  const linkControllers = (controller: AbortController) => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));\n  return <T,>(taskExecutor: ForkedTaskExecutor<T>, opts?: ForkOptions): ForkedTask<T> => {\n    assertFunction(taskExecutor, 'taskExecutor');\n    const childAbortController = new AbortController();\n    linkControllers(childAbortController);\n    const result = runTask<T>(async (): Promise<T> => {\n      validateActive(parentAbortSignal);\n      validateActive(childAbortController.signal);\n      const result = (await taskExecutor({\n        pause: createPause(childAbortController.signal),\n        delay: createDelay(childAbortController.signal),\n        signal: childAbortController.signal\n      })) as T;\n      validateActive(childAbortController.signal);\n      return result;\n    }, () => abortControllerWithReason(childAbortController, taskCompleted));\n    if (opts?.autoJoin) {\n      parentBlockingPromises.push(result.catch(noop));\n    }\n    return {\n      result: createPause<TaskResult<T>>(parentAbortSignal)(result),\n      cancel() {\n        abortControllerWithReason(childAbortController, taskCancelled);\n      }\n    };\n  };\n};\nconst createTakePattern = <S,>(startListening: AddListenerOverloads<UnsubscribeListener, S, Dispatch>, signal: AbortSignal): TakePattern<S> => {\n  /**\n   * A function that takes a ListenerPredicate and an optional timeout,\n   * and resolves when either the predicate returns `true` based on an action\n   * state combination or when the timeout expires.\n   * If the parent listener is canceled while waiting, this will throw a\n   * TaskAbortError.\n   */\n  const take = async <P extends AnyListenerPredicate<S>,>(predicate: P, timeout: number | undefined) => {\n    validateActive(signal);\n\n    // Placeholder unsubscribe function until the listener is added\n    let unsubscribe: UnsubscribeListener = () => {};\n    const tuplePromise = new Promise<[Action, S, S]>((resolve, reject) => {\n      // Inside the Promise, we synchronously add the listener.\n      let stopListening = startListening({\n        predicate: predicate as any,\n        effect: (action, listenerApi): void => {\n          // One-shot listener that cleans up as soon as the predicate passes\n          listenerApi.unsubscribe();\n          // Resolve the promise with the same arguments the predicate saw\n          resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);\n        }\n      });\n      unsubscribe = () => {\n        stopListening();\n        reject();\n      };\n    });\n    const promises: (Promise<null> | Promise<[Action, S, S]>)[] = [tuplePromise];\n    if (timeout != null) {\n      promises.push(new Promise<null>(resolve => setTimeout(resolve, timeout, null)));\n    }\n    try {\n      const output = await raceWithSignal(signal, Promise.race(promises));\n      validateActive(signal);\n      return output;\n    } finally {\n      // Always clean up the listener\n      unsubscribe();\n    }\n  };\n  return ((predicate: AnyListenerPredicate<S>, timeout: number | undefined) => catchRejection(take(predicate, timeout))) as TakePattern<S>;\n};\nconst getListenerEntryPropsFrom = (options: FallbackAddListenerOptions) => {\n  let {\n    type,\n    actionCreator,\n    matcher,\n    predicate,\n    effect\n  } = options;\n  if (type) {\n    predicate = createAction(type).match;\n  } else if (actionCreator) {\n    type = actionCreator!.type;\n    predicate = actionCreator.match;\n  } else if (matcher) {\n    predicate = matcher;\n  } else if (predicate) {\n    // pass\n  } else {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(21) : 'Creating or removing a listener requires one of the known fields for matching an action');\n  }\n  assertFunction(effect, 'options.listener');\n  return {\n    predicate,\n    type,\n    effect\n  };\n};\n\n/** Accepts the possible options for creating a listener, and returns a formatted listener entry */\nexport const createListenerEntry: TypedCreateListenerEntry<unknown> = /* @__PURE__ */assign((options: FallbackAddListenerOptions) => {\n  const {\n    type,\n    predicate,\n    effect\n  } = getListenerEntryPropsFrom(options);\n  const entry: ListenerEntry<unknown> = {\n    id: nanoid(),\n    effect,\n    type,\n    predicate,\n    pending: new Set<AbortController>(),\n    unsubscribe: () => {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(22) : 'Unsubscribe not initialized');\n    }\n  };\n  return entry;\n}, {\n  withTypes: () => createListenerEntry\n}) as unknown as TypedCreateListenerEntry<unknown>;\nconst findListenerEntry = (listenerMap: Map<string, ListenerEntry>, options: FallbackAddListenerOptions) => {\n  const {\n    type,\n    effect,\n    predicate\n  } = getListenerEntryPropsFrom(options);\n  return Array.from(listenerMap.values()).find(entry => {\n    const matchPredicateOrType = typeof type === 'string' ? entry.type === type : entry.predicate === predicate;\n    return matchPredicateOrType && entry.effect === effect;\n  });\n};\nconst cancelActiveListeners = (entry: ListenerEntry<unknown, Dispatch<UnknownAction>>) => {\n  entry.pending.forEach(controller => {\n    abortControllerWithReason(controller, listenerCancelled);\n  });\n};\nconst createClearListenerMiddleware = (listenerMap: Map<string, ListenerEntry>) => {\n  return () => {\n    listenerMap.forEach(cancelActiveListeners);\n    listenerMap.clear();\n  };\n};\n\n/**\n * Safely reports errors to the `errorHandler` provided.\n * Errors that occur inside `errorHandler` are notified in a new task.\n * Inspired by [rxjs reportUnhandledError](https://github.com/ReactiveX/rxjs/blob/6fafcf53dc9e557439b25debaeadfd224b245a66/src/internal/util/reportUnhandledError.ts)\n * @param errorHandler\n * @param errorToNotify\n */\nconst safelyNotifyError = (errorHandler: ListenerErrorHandler, errorToNotify: unknown, errorInfo: ListenerErrorInfo): void => {\n  try {\n    errorHandler(errorToNotify, errorInfo);\n  } catch (errorHandlerError) {\n    // We cannot let an error raised here block the listener queue.\n    // The error raised here will be picked up by `window.onerror`, `process.on('error')` etc...\n    setTimeout(() => {\n      throw errorHandlerError;\n    }, 0);\n  }\n};\n\n/**\n * @public\n */\nexport const addListener = /* @__PURE__ */assign(/* @__PURE__ */createAction(`${alm}/add`), {\n  withTypes: () => addListener\n}) as unknown as TypedAddListener<unknown>;\n\n/**\n * @public\n */\nexport const clearAllListeners = /* @__PURE__ */createAction(`${alm}/removeAll`);\n\n/**\n * @public\n */\nexport const removeListener = /* @__PURE__ */assign(/* @__PURE__ */createAction(`${alm}/remove`), {\n  withTypes: () => removeListener\n}) as unknown as TypedRemoveListener<unknown>;\nconst defaultErrorHandler: ListenerErrorHandler = (...args: unknown[]) => {\n  console.error(`${alm}/error`, ...args);\n};\n\n/**\n * @public\n */\nexport const createListenerMiddleware = <StateType = unknown, DispatchType extends Dispatch<Action> = ThunkDispatch<StateType, unknown, UnknownAction>, ExtraArgument = unknown>(middlewareOptions: CreateListenerMiddlewareOptions<ExtraArgument> = {}) => {\n  const listenerMap = new Map<string, ListenerEntry>();\n  const {\n    extra,\n    onError = defaultErrorHandler\n  } = middlewareOptions;\n  assertFunction(onError, 'onError');\n  const insertEntry = (entry: ListenerEntry) => {\n    entry.unsubscribe = () => listenerMap.delete(entry.id);\n    listenerMap.set(entry.id, entry);\n    return (cancelOptions?: UnsubscribeListenerOptions) => {\n      entry.unsubscribe();\n      if (cancelOptions?.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    };\n  };\n  const startListening = ((options: FallbackAddListenerOptions) => {\n    const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options as any);\n    return insertEntry(entry);\n  }) as AddListenerOverloads<any>;\n  assign(startListening, {\n    withTypes: () => startListening\n  });\n  const stopListening = (options: FallbackAddListenerOptions & UnsubscribeListenerOptions): boolean => {\n    const entry = findListenerEntry(listenerMap, options);\n    if (entry) {\n      entry.unsubscribe();\n      if (options.cancelActive) {\n        cancelActiveListeners(entry);\n      }\n    }\n    return !!entry;\n  };\n  assign(stopListening, {\n    withTypes: () => stopListening\n  });\n  const notifyListener = async (entry: ListenerEntry<unknown, Dispatch<UnknownAction>>, action: unknown, api: MiddlewareAPI, getOriginalState: () => StateType) => {\n    const internalTaskController = new AbortController();\n    const take = createTakePattern(startListening as AddListenerOverloads<any>, internalTaskController.signal);\n    const autoJoinPromises: Promise<any>[] = [];\n    try {\n      entry.pending.add(internalTaskController);\n      await Promise.resolve(entry.effect(action,\n      // Use assign() rather than ... to avoid extra helper functions added to bundle\n      assign({}, api, {\n        getOriginalState,\n        condition: (predicate: AnyListenerPredicate<any>, timeout?: number) => take(predicate, timeout).then(Boolean),\n        take,\n        delay: createDelay(internalTaskController.signal),\n        pause: createPause<any>(internalTaskController.signal),\n        extra,\n        signal: internalTaskController.signal,\n        fork: createFork(internalTaskController.signal, autoJoinPromises),\n        unsubscribe: entry.unsubscribe,\n        subscribe: () => {\n          listenerMap.set(entry.id, entry);\n        },\n        cancelActiveListeners: () => {\n          entry.pending.forEach((controller, _, set) => {\n            if (controller !== internalTaskController) {\n              abortControllerWithReason(controller, listenerCancelled);\n              set.delete(controller);\n            }\n          });\n        },\n        cancel: () => {\n          abortControllerWithReason(internalTaskController, listenerCancelled);\n          entry.pending.delete(internalTaskController);\n        },\n        throwIfCancelled: () => {\n          validateActive(internalTaskController.signal);\n        }\n      })));\n    } catch (listenerError) {\n      if (!(listenerError instanceof TaskAbortError)) {\n        safelyNotifyError(onError, listenerError, {\n          raisedBy: 'effect'\n        });\n      }\n    } finally {\n      await Promise.all(autoJoinPromises);\n      abortControllerWithReason(internalTaskController, listenerCompleted); // Notify that the task has completed\n      entry.pending.delete(internalTaskController);\n    }\n  };\n  const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);\n  const middleware: ListenerMiddleware<StateType, DispatchType, ExtraArgument> = api => next => action => {\n    if (!isAction(action)) {\n      // we only want to notify listeners for action objects\n      return next(action);\n    }\n    if (addListener.match(action)) {\n      return startListening(action.payload as any);\n    }\n    if (clearAllListeners.match(action)) {\n      clearListenerMiddleware();\n      return;\n    }\n    if (removeListener.match(action)) {\n      return stopListening(action.payload);\n    }\n\n    // Need to get this state _before_ the reducer processes the action\n    let originalState: StateType | typeof INTERNAL_NIL_TOKEN = api.getState();\n\n    // `getOriginalState` can only be called synchronously.\n    // @see https://github.com/reduxjs/redux-toolkit/discussions/1648#discussioncomment-1932820\n    const getOriginalState = (): StateType => {\n      if (originalState === INTERNAL_NIL_TOKEN) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(23) : `${alm}: getOriginalState can only be called synchronously`);\n      }\n      return originalState as StateType;\n    };\n    let result: unknown;\n    try {\n      // Actually forward the action to the reducer before we handle listeners\n      result = next(action);\n      if (listenerMap.size > 0) {\n        const currentState = api.getState();\n        // Work around ESBuild+TS transpilation issue\n        const listenerEntries = Array.from(listenerMap.values());\n        for (const entry of listenerEntries) {\n          let runListener = false;\n          try {\n            runListener = entry.predicate(action, currentState, originalState);\n          } catch (predicateError) {\n            runListener = false;\n            safelyNotifyError(onError, predicateError, {\n              raisedBy: 'predicate'\n            });\n          }\n          if (!runListener) {\n            continue;\n          }\n          notifyListener(entry, action, api, getOriginalState);\n        }\n      }\n    } finally {\n      // Remove `originalState` store from this scope.\n      originalState = INTERNAL_NIL_TOKEN;\n    }\n    return result;\n  };\n  return {\n    middleware,\n    startListening,\n    stopListening,\n    clearListeners: clearListenerMiddleware\n  } as ListenerMiddlewareInstance<StateType, DispatchType, ExtraArgument>;\n};","import type { SerializedError } from '@reduxjs/toolkit';\nconst task = 'task';\nconst listener = 'listener';\nconst completed = 'completed';\nconst cancelled = 'cancelled';\n\n/* TaskAbortError error codes  */\nexport const taskCancelled = `task-${cancelled}` as const;\nexport const taskCompleted = `task-${completed}` as const;\nexport const listenerCancelled = `${listener}-${cancelled}` as const;\nexport const listenerCompleted = `${listener}-${completed}` as const;\nexport class TaskAbortError implements SerializedError {\n  name = 'TaskAbortError';\n  message: string;\n  constructor(public code: string | undefined) {\n    this.message = `${task} ${cancelled} (reason: ${code})`;\n  }\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { AbortSignalWithReason } from './types';\nexport const assertFunction: (func: unknown, expected: string) => asserts func is (...args: unknown[]) => unknown = (func: unknown, expected: string) => {\n  if (typeof func !== 'function') {\n    throw new TypeError(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(32) : `${expected} is not a function`);\n  }\n};\nexport const noop = () => {};\nexport const catchRejection = <T,>(promise: Promise<T>, onError = noop): Promise<T> => {\n  promise.catch(onError);\n  return promise;\n};\nexport const addAbortSignalListener = (abortSignal: AbortSignal, callback: (evt: Event) => void) => {\n  abortSignal.addEventListener('abort', callback, {\n    once: true\n  });\n  return () => abortSignal.removeEventListener('abort', callback);\n};\n\n/**\n * Calls `abortController.abort(reason)` and patches `signal.reason`.\n * if it is not supported.\n *\n * At the time of writing `signal.reason` is available in FF chrome, edge node 17 and deno.\n * @param abortController\n * @param reason\n * @returns\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/reason\n */\nexport const abortControllerWithReason = <T,>(abortController: AbortController, reason: T): void => {\n  type Consumer<T> = (val: T) => void;\n  const signal = abortController.signal as AbortSignalWithReason<T>;\n  if (signal.aborted) {\n    return;\n  }\n\n  // Patch `reason` if necessary.\n  // - We use defineProperty here because reason is a getter of `AbortSignal.__proto__`.\n  // - We need to patch 'reason' before calling `.abort()` because listeners to the 'abort'\n  // event are are notified immediately.\n  if (!('reason' in signal)) {\n    Object.defineProperty(signal, 'reason', {\n      enumerable: true,\n      value: reason,\n      configurable: true,\n      writable: true\n    });\n  }\n  ;\n  (abortController.abort as Consumer<typeof reason>)(reason);\n};","import { TaskAbortError } from './exceptions';\nimport type { AbortSignalWithReason, TaskResult } from './types';\nimport { addAbortSignalListener, catchRejection, noop } from './utils';\n\n/**\n * Synchronously raises {@link TaskAbortError} if the task tied to the input `signal` has been cancelled.\n * @param signal\n * @param reason\n * @see {TaskAbortError}\n */\nexport const validateActive = (signal: AbortSignal): void => {\n  if (signal.aborted) {\n    const {\n      reason\n    } = signal as AbortSignalWithReason<string>;\n    throw new TaskAbortError(reason);\n  }\n};\n\n/**\n * Generates a race between the promise(s) and the AbortSignal\n * This avoids `Promise.race()`-related memory leaks:\n * https://github.com/nodejs/node/issues/17469#issuecomment-349794909\n */\nexport function raceWithSignal<T>(signal: AbortSignalWithReason<string>, promise: Promise<T>): Promise<T> {\n  let cleanup = noop;\n  return new Promise<T>((resolve, reject) => {\n    const notifyRejection = () => reject(new TaskAbortError(signal.reason));\n    if (signal.aborted) {\n      notifyRejection();\n      return;\n    }\n    cleanup = addAbortSignalListener(signal, notifyRejection);\n    promise.finally(() => cleanup()).then(resolve, reject);\n  }).finally(() => {\n    // after this point, replace `cleanup` with a noop, so there is no reference to `signal` any more\n    cleanup = noop;\n  });\n}\n\n/**\n * Runs a task and returns promise that resolves to {@link TaskResult}.\n * Second argument is an optional `cleanUp` function that always runs after task.\n *\n * **Note:** `runTask` runs the executor in the next microtask.\n * @returns\n */\nexport const runTask = async <T,>(task: () => Promise<T>, cleanUp?: () => void): Promise<TaskResult<T>> => {\n  try {\n    await Promise.resolve();\n    const value = await task();\n    return {\n      status: 'ok',\n      value\n    };\n  } catch (error: any) {\n    return {\n      status: error instanceof TaskAbortError ? 'cancelled' : 'rejected',\n      error\n    };\n  } finally {\n    cleanUp?.();\n  }\n};\n\n/**\n * Given an input `AbortSignal` and a promise returns another promise that resolves\n * as soon the input promise is provided or rejects as soon as\n * `AbortSignal.abort` is `true`.\n * @param signal\n * @returns\n */\nexport const createPause = <T,>(signal: AbortSignal) => {\n  return (promise: Promise<T>): Promise<T> => {\n    return catchRejection(raceWithSignal(signal, promise).then(output => {\n      validateActive(signal);\n      return output;\n    }));\n  };\n};\n\n/**\n * Given an input `AbortSignal` and `timeoutMs` returns a promise that resolves\n * after `timeoutMs` or rejects as soon as `AbortSignal.abort` is `true`.\n * @param signal\n * @returns\n */\nexport const createDelay = (signal: AbortSignal) => {\n  const pause = createPause<void>(signal);\n  return (timeoutMs: number): Promise<void> => {\n    return pause(new Promise<void>(resolve => setTimeout(resolve, timeoutMs)));\n  };\n};","import type { Dispatch, Middleware, UnknownAction } from 'redux';\nimport { compose } from 'redux';\nimport { createAction } from '../createAction';\nimport { isAllOf } from '../matchers';\nimport { nanoid } from '../nanoid';\nimport { getOrInsertComputed } from '../utils';\nimport type { AddMiddleware, DynamicMiddleware, DynamicMiddlewareInstance, MiddlewareEntry, WithMiddleware } from './types';\nexport type { DynamicMiddlewareInstance, GetDispatchType as GetDispatch, MiddlewareApiConfig } from './types';\nconst createMiddlewareEntry = <State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>>(middleware: Middleware<any, State, DispatchType>): MiddlewareEntry<State, DispatchType> => ({\n  middleware,\n  applied: new Map()\n});\nconst matchInstance = (instanceId: string) => (action: any): action is {\n  meta: {\n    instanceId: string;\n  };\n} => action?.meta?.instanceId === instanceId;\nexport const createDynamicMiddleware = <State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>>(): DynamicMiddlewareInstance<State, DispatchType> => {\n  const instanceId = nanoid();\n  const middlewareMap = new Map<Middleware<any, State, DispatchType>, MiddlewareEntry<State, DispatchType>>();\n  const withMiddleware = Object.assign(createAction('dynamicMiddleware/add', (...middlewares: Middleware<any, State, DispatchType>[]) => ({\n    payload: middlewares,\n    meta: {\n      instanceId\n    }\n  })), {\n    withTypes: () => withMiddleware\n  }) as WithMiddleware<State, DispatchType>;\n  const addMiddleware = Object.assign(function addMiddleware(...middlewares: Middleware<any, State, DispatchType>[]) {\n    middlewares.forEach(middleware => {\n      getOrInsertComputed(middlewareMap, middleware, createMiddlewareEntry);\n    });\n  }, {\n    withTypes: () => addMiddleware\n  }) as AddMiddleware<State, DispatchType>;\n  const getFinalMiddleware: Middleware<{}, State, DispatchType> = api => {\n    const appliedMiddleware = Array.from(middlewareMap.values()).map(entry => getOrInsertComputed(entry.applied, api, entry.middleware));\n    return compose(...appliedMiddleware);\n  };\n  const isWithMiddleware = isAllOf(withMiddleware, matchInstance(instanceId));\n  const middleware: DynamicMiddleware<State, DispatchType> = api => next => action => {\n    if (isWithMiddleware(action)) {\n      addMiddleware(...action.payload);\n      return api.dispatch;\n    }\n    return getFinalMiddleware(api)(next)(action);\n  };\n  return {\n    middleware,\n    addMiddleware,\n    withMiddleware,\n    instanceId\n  };\n};","import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\nimport type { Reducer, StateFromReducersMapObject, UnknownAction } from 'redux';\nimport { combineReducers } from 'redux';\nimport { nanoid } from './nanoid';\nimport type { Id, NonUndefined, Tail, UnionToIntersection, WithOptionalProp } from './tsHelpers';\nimport { getOrInsertComputed } from './utils';\ntype SliceLike<ReducerPath extends string, State> = {\n  reducerPath: ReducerPath;\n  reducer: Reducer<State>;\n};\ntype AnySliceLike = SliceLike<string, any>;\ntype SliceLikeReducerPath<A extends AnySliceLike> = A extends SliceLike<infer ReducerPath, any> ? ReducerPath : never;\ntype SliceLikeState<A extends AnySliceLike> = A extends SliceLike<any, infer State> ? State : never;\nexport type WithSlice<A extends AnySliceLike> = { [Path in SliceLikeReducerPath<A>]: SliceLikeState<A> };\ntype ReducerMap = Record<string, Reducer>;\ntype ExistingSliceLike<DeclaredState> = { [ReducerPath in keyof DeclaredState]: SliceLike<ReducerPath & string, NonUndefined<DeclaredState[ReducerPath]>> }[keyof DeclaredState];\nexport type InjectConfig = {\n  /**\n   * Allow replacing reducer with a different reference. Normally, an error will be thrown if a different reducer instance to the one already injected is used.\n   */\n  overrideExisting?: boolean;\n};\n\n/**\n * A reducer that allows for slices/reducers to be injected after initialisation.\n */\nexport interface CombinedSliceReducer<InitialState, DeclaredState = InitialState> extends Reducer<DeclaredState, UnknownAction, Partial<DeclaredState>> {\n  /**\n   * Provide a type for slices that will be injected lazily.\n   *\n   * One way to do this would be with interface merging:\n   * ```ts\n   *\n   * export interface LazyLoadedSlices {}\n   *\n   * export const rootReducer = combineSlices(stringSlice).withLazyLoadedSlices<LazyLoadedSlices>();\n   *\n   * // elsewhere\n   *\n   * declare module './reducer' {\n   *   export interface LazyLoadedSlices extends WithSlice<typeof booleanSlice> {}\n   * }\n   *\n   * const withBoolean = rootReducer.inject(booleanSlice);\n   *\n   * // elsewhere again\n   *\n   * declare module './reducer' {\n   *   export interface LazyLoadedSlices {\n   *     customName: CustomState\n   *   }\n   * }\n   *\n   * const withCustom = rootReducer.inject({ reducerPath: \"customName\", reducer: customSlice.reducer })\n   * ```\n   */\n  withLazyLoadedSlices<Lazy = {}>(): CombinedSliceReducer<InitialState, Id<DeclaredState & Partial<Lazy>>>;\n\n  /**\n   * Inject a slice.\n   *\n   * Accepts an individual slice, RTKQ API instance, or a \"slice-like\" { reducerPath, reducer } object.\n   *\n   * ```ts\n   * rootReducer.inject(booleanSlice)\n   * rootReducer.inject(baseApi)\n   * rootReducer.inject({ reducerPath: 'boolean' as const, reducer: newReducer }, { overrideExisting: true })\n   * ```\n   *\n   */\n  inject<Sl extends Id<ExistingSliceLike<DeclaredState>>>(slice: Sl, config?: InjectConfig): CombinedSliceReducer<InitialState, Id<DeclaredState & WithSlice<Sl>>>;\n\n  /**\n   * Inject a slice.\n   *\n   * Accepts an individual slice, RTKQ API instance, or a \"slice-like\" { reducerPath, reducer } object.\n   *\n   * ```ts\n   * rootReducer.inject(booleanSlice)\n   * rootReducer.inject(baseApi)\n   * rootReducer.inject({ reducerPath: 'boolean' as const, reducer: newReducer }, { overrideExisting: true })\n   * ```\n   *\n   */\n  inject<ReducerPath extends string, State>(slice: SliceLike<ReducerPath, State & (ReducerPath extends keyof DeclaredState ? never : State)>, config?: InjectConfig): CombinedSliceReducer<InitialState, Id<DeclaredState & WithSlice<SliceLike<ReducerPath, State>>>>;\n\n  /**\n   * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n   *\n   * ```ts\n   * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n   * //                                                                ^? boolean | undefined\n   *\n   * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n   *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n   *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n   *   return state.boolean;\n   *   //           ^? boolean\n   * })\n   * ```\n   *\n   * If the reducer is nested inside the root state, a selectState callback can be passed to retrieve the reducer's state.\n   *\n   * ```ts\n   *\n   * export interface LazyLoadedSlices {};\n   *\n   * export const innerReducer = combineSlices(stringSlice).withLazyLoadedSlices<LazyLoadedSlices>();\n   *\n   * export const rootReducer = combineSlices({ inner: innerReducer });\n   *\n   * export type RootState = ReturnType<typeof rootReducer>;\n   *\n   * // elsewhere\n   *\n   * declare module \"./reducer.ts\" {\n   *  export interface LazyLoadedSlices extends WithSlice<typeof booleanSlice> {}\n   * }\n   *\n   * const withBool = innerReducer.inject(booleanSlice);\n   *\n   * const selectBoolean = withBool.selector(\n   *   (state) => state.boolean,\n   *   (rootState: RootState) => state.inner\n   * );\n   * //    now expects to be passed RootState instead of innerReducer state\n   *\n   * ```\n   *\n   * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n   *\n   * ```ts\n   * const injectedReducer = rootReducer.inject(booleanSlice);\n   * const selectBoolean = injectedReducer.selector((state) => {\n   *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n   *   return state.boolean\n   * })\n   * ```\n   */\n  selector: {\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n     *   return state.boolean;\n     *   //           ^? boolean\n     * })\n     * ```\n     *\n     * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown>(selectorFn: Selector): (state: WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n     *   return state.boolean;\n     *   //           ^? boolean\n     * })\n     * ```\n     *\n     * If the reducer is nested inside the root state, a selectState callback can be passed to retrieve the reducer's state.\n     *\n     * ```ts\n     *\n     * interface LazyLoadedSlices {};\n     *\n     * const innerReducer = combineSlices(stringSlice).withLazyLoadedSlices<LazyLoadedSlices>();\n     *\n     * const rootReducer = combineSlices({ inner: innerReducer });\n     *\n     * type RootState = ReturnType<typeof rootReducer>;\n     *\n     * // elsewhere\n     *\n     * declare module \"./reducer.ts\" {\n     *  interface LazyLoadedSlices extends WithSlice<typeof booleanSlice> {}\n     * }\n     *\n     * const withBool = innerReducer.inject(booleanSlice);\n     *\n     * const selectBoolean = withBool.selector(\n     *   (state) => state.boolean,\n     *   (rootState: RootState) => state.inner\n     * );\n     * //    now expects to be passed RootState instead of innerReducer state\n     *\n     * ```\n     *\n     * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown, RootState>(selectorFn: Selector, selectState: (rootState: RootState, ...args: Tail<Parameters<Selector>>) => WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>): (state: RootState, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n    /**\n     * Returns the unproxied state. Useful for debugging.\n     * @param state state Proxy, that ensures injected reducers have value\n     * @returns original, unproxied state\n     * @throws if value passed is not a state Proxy\n     */\n    original: (state: DeclaredState) => InitialState & Partial<DeclaredState>;\n  };\n}\ntype InitialState<Slices extends Array<AnySliceLike | ReducerMap>> = UnionToIntersection<Slices[number] extends infer Slice ? Slice extends AnySliceLike ? WithSlice<Slice> : StateFromReducersMapObject<Slice> : never>;\nconst isSliceLike = (maybeSliceLike: AnySliceLike | ReducerMap): maybeSliceLike is AnySliceLike => 'reducerPath' in maybeSliceLike && typeof maybeSliceLike.reducerPath === 'string';\nconst getReducers = (slices: Array<AnySliceLike | ReducerMap>) => slices.flatMap(sliceOrMap => isSliceLike(sliceOrMap) ? [[sliceOrMap.reducerPath, sliceOrMap.reducer] as const] : Object.entries(sliceOrMap));\nconst ORIGINAL_STATE = Symbol.for('rtk-state-proxy-original');\nconst isStateProxy = (value: any) => !!value && !!value[ORIGINAL_STATE];\nconst stateProxyMap = new WeakMap<object, object>();\nconst createStateProxy = <State extends object,>(state: State, reducerMap: Partial<Record<PropertyKey, Reducer>>, initialStateCache: Record<PropertyKey, unknown>) => getOrInsertComputed(stateProxyMap, state, () => new Proxy(state, {\n  get: (target, prop, receiver) => {\n    if (prop === ORIGINAL_STATE) return target;\n    const result = Reflect.get(target, prop, receiver);\n    if (typeof result === 'undefined') {\n      const cached = initialStateCache[prop];\n      if (typeof cached !== 'undefined') return cached;\n      const reducer = reducerMap[prop];\n      if (reducer) {\n        // ensure action type is random, to prevent reducer treating it differently\n        const reducerResult = reducer(undefined, {\n          type: nanoid()\n        });\n        if (typeof reducerResult === 'undefined') {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(24) : `The slice reducer for key \"${prop.toString()}\" returned undefined when called for selector(). ` + `If the state passed to the reducer is undefined, you must ` + `explicitly return the initial state. The initial state may ` + `not be undefined. If you don't want to set a value for this reducer, ` + `you can use null instead of undefined.`);\n        }\n        initialStateCache[prop] = reducerResult;\n        return reducerResult;\n      }\n    }\n    return result;\n  }\n})) as State;\nconst original = (state: any) => {\n  if (!isStateProxy(state)) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(25) : 'original must be used on state Proxy');\n  }\n  return state[ORIGINAL_STATE];\n};\nconst emptyObject = {};\nconst noopReducer: Reducer<Record<string, any>> = (state = emptyObject) => state;\nexport function combineSlices<Slices extends Array<AnySliceLike | ReducerMap>>(...slices: Slices): CombinedSliceReducer<Id<InitialState<Slices>>> {\n  const reducerMap = Object.fromEntries<Reducer>(getReducers(slices));\n  const getReducer = () => Object.keys(reducerMap).length ? combineReducers(reducerMap) : noopReducer;\n  let reducer = getReducer();\n  function combinedReducer(state: Record<string, unknown>, action: UnknownAction) {\n    return reducer(state, action);\n  }\n  combinedReducer.withLazyLoadedSlices = () => combinedReducer;\n  const initialStateCache: Record<PropertyKey, unknown> = {};\n  const inject = (slice: AnySliceLike, config: InjectConfig = {}): typeof combinedReducer => {\n    const {\n      reducerPath,\n      reducer: reducerToInject\n    } = slice;\n    const currentReducer = reducerMap[reducerPath];\n    if (!config.overrideExisting && currentReducer && currentReducer !== reducerToInject) {\n      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n        console.error(`called \\`inject\\` to override already-existing reducer ${reducerPath} without specifying \\`overrideExisting: true\\``);\n      }\n      return combinedReducer;\n    }\n    if (config.overrideExisting && currentReducer !== reducerToInject) {\n      delete initialStateCache[reducerPath];\n    }\n    reducerMap[reducerPath] = reducerToInject;\n    reducer = getReducer();\n    return combinedReducer;\n  };\n  const selector = Object.assign(function makeSelector<State extends object, RootState, Args extends any[]>(selectorFn: (state: State, ...args: Args) => any, selectState?: (rootState: RootState, ...args: Args) => State) {\n    return function selector(state: State, ...args: Args) {\n      return selectorFn(createStateProxy(selectState ? selectState(state as any, ...args) : state, reducerMap, initialStateCache), ...args);\n    };\n  }, {\n    original\n  });\n  return Object.assign(combinedReducer, {\n    inject,\n    selector\n  }) as any;\n}","/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nexport function formatProdErrorMessage(code: number) {\n  return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or ` + 'use the non-minified dev environment for full errors. ';\n}","import { isPlainObject as _iPO } from '../core/rtkImports';\n\n// remove type guard\nconst isPlainObject: (_: any) => boolean = _iPO;\nexport function copyWithStructuralSharing<T>(oldObj: any, newObj: T): T;\nexport function copyWithStructuralSharing(oldObj: any, newObj: any): any {\n  if (oldObj === newObj || !(isPlainObject(oldObj) && isPlainObject(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n    return newObj;\n  }\n  const newKeys = Object.keys(newObj);\n  const oldKeys = Object.keys(oldObj);\n  let isSameObject = newKeys.length === oldKeys.length;\n  const mergeObj: any = Array.isArray(newObj) ? [] : {};\n  for (const key of newKeys) {\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n  }\n  return isSameObject ? oldObj : mergeObj;\n}","// Fast method for counting an object's keys\n// without resorting to `Object.keys(obj).length\n// Will this make a big difference in perf? Probably not\n// But we can save a few allocations.\n\nexport function countObjectKeys(obj: Record<any, any>) {\n  let count = 0;\n  for (const _key in obj) {\n    count++;\n  }\n  return count;\n}","/**\r\n * Alternative to `Array.flat(1)`\r\n * @param arr An array like [1,2,3,[1,2]]\r\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\r\n */\nexport const flatten = (arr: readonly any[]) => [].concat(...arr);","/**\r\n * If either :// or // is present consider it to be an absolute url\r\n *\r\n * @param url string\r\n */\n\nexport function isAbsoluteUrl(url: string) {\n  return new RegExp(`(^|:)//`).test(url);\n}","/**\r\n * Assumes true for a non-browser env, otherwise makes a best effort\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState\r\n */\nexport function isDocumentVisible(): boolean {\n  // `document` may not exist in non-browser envs (like RN)\n  if (typeof document === 'undefined') {\n    return true;\n  }\n  // Match true for visible, prerender, undefined\n  return document.visibilityState !== 'hidden';\n}","export function isNotNullish<T>(v: T | null | undefined): v is T {\n  return v != null;\n}","/**\n * Assumes a browser is online if `undefined`, otherwise makes a best effort\n * @link https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n */\nexport function isOnline() {\n  // We set the default config value in the store, so we'd need to check for this in a SSR env\n  return typeof navigator === 'undefined' ? true : navigator.onLine === undefined ? true : navigator.onLine;\n}","import { isAbsoluteUrl } from './isAbsoluteUrl';\nconst withoutTrailingSlash = (url: string) => url.replace(/\\/$/, '');\nconst withoutLeadingSlash = (url: string) => url.replace(/^\\//, '');\nexport function joinUrls(base: string | undefined, url: string | undefined): string {\n  if (!base) {\n    return url!;\n  }\n  if (!url) {\n    return base;\n  }\n  if (isAbsoluteUrl(url)) {\n    return url;\n  }\n  const delimiter = base.endsWith('/') || !url.startsWith('?') ? '/' : '';\n  base = withoutTrailingSlash(base);\n  url = withoutLeadingSlash(url);\n  return `${base}${delimiter}${url}`;\n}","export function getOrInsert<K extends object, V>(map: WeakMap<K, V>, key: K, value: V): V;\nexport function getOrInsert<K, V>(map: Map<K, V>, key: K, value: V): V;\nexport function getOrInsert<K extends object, V>(map: Map<K, V> | WeakMap<K, V>, key: K, value: V): V {\n  if (map.has(key)) return map.get(key) as V;\n  return map.set(key, value).get(key) as V;\n}","import { joinUrls } from './utils';\nimport { isPlainObject } from './core/rtkImports';\nimport type { BaseQueryApi, BaseQueryFn } from './baseQueryTypes';\nimport type { MaybePromise, Override } from './tsHelpers';\nexport type ResponseHandler = 'content-type' | 'json' | 'text' | ((response: Response) => Promise<any>);\ntype CustomRequestInit = Override<RequestInit, {\n  headers?: Headers | string[][] | Record<string, string | undefined> | undefined;\n}>;\nexport interface FetchArgs extends CustomRequestInit {\n  url: string;\n  params?: Record<string, any>;\n  body?: any;\n  responseHandler?: ResponseHandler;\n  validateStatus?: (response: Response, body: any) => boolean;\n  /**\n   * A number in milliseconds that represents that maximum time a request can take before timing out.\n   */\n  timeout?: number;\n}\n\n/**\n * A mini-wrapper that passes arguments straight through to\n * {@link [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)}.\n * Avoids storing `fetch` in a closure, in order to permit mocking/monkey-patching.\n */\nconst defaultFetchFn: typeof fetch = (...args) => fetch(...args);\nconst defaultValidateStatus = (response: Response) => response.status >= 200 && response.status <= 299;\nconst defaultIsJsonContentType = (headers: Headers) => /*applicat*//ion\\/(vnd\\.api\\+)?json/.test(headers.get('content-type') || '');\nexport type FetchBaseQueryError = {\n  /**\n   * * `number`:\n   *   HTTP status code\n   */\n  status: number;\n  data: unknown;\n} | {\n  /**\n   * * `\"FETCH_ERROR\"`:\n   *   An error that occurred during execution of `fetch` or the `fetchFn` callback option\n   **/\n  status: 'FETCH_ERROR';\n  data?: undefined;\n  error: string;\n} | {\n  /**\n   * * `\"PARSING_ERROR\"`:\n   *   An error happened during parsing.\n   *   Most likely a non-JSON-response was returned with the default `responseHandler` \"JSON\",\n   *   or an error occurred while executing a custom `responseHandler`.\n   **/\n  status: 'PARSING_ERROR';\n  originalStatus: number;\n  data: string;\n  error: string;\n} | {\n  /**\n   * * `\"TIMEOUT_ERROR\"`:\n   *   Request timed out\n   **/\n  status: 'TIMEOUT_ERROR';\n  data?: undefined;\n  error: string;\n} | {\n  /**\n   * * `\"CUSTOM_ERROR\"`:\n   *   A custom error type that you can return from your `queryFn` where another error might not make sense.\n   **/\n  status: 'CUSTOM_ERROR';\n  data?: unknown;\n  error: string;\n};\nfunction stripUndefined(obj: any) {\n  if (!isPlainObject(obj)) {\n    return obj;\n  }\n  const copy: Record<string, any> = {\n    ...obj\n  };\n  for (const [k, v] of Object.entries(copy)) {\n    if (v === undefined) delete copy[k];\n  }\n  return copy;\n}\nexport type FetchBaseQueryArgs = {\n  baseUrl?: string;\n  prepareHeaders?: (headers: Headers, api: Pick<BaseQueryApi, 'getState' | 'extra' | 'endpoint' | 'type' | 'forced'> & {\n    arg: string | FetchArgs;\n    extraOptions: unknown;\n  }) => MaybePromise<Headers | void>;\n  fetchFn?: (input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>;\n  paramsSerializer?: (params: Record<string, any>) => string;\n  /**\n   * By default, we only check for 'application/json' and 'application/vnd.api+json' as the content-types for json. If you need to support another format, you can pass\n   * in a predicate function for your given api to get the same automatic stringifying behavior\n   * @example\n   * ```ts\n   * const isJsonContentType = (headers: Headers) => [\"application/vnd.api+json\", \"application/json\", \"application/vnd.hal+json\"].includes(headers.get(\"content-type\")?.trim());\n   * ```\n   */\n  isJsonContentType?: (headers: Headers) => boolean;\n  /**\n   * Defaults to `application/json`;\n   */\n  jsonContentType?: string;\n\n  /**\n   * Custom replacer function used when calling `JSON.stringify()`;\n   */\n  jsonReplacer?: (this: any, key: string, value: any) => any;\n} & RequestInit & Pick<FetchArgs, 'responseHandler' | 'validateStatus' | 'timeout'>;\nexport type FetchBaseQueryMeta = {\n  request: Request;\n  response?: Response;\n};\n\n/**\n * This is a very small wrapper around fetch that aims to simplify requests.\n *\n * @example\n * ```ts\n * const baseQuery = fetchBaseQuery({\n *   baseUrl: 'https://api.your-really-great-app.com/v1/',\n *   prepareHeaders: (headers, { getState }) => {\n *     const token = (getState() as RootState).auth.token;\n *     // If we have a token set in state, let's assume that we should be passing it.\n *     if (token) {\n *       headers.set('authorization', `Bearer ${token}`);\n *     }\n *     return headers;\n *   },\n * })\n * ```\n *\n * @param {string} baseUrl\n * The base URL for an API service.\n * Typically in the format of https://example.com/\n *\n * @param {(headers: Headers, api: { getState: () => unknown; arg: string | FetchArgs; extra: unknown; endpoint: string; type: 'query' | 'mutation'; forced: boolean; }) => Headers} prepareHeaders\n * An optional function that can be used to inject headers on requests.\n * Provides a Headers object, most of the `BaseQueryApi` (`dispatch` is not available), and the arg passed into the query function.\n * Useful for setting authentication or headers that need to be set conditionally.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Headers\n *\n * @param {(input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>} fetchFn\n * Accepts a custom `fetch` function if you do not want to use the default on the window.\n * Useful in SSR environments if you need to use a library such as `isomorphic-fetch` or `cross-fetch`\n *\n * @param {(params: Record<string, unknown>) => string} paramsSerializer\n * An optional function that can be used to stringify querystring parameters.\n *\n * @param {(headers: Headers) => boolean} isJsonContentType\n * An optional predicate function to determine if `JSON.stringify()` should be called on the `body` arg of `FetchArgs`\n *\n * @param {string} jsonContentType Used when automatically setting the content-type header for a request with a jsonifiable body that does not have an explicit content-type header. Defaults to `application/json`.\n *\n * @param {(this: any, key: string, value: any) => any} jsonReplacer Custom replacer function used when calling `JSON.stringify()`.\n *\n * @param {number} timeout\n * A number in milliseconds that represents the maximum time a request can take before timing out.\n */\n\nexport function fetchBaseQuery({\n  baseUrl,\n  prepareHeaders = x => x,\n  fetchFn = defaultFetchFn,\n  paramsSerializer,\n  isJsonContentType = defaultIsJsonContentType,\n  jsonContentType = 'application/json',\n  jsonReplacer,\n  timeout: defaultTimeout,\n  responseHandler: globalResponseHandler,\n  validateStatus: globalValidateStatus,\n  ...baseFetchOptions\n}: FetchBaseQueryArgs = {}): BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError, {}, FetchBaseQueryMeta> {\n  if (typeof fetch === 'undefined' && fetchFn === defaultFetchFn) {\n    console.warn('Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.');\n  }\n  return async (arg, api, extraOptions) => {\n    const {\n      getState,\n      extra,\n      endpoint,\n      forced,\n      type\n    } = api;\n    let meta: FetchBaseQueryMeta | undefined;\n    let {\n      url,\n      headers = new Headers(baseFetchOptions.headers),\n      params = undefined,\n      responseHandler = globalResponseHandler ?? 'json' as const,\n      validateStatus = globalValidateStatus ?? defaultValidateStatus,\n      timeout = defaultTimeout,\n      ...rest\n    } = typeof arg == 'string' ? {\n      url: arg\n    } : arg;\n    let abortController: AbortController | undefined,\n      signal = api.signal;\n    if (timeout) {\n      abortController = new AbortController();\n      api.signal.addEventListener('abort', abortController.abort);\n      signal = abortController.signal;\n    }\n    let config: RequestInit = {\n      ...baseFetchOptions,\n      signal,\n      ...rest\n    };\n    headers = new Headers(stripUndefined(headers));\n    config.headers = (await prepareHeaders(headers, {\n      getState,\n      arg,\n      extra,\n      endpoint,\n      forced,\n      type,\n      extraOptions\n    })) || headers;\n\n    // Only set the content-type to json if appropriate. Will not be true for FormData, ArrayBuffer, Blob, etc.\n    const isJsonifiable = (body: any) => typeof body === 'object' && (isPlainObject(body) || Array.isArray(body) || typeof body.toJSON === 'function');\n    if (!config.headers.has('content-type') && isJsonifiable(config.body)) {\n      config.headers.set('content-type', jsonContentType);\n    }\n    if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n      config.body = JSON.stringify(config.body, jsonReplacer);\n    }\n    if (params) {\n      const divider = ~url.indexOf('?') ? '&' : '?';\n      const query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n      url += divider + query;\n    }\n    url = joinUrls(baseUrl, url);\n    const request = new Request(url, config);\n    const requestClone = new Request(url, config);\n    meta = {\n      request: requestClone\n    };\n    let response,\n      timedOut = false,\n      timeoutId = abortController && setTimeout(() => {\n        timedOut = true;\n        abortController!.abort();\n      }, timeout);\n    try {\n      response = await fetchFn(request);\n    } catch (e) {\n      return {\n        error: {\n          status: timedOut ? 'TIMEOUT_ERROR' : 'FETCH_ERROR',\n          error: String(e)\n        },\n        meta\n      };\n    } finally {\n      if (timeoutId) clearTimeout(timeoutId);\n      abortController?.signal.removeEventListener('abort', abortController.abort);\n    }\n    const responseClone = response.clone();\n    meta.response = responseClone;\n    let resultData: any;\n    let responseText: string = '';\n    try {\n      let handleResponseError;\n      await Promise.all([handleResponse(response, responseHandler).then(r => resultData = r, e => handleResponseError = e),\n      // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n      // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n      responseClone.text().then(r => responseText = r, () => {})]);\n      if (handleResponseError) throw handleResponseError;\n    } catch (e) {\n      return {\n        error: {\n          status: 'PARSING_ERROR',\n          originalStatus: response.status,\n          data: responseText,\n          error: String(e)\n        },\n        meta\n      };\n    }\n    return validateStatus(response, resultData) ? {\n      data: resultData,\n      meta\n    } : {\n      error: {\n        status: response.status,\n        data: resultData\n      },\n      meta\n    };\n  };\n  async function handleResponse(response: Response, responseHandler: ResponseHandler) {\n    if (typeof responseHandler === 'function') {\n      return responseHandler(response);\n    }\n    if (responseHandler === 'content-type') {\n      responseHandler = isJsonContentType(response.headers) ? 'json' : 'text';\n    }\n    if (responseHandler === 'json') {\n      const text = await response.text();\n      return text.length ? JSON.parse(text) : null;\n    }\n    return response.text();\n  }\n}","export class HandledError {\n  constructor(public readonly value: any, public readonly meta: any = undefined) {}\n}","import type { BaseQueryApi, BaseQueryArg, BaseQueryEnhancer, BaseQueryError, BaseQueryExtraOptions, BaseQueryFn, BaseQueryMeta } from './baseQueryTypes';\nimport type { FetchBaseQueryError } from './fetchBaseQuery';\nimport { HandledError } from './HandledError';\n\n/**\n * Exponential backoff based on the attempt number.\n *\n * @remarks\n * 1. 600ms * random(0.4, 1.4)\n * 2. 1200ms * random(0.4, 1.4)\n * 3. 2400ms * random(0.4, 1.4)\n * 4. 4800ms * random(0.4, 1.4)\n * 5. 9600ms * random(0.4, 1.4)\n *\n * @param attempt - Current attempt\n * @param maxRetries - Maximum number of retries\n */\nasync function defaultBackoff(attempt: number = 0, maxRetries: number = 5) {\n  const attempts = Math.min(attempt, maxRetries);\n  const timeout = ~~((Math.random() + 0.4) * (300 << attempts)); // Force a positive int in the case we make this an option\n  await new Promise(resolve => setTimeout((res: any) => resolve(res), timeout));\n}\ntype RetryConditionFunction = (error: BaseQueryError<BaseQueryFn>, args: BaseQueryArg<BaseQueryFn>, extraArgs: {\n  attempt: number;\n  baseQueryApi: BaseQueryApi;\n  extraOptions: BaseQueryExtraOptions<BaseQueryFn> & RetryOptions;\n}) => boolean;\nexport type RetryOptions = {\n  /**\n   * Function used to determine delay between retries\n   */\n  backoff?: (attempt: number, maxRetries: number) => Promise<void>;\n} & ({\n  /**\n   * How many times the query will be retried (default: 5)\n   */\n  maxRetries?: number;\n  retryCondition?: undefined;\n} | {\n  /**\n   * Callback to determine if a retry should be attempted.\n   * Return `true` for another retry and `false` to quit trying prematurely.\n   */\n  retryCondition?: RetryConditionFunction;\n  maxRetries?: undefined;\n});\nfunction fail<BaseQuery extends BaseQueryFn = BaseQueryFn>(error: BaseQueryError<BaseQuery>, meta?: BaseQueryMeta<BaseQuery>): never {\n  throw Object.assign(new HandledError({\n    error,\n    meta\n  }), {\n    throwImmediately: true\n  });\n}\nconst EMPTY_OPTIONS = {};\nconst retryWithBackoff: BaseQueryEnhancer<unknown, RetryOptions, RetryOptions | void> = (baseQuery, defaultOptions) => async (args, api, extraOptions) => {\n  // We need to figure out `maxRetries` before we define `defaultRetryCondition.\n  // This is probably goofy, but ought to work.\n  // Put our defaults in one array, filter out undefineds, grab the last value.\n  const possibleMaxRetries: number[] = [5, (defaultOptions as any || EMPTY_OPTIONS).maxRetries, (extraOptions as any || EMPTY_OPTIONS).maxRetries].filter(x => x !== undefined);\n  const [maxRetries] = possibleMaxRetries.slice(-1);\n  const defaultRetryCondition: RetryConditionFunction = (_, __, {\n    attempt\n  }) => attempt <= maxRetries;\n  const options: {\n    maxRetries: number;\n    backoff: typeof defaultBackoff;\n    retryCondition: typeof defaultRetryCondition;\n  } = {\n    maxRetries,\n    backoff: defaultBackoff,\n    retryCondition: defaultRetryCondition,\n    ...defaultOptions,\n    ...extraOptions\n  };\n  let retry = 0;\n  while (true) {\n    try {\n      const result = await baseQuery(args, api, extraOptions);\n      // baseQueries _should_ return an error property, so we should check for that and throw it to continue retrying\n      if (result.error) {\n        throw new HandledError(result);\n      }\n      return result;\n    } catch (e: any) {\n      retry++;\n      if (e.throwImmediately) {\n        if (e instanceof HandledError) {\n          return e.value;\n        }\n\n        // We don't know what this is, so we have to rethrow it\n        throw e;\n      }\n      if (e instanceof HandledError && !options.retryCondition(e.value.error as FetchBaseQueryError, args, {\n        attempt: retry,\n        baseQueryApi: api,\n        extraOptions\n      })) {\n        return e.value;\n      }\n      await options.backoff(retry, options.maxRetries);\n    }\n  }\n};\n\n/**\n * A utility that can wrap `baseQuery` in the API definition to provide retries with a basic exponential backoff.\n *\n * @example\n *\n * ```ts\n * // codeblock-meta title=\"Retry every request 5 times by default\"\n * import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react'\n * interface Post {\n *   id: number\n *   name: string\n * }\n * type PostsResponse = Post[]\n *\n * // maxRetries: 5 is the default, and can be omitted. Shown for documentation purposes.\n * const staggeredBaseQuery = retry(fetchBaseQuery({ baseUrl: '/' }), { maxRetries: 5 });\n * export const api = createApi({\n *   baseQuery: staggeredBaseQuery,\n *   endpoints: (build) => ({\n *     getPosts: build.query<PostsResponse, void>({\n *       query: () => ({ url: 'posts' }),\n *     }),\n *     getPost: build.query<PostsResponse, string>({\n *       query: (id) => ({ url: `post/${id}` }),\n *       extraOptions: { maxRetries: 8 }, // You can override the retry behavior on each endpoint\n *     }),\n *   }),\n * });\n *\n * export const { useGetPostsQuery, useGetPostQuery } = api;\n * ```\n */\nexport const retry = /* @__PURE__ */Object.assign(retryWithBackoff, {\n  fail\n});","import type { ThunkDispatch, ActionCreatorWithoutPayload // Workaround for API-Extractor\n} from '@reduxjs/toolkit';\nimport { createAction } from './rtkImports';\nexport const onFocus = /* @__PURE__ */createAction('__rtkq/focused');\nexport const onFocusLost = /* @__PURE__ */createAction('__rtkq/unfocused');\nexport const onOnline = /* @__PURE__ */createAction('__rtkq/online');\nexport const onOffline = /* @__PURE__ */createAction('__rtkq/offline');\nlet initialized = false;\n\n/**\n * A utility used to enable `refetchOnMount` and `refetchOnReconnect` behaviors.\n * It requires the dispatch method from your store.\n * Calling `setupListeners(store.dispatch)` will configure listeners with the recommended defaults,\n * but you have the option of providing a callback for more granular control.\n *\n * @example\n * ```ts\n * setupListeners(store.dispatch)\n * ```\n *\n * @param dispatch - The dispatch method from your store\n * @param customHandler - An optional callback for more granular control over listener behavior\n * @returns Return value of the handler.\n * The default handler returns an `unsubscribe` method that can be called to remove the listeners.\n */\nexport function setupListeners(dispatch: ThunkDispatch<any, any, any>, customHandler?: (dispatch: ThunkDispatch<any, any, any>, actions: {\n  onFocus: typeof onFocus;\n  onFocusLost: typeof onFocusLost;\n  onOnline: typeof onOnline;\n  onOffline: typeof onOffline;\n}) => () => void) {\n  function defaultHandler() {\n    const handleFocus = () => dispatch(onFocus());\n    const handleFocusLost = () => dispatch(onFocusLost());\n    const handleOnline = () => dispatch(onOnline());\n    const handleOffline = () => dispatch(onOffline());\n    const handleVisibilityChange = () => {\n      if (window.document.visibilityState === 'visible') {\n        handleFocus();\n      } else {\n        handleFocusLost();\n      }\n    };\n    if (!initialized) {\n      if (typeof window !== 'undefined' && window.addEventListener) {\n        // Handle focus events\n        window.addEventListener('visibilitychange', handleVisibilityChange, false);\n        window.addEventListener('focus', handleFocus, false);\n\n        // Handle connection events\n        window.addEventListener('online', handleOnline, false);\n        window.addEventListener('offline', handleOffline, false);\n        initialized = true;\n      }\n    }\n    const unsubscribe = () => {\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      initialized = false;\n    };\n    return unsubscribe;\n  }\n  return customHandler ? customHandler(dispatch, {\n    onFocus,\n    onFocusLost,\n    onOffline,\n    onOnline\n  }) : defaultHandler();\n}","import type { Api } from '@reduxjs/toolkit/query';\nimport type { StandardSchemaV1 } from '@standard-schema/spec';\nimport type { BaseQueryApi, BaseQueryArg, BaseQueryError, BaseQueryExtraOptions, BaseQueryFn, BaseQueryMeta, BaseQueryResult, QueryReturnValue } from './baseQueryTypes';\nimport type { CacheCollectionQueryExtraOptions } from './core/buildMiddleware/cacheCollection';\nimport type { CacheLifecycleInfiniteQueryExtraOptions, CacheLifecycleMutationExtraOptions, CacheLifecycleQueryExtraOptions } from './core/buildMiddleware/cacheLifecycle';\nimport type { QueryLifecycleInfiniteQueryExtraOptions, QueryLifecycleMutationExtraOptions, QueryLifecycleQueryExtraOptions } from './core/buildMiddleware/queryLifecycle';\nimport type { InfiniteData, InfiniteQueryConfigOptions, QuerySubState, RootState } from './core/index';\nimport type { SerializeQueryArgs } from './defaultSerializeQueryArgs';\nimport type { NEVER } from './fakeBaseQuery';\nimport type { CastAny, HasRequiredProps, MaybePromise, NonUndefined, OmitFromUnion, UnwrapPromise } from './tsHelpers';\nimport { isNotNullish } from './utils';\nimport type { NamedSchemaError } from './standardSchema';\nconst rawResultType = /* @__PURE__ */Symbol();\nconst resultType = /* @__PURE__ */Symbol();\nconst baseQuery = /* @__PURE__ */Symbol();\nexport interface SchemaFailureInfo {\n  endpoint: string;\n  arg: any;\n  type: 'query' | 'mutation';\n  queryCacheKey?: string;\n}\nexport type SchemaFailureHandler = (error: NamedSchemaError, info: SchemaFailureInfo) => void;\nexport type SchemaFailureConverter<BaseQuery extends BaseQueryFn> = (error: NamedSchemaError, info: SchemaFailureInfo) => BaseQueryError<BaseQuery>;\nexport type EndpointDefinitionWithQuery<QueryArg, BaseQuery extends BaseQueryFn, ResultType, RawResultType extends BaseQueryResult<BaseQuery>> = {\n  /**\n   * `query` can be a function that returns either a `string` or an `object` which is passed to your `baseQuery`. If you are using [fetchBaseQuery](./fetchBaseQuery), this can return either a `string` or an `object` of properties in `FetchArgs`. If you use your own custom [`baseQuery`](../../rtk-query/usage/customizing-queries), you can customize this behavior to your liking.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"query example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Post'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       // highlight-start\n   *       query: () => 'posts',\n   *       // highlight-end\n   *     }),\n   *     addPost: build.mutation<Post, Partial<Post>>({\n   *      // highlight-start\n   *      query: (body) => ({\n   *        url: `posts`,\n   *        method: 'POST',\n   *        body,\n   *      }),\n   *      // highlight-end\n   *      invalidatesTags: [{ type: 'Post', id: 'LIST' }],\n   *    }),\n   *   })\n   * })\n   * ```\n   */\n  query(arg: QueryArg): BaseQueryArg<BaseQuery>;\n  queryFn?: never;\n  /**\n   * A function to manipulate the data returned by a query or mutation.\n   */\n  transformResponse?(baseQueryReturnValue: RawResultType, meta: BaseQueryMeta<BaseQuery>, arg: QueryArg): ResultType | Promise<ResultType>;\n  /**\n   * A function to manipulate the data returned by a failed query or mutation.\n   */\n  transformErrorResponse?(baseQueryReturnValue: BaseQueryError<BaseQuery>, meta: BaseQueryMeta<BaseQuery>, arg: QueryArg): unknown;\n\n  /**\n   * A schema for the result *before* it's passed to `transformResponse`.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const postSchema = v.object({ id: v.number(), name: v.string() })\n   * type Post = v.InferOutput<typeof postSchema>\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPostName: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       rawResponseSchema: postSchema,\n   *       transformResponse: (post) => post.name,\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  rawResponseSchema?: StandardSchemaV1<RawResultType>;\n\n  /**\n   * A schema for the error object returned by the `query` or `queryFn`, *before* it's passed to `transformErrorResponse`.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   * import {customBaseQuery, baseQueryErrorSchema} from \"./customBaseQuery\"\n   *\n   * const api = createApi({\n   *   baseQuery: customBaseQuery,\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       rawErrorResponseSchema: baseQueryErrorSchema,\n   *       transformErrorResponse: (error) => error.data,\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  rawErrorResponseSchema?: StandardSchemaV1<BaseQueryError<BaseQuery>>;\n};\nexport type EndpointDefinitionWithQueryFn<QueryArg, BaseQuery extends BaseQueryFn, ResultType> = {\n  /**\n   * Can be used in place of `query` as an inline function that bypasses `baseQuery` completely for the endpoint.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Basic queryFn example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *     }),\n   *     flipCoin: build.query<'heads' | 'tails', void>({\n   *       // highlight-start\n   *       queryFn(arg, queryApi, extraOptions, baseQuery) {\n   *         const randomVal = Math.random()\n   *         if (randomVal < 0.45) {\n   *           return { data: 'heads' }\n   *         }\n   *         if (randomVal < 0.9) {\n   *           return { data: 'tails' }\n   *         }\n   *         return { error: { status: 500, statusText: 'Internal Server Error', data: \"Coin landed on its edge!\" } }\n   *       }\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  queryFn(arg: QueryArg, api: BaseQueryApi, extraOptions: BaseQueryExtraOptions<BaseQuery>, baseQuery: (arg: Parameters<BaseQuery>[0]) => ReturnType<BaseQuery>): MaybePromise<QueryReturnValue<ResultType, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>>;\n  query?: never;\n  transformResponse?: never;\n  transformErrorResponse?: never;\n  rawResponseSchema?: never;\n  rawErrorResponseSchema?: never;\n};\ntype BaseEndpointTypes<QueryArg, BaseQuery extends BaseQueryFn, ResultType> = {\n  QueryArg: QueryArg;\n  BaseQuery: BaseQuery;\n  ResultType: ResultType;\n};\ninterface CommonEndpointDefinition<QueryArg, BaseQuery extends BaseQueryFn, ResultType> {\n  /**\n   * A schema for the arguments to be passed to the `query` or `queryFn`.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       argSchema: v.object({ id: v.number() }),\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  argSchema?: StandardSchemaV1<QueryArg>;\n\n  /**\n   * A schema for the result (including `transformResponse` if provided).\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const postSchema = v.object({ id: v.number(), name: v.string() })\n   * type Post = v.InferOutput<typeof postSchema>\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       responseSchema: postSchema,\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  responseSchema?: StandardSchemaV1<ResultType>;\n\n  /**\n   * A schema for the error object returned by the `query` or `queryFn` (including `transformErrorResponse` if provided).\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   * import { customBaseQuery, baseQueryErrorSchema } from \"./customBaseQuery\"\n   *\n   * const api = createApi({\n   *   baseQuery: customBaseQuery,\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       errorResponseSchema: baseQueryErrorSchema,\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  errorResponseSchema?: StandardSchemaV1<BaseQueryError<BaseQuery>>;\n\n  /**\n   * A schema for the `meta` property returned by the `query` or `queryFn`.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   * import { customBaseQuery, baseQueryMetaSchema } from \"./customBaseQuery\"\n   *\n   * const api = createApi({\n   *   baseQuery: customBaseQuery,\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       metaSchema: baseQueryMetaSchema,\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  metaSchema?: StandardSchemaV1<BaseQueryMeta<BaseQuery>>;\n\n  /**\n   * Defaults to `true`.\n   *\n   * Most apps should leave this setting on. The only time it can be a performance issue\n   * is if an API returns extremely large amounts of data (e.g. 10,000 rows per request) and\n   * you're unable to paginate it.\n   *\n   * For details of how this works, please see the below. When it is set to `false`,\n   * every request will cause subscribed components to rerender, even when the data has not changed.\n   *\n   * @see https://redux-toolkit.js.org/api/other-exports#copywithstructuralsharing\n   */\n  structuralSharing?: boolean;\n\n  /**\n   * A function that is called when a schema validation fails.\n   *\n   * Gets called with a `NamedSchemaError` and an object containing the endpoint name, the type of the endpoint, the argument passed to the endpoint, and the query cache key (if applicable).\n   *\n   * `NamedSchemaError` has the following properties:\n   * - `issues`: an array of issues that caused the validation to fail\n   * - `value`: the value that was passed to the schema\n   * - `schemaName`: the name of the schema that was used to validate the value (e.g. `argSchema`)\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       onSchemaFailure: (error, info) => {\n   *         console.error(error, info)\n   *       },\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  onSchemaFailure?: SchemaFailureHandler;\n\n  /**\n   * Convert a schema validation failure into an error shape matching base query errors.\n   *\n   * When not provided, schema failures are treated as fatal, and normal error handling such as tag invalidation will not be executed.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       responseSchema: v.object({ id: v.number(), name: v.string() }),\n   *       catchSchemaFailure: (error, info) => ({\n   *         status: \"CUSTOM_ERROR\",\n   *         error: error.schemaName + \" failed validation\",\n   *         data: error.issues,\n   *       }),\n   *     }),\n   *   }),\n   * })\n   * ```\n   */\n  catchSchemaFailure?: SchemaFailureConverter<BaseQuery>;\n\n  /**\n   * Defaults to `false`.\n   *\n   * If set to `true`, will skip schema validation for this endpoint.\n   * Overrides the global setting.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       responseSchema: v.object({ id: v.number(), name: v.string() }),\n   *       skipSchemaValidation: process.env.NODE_ENV === \"test\", // skip schema validation in tests, since we'll be mocking the response\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  skipSchemaValidation?: boolean;\n}\nexport type BaseEndpointDefinition<QueryArg, BaseQuery extends BaseQueryFn, ResultType, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>> = (([CastAny<BaseQueryResult<BaseQuery>, {}>] extends [NEVER] ? never : EndpointDefinitionWithQuery<QueryArg, BaseQuery, ResultType, RawResultType>) | EndpointDefinitionWithQueryFn<QueryArg, BaseQuery, ResultType>) & CommonEndpointDefinition<QueryArg, BaseQuery, ResultType> & {\n  /* phantom type */\n  [rawResultType]?: RawResultType;\n  /* phantom type */\n  [resultType]?: ResultType;\n  /* phantom type */\n  [baseQuery]?: BaseQuery;\n} & HasRequiredProps<BaseQueryExtraOptions<BaseQuery>, {\n  extraOptions: BaseQueryExtraOptions<BaseQuery>;\n}, {\n  extraOptions?: BaseQueryExtraOptions<BaseQuery>;\n}>;\nexport enum DefinitionType {\n  query = 'query',\n  mutation = 'mutation',\n  infinitequery = 'infinitequery',\n}\ntype TagDescriptionArray<TagTypes extends string> = ReadonlyArray<TagDescription<TagTypes> | undefined | null>;\nexport type GetResultDescriptionFn<TagTypes extends string, ResultType, QueryArg, ErrorType, MetaType> = (result: ResultType | undefined, error: ErrorType | undefined, arg: QueryArg, meta: MetaType) => TagDescriptionArray<TagTypes>;\nexport type FullTagDescription<TagType> = {\n  type: TagType;\n  id?: number | string;\n};\nexport type TagDescription<TagType> = TagType | FullTagDescription<TagType>;\n\n/**\n * @public\n */\nexport type ResultDescription<TagTypes extends string, ResultType, QueryArg, ErrorType, MetaType> = TagDescriptionArray<TagTypes> | GetResultDescriptionFn<TagTypes, ResultType, QueryArg, ErrorType, MetaType>;\ntype QueryTypes<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointTypes<QueryArg, BaseQuery, ResultType> & {\n  /**\n   * The endpoint definition type. To be used with some internal generic types.\n   * @example\n   * ```ts\n   * const useMyWrappedHook: UseQuery<typeof api.endpoints.query.Types.QueryDefinition> = ...\n   * ```\n   */\n  QueryDefinition: QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  TagTypes: TagTypes;\n  ReducerPath: ReducerPath;\n};\n\n/**\n * @public\n */\nexport interface QueryExtraOptions<TagTypes extends string, ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> extends CacheLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>, QueryLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>, CacheCollectionQueryExtraOptions {\n  type: DefinitionType.query;\n\n  /**\n   * Used by `query` endpoints. Determines which 'tag' is attached to the cached data returned by the query.\n   * Expects an array of tag type strings, an array of objects of tag types with ids, or a function that returns such an array.\n   * 1.  `['Post']` - equivalent to `2`\n   * 2.  `[{ type: 'Post' }]` - equivalent to `1`\n   * 3.  `[{ type: 'Post', id: 1 }]`\n   * 4.  `(result, error, arg) => ['Post']` - equivalent to `5`\n   * 5.  `(result, error, arg) => [{ type: 'Post' }]` - equivalent to `4`\n   * 6.  `(result, error, arg) => [{ type: 'Post', id: 1 }]`\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"providesTags example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       // highlight-start\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  providesTags?: ResultDescription<TagTypes, ResultType, QueryArg, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>;\n  /**\n   * Not to be used. A query should not invalidate tags in the cache.\n   */\n  invalidatesTags?: never;\n\n  /**\n   * Can be provided to return a custom cache key value based on the query arguments.\n   *\n   * This is primarily intended for cases where a non-serializable value is passed as part of the query arg object and should be excluded from the cache key.  It may also be used for cases where an endpoint should only have a single cache entry, such as an infinite loading / pagination implementation.\n   *\n   * Unlike the `createApi` version which can _only_ return a string, this per-endpoint option can also return an an object, number, or boolean.  If it returns a string, that value will be used as the cache key directly.  If it returns an object / number / boolean, that value will be passed to the built-in `defaultSerializeQueryArgs`.  This simplifies the use case of stripping out args you don't want included in the cache key.\n   *\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"serializeQueryArgs : exclude value\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * interface MyApiClient {\n   *   fetchPost: (id: string) => Promise<Post>\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    // Example: an endpoint with an API client passed in as an argument,\n   *    // but only the item ID should be used as the cache key\n   *    getPost: build.query<Post, { id: string; client: MyApiClient }>({\n   *      queryFn: async ({ id, client }) => {\n   *        const post = await client.fetchPost(id)\n   *        return { data: post }\n   *      },\n   *      // highlight-start\n   *      serializeQueryArgs: ({ queryArgs, endpointDefinition, endpointName }) => {\n   *        const { id } = queryArgs\n   *        // This can return a string, an object, a number, or a boolean.\n   *        // If it returns an object, number or boolean, that value\n   *        // will be serialized automatically via `defaultSerializeQueryArgs`\n   *        return { id } // omit `client` from the cache key\n   *\n   *        // Alternately, you can use `defaultSerializeQueryArgs` yourself:\n   *        // return defaultSerializeQueryArgs({\n   *        //   endpointName,\n   *        //   queryArgs: { id },\n   *        //   endpointDefinition\n   *        // })\n   *        // Or  create and return a string yourself:\n   *        // return `getPost(${id})`\n   *      },\n   *      // highlight-end\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n  serializeQueryArgs?: SerializeQueryArgs<QueryArg, string | number | boolean | Record<any, any>>;\n\n  /**\n   * Can be provided to merge an incoming response value into the current cache data.\n   * If supplied, no automatic structural sharing will be applied - it's up to\n   * you to update the cache appropriately.\n   *\n   * Since RTKQ normally replaces cache entries with the new response, you will usually\n   * need to use this with the `serializeQueryArgs` or `forceRefetch` options to keep\n   * an existing cache entry so that it can be updated.\n   *\n   * Since this is wrapped with Immer, you may either mutate the `currentCacheValue` directly,\n   * or return a new value, but _not_ both at once.\n   *\n   * Will only be called if the existing `currentCacheData` is _not_ `undefined` - on first response,\n   * the cache entry will just save the response data directly.\n   *\n   * Useful if you don't want a new request to completely override the current cache value,\n   * maybe because you have manually updated it from another source and don't want those\n   * updates to get lost.\n   *\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"merge: pagination\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    listItems: build.query<string[], number>({\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\n   *     // Only have one cache entry because the arg always maps to one string\n   *     serializeQueryArgs: ({ endpointName }) => {\n   *       return endpointName\n   *      },\n   *      // Always merge incoming data to the cache entry\n   *      merge: (currentCache, newItems) => {\n   *        currentCache.push(...newItems)\n   *      },\n   *      // Refetch when the page arg changes\n   *      forceRefetch({ currentArg, previousArg }) {\n   *        return currentArg !== previousArg\n   *      },\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n  merge?(currentCacheData: ResultType, responseData: ResultType, otherArgs: {\n    arg: QueryArg;\n    baseQueryMeta: BaseQueryMeta<BaseQuery>;\n    requestId: string;\n    fulfilledTimeStamp: number;\n  }): ResultType | void;\n\n  /**\n   * Check to see if the endpoint should force a refetch in cases where it normally wouldn't.\n   * This is primarily useful for \"infinite scroll\" / pagination use cases where\n   * RTKQ is keeping a single cache entry that is added to over time, in combination\n   * with `serializeQueryArgs` returning a fixed cache key and a `merge` callback\n   * set to add incoming data to the cache entry each time.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"forceRefresh: pagination\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    listItems: build.query<string[], number>({\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\n   *     // Only have one cache entry because the arg always maps to one string\n   *     serializeQueryArgs: ({ endpointName }) => {\n   *       return endpointName\n   *      },\n   *      // Always merge incoming data to the cache entry\n   *      merge: (currentCache, newItems) => {\n   *        currentCache.push(...newItems)\n   *      },\n   *      // Refetch when the page arg changes\n   *      forceRefetch({ currentArg, previousArg }) {\n   *        return currentArg !== previousArg\n   *      },\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n  forceRefetch?(params: {\n    currentArg: QueryArg | undefined;\n    previousArg: QueryArg | undefined;\n    state: RootState<any, any, string>;\n    endpointState?: QuerySubState<any>;\n  }): boolean;\n\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types?: QueryTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n}\nexport type QueryDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType, RawResultType> & QueryExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>;\nexport type InfiniteQueryTypes<QueryArg, PageParam, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointTypes<QueryArg, BaseQuery, ResultType> & {\n  /**\n   * The endpoint definition type. To be used with some internal generic types.\n   * @example\n   * ```ts\n   * const useMyWrappedHook: UseQuery<typeof api.endpoints.query.Types.QueryDefinition> = ...\n   * ```\n   */\n  InfiniteQueryDefinition: InfiniteQueryDefinition<QueryArg, PageParam, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  TagTypes: TagTypes;\n  ReducerPath: ReducerPath;\n};\nexport interface InfiniteQueryExtraOptions<TagTypes extends string, ResultType, QueryArg, PageParam, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> extends CacheLifecycleInfiniteQueryExtraOptions<InfiniteData<ResultType, PageParam>, QueryArg, BaseQuery, ReducerPath>, QueryLifecycleInfiniteQueryExtraOptions<InfiniteData<ResultType, PageParam>, QueryArg, BaseQuery, ReducerPath>, CacheCollectionQueryExtraOptions {\n  type: DefinitionType.infinitequery;\n  providesTags?: ResultDescription<TagTypes, InfiniteData<ResultType, PageParam>, QueryArg, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>;\n  /**\n   * Not to be used. A query should not invalidate tags in the cache.\n   */\n  invalidatesTags?: never;\n\n  /**\n   * Required options to configure the infinite query behavior.\n   * `initialPageParam` and `getNextPageParam` are required, to\n   * ensure the infinite query can properly fetch the next page of data.\n   * `initialPageParam` may be specified when using the\n   * endpoint, to override the default value.\n   * `maxPages` and `getPreviousPageParam` are both optional.\n   * \n   * @example\n   * \n   * ```ts\n   * // codeblock-meta title=\"infiniteQueryOptions example\"\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * \n   * type Pokemon = {\n   *   id: string\n   *   name: string\n   * }\n   * \n   * const pokemonApi = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: 'https://pokeapi.co/api/v2/' }),\n   *   endpoints: (build) => ({\n   *     getInfinitePokemonWithMax: build.infiniteQuery<Pokemon[], string, number>({\n   *       infiniteQueryOptions: {\n   *         initialPageParam: 0,\n   *         maxPages: 3,\n   *         getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) =>\n   *           lastPageParam + 1,\n   *         getPreviousPageParam: (\n   *           firstPage,\n   *           allPages,\n   *           firstPageParam,\n   *           allPageParams,\n   *         ) => {\n   *           return firstPageParam > 0 ? firstPageParam - 1 : undefined\n   *         },\n   *       },\n   *       query({pageParam}) {\n   *         return `https://example.com/listItems?page=${pageParam}`\n   *       },\n   *     }),\n   *   }),\n   * })\n   \n   * ```\n   */\n  infiniteQueryOptions: InfiniteQueryConfigOptions<ResultType, PageParam, QueryArg>;\n\n  /**\n   * Can be provided to return a custom cache key value based on the query arguments.\n   *\n   * This is primarily intended for cases where a non-serializable value is passed as part of the query arg object and should be excluded from the cache key.  It may also be used for cases where an endpoint should only have a single cache entry, such as an infinite loading / pagination implementation.\n   *\n   * Unlike the `createApi` version which can _only_ return a string, this per-endpoint option can also return an an object, number, or boolean.  If it returns a string, that value will be used as the cache key directly.  If it returns an object / number / boolean, that value will be passed to the built-in `defaultSerializeQueryArgs`.  This simplifies the use case of stripping out args you don't want included in the cache key.\n   *\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"serializeQueryArgs : exclude value\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * interface MyApiClient {\n   *   fetchPost: (id: string) => Promise<Post>\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    // Example: an endpoint with an API client passed in as an argument,\n   *    // but only the item ID should be used as the cache key\n   *    getPost: build.query<Post, { id: string; client: MyApiClient }>({\n   *      queryFn: async ({ id, client }) => {\n   *        const post = await client.fetchPost(id)\n   *        return { data: post }\n   *      },\n   *      // highlight-start\n   *      serializeQueryArgs: ({ queryArgs, endpointDefinition, endpointName }) => {\n   *        const { id } = queryArgs\n   *        // This can return a string, an object, a number, or a boolean.\n   *        // If it returns an object, number or boolean, that value\n   *        // will be serialized automatically via `defaultSerializeQueryArgs`\n   *        return { id } // omit `client` from the cache key\n   *\n   *        // Alternately, you can use `defaultSerializeQueryArgs` yourself:\n   *        // return defaultSerializeQueryArgs({\n   *        //   endpointName,\n   *        //   queryArgs: { id },\n   *        //   endpointDefinition\n   *        // })\n   *        // Or  create and return a string yourself:\n   *        // return `getPost(${id})`\n   *      },\n   *      // highlight-end\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n  serializeQueryArgs?: SerializeQueryArgs<QueryArg, string | number | boolean | Record<any, any>>;\n\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types?: InfiniteQueryTypes<QueryArg, PageParam, BaseQuery, TagTypes, ResultType, ReducerPath>;\n}\nexport type InfiniteQueryDefinition<QueryArg, PageParam, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>> =\n// Infinite query endpoints receive `{queryArg, pageParam}`\nBaseEndpointDefinition<InfiniteQueryCombinedArg<QueryArg, PageParam>, BaseQuery, ResultType, RawResultType> & InfiniteQueryExtraOptions<TagTypes, ResultType, QueryArg, PageParam, BaseQuery, ReducerPath>;\ntype MutationTypes<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointTypes<QueryArg, BaseQuery, ResultType> & {\n  /**\n   * The endpoint definition type. To be used with some internal generic types.\n   * @example\n   * ```ts\n   * const useMyWrappedHook: UseMutation<typeof api.endpoints.query.Types.MutationDefinition> = ...\n   * ```\n   */\n  MutationDefinition: MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  TagTypes: TagTypes;\n  ReducerPath: ReducerPath;\n};\n\n/**\n * @public\n */\nexport interface MutationExtraOptions<TagTypes extends string, ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> extends CacheLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>, QueryLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath> {\n  type: DefinitionType.mutation;\n\n  /**\n   * Used by `mutation` endpoints. Determines which cached data should be either re-fetched or removed from the cache.\n   * Expects the same shapes as `providesTags`.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"invalidatesTags example\"\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *     }),\n   *     addPost: build.mutation<Post, Partial<Post>>({\n   *       query(body) {\n   *         return {\n   *           url: `posts`,\n   *           method: 'POST',\n   *           body,\n   *         }\n   *       },\n   *       // highlight-start\n   *       invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  invalidatesTags?: ResultDescription<TagTypes, ResultType, QueryArg, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>;\n  /**\n   * Not to be used. A mutation should not provide tags to the cache.\n   */\n  providesTags?: never;\n\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types?: MutationTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n}\nexport type MutationDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType, RawResultType> & MutationExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>;\nexport type EndpointDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string, PageParam = any, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>> = QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType> | MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType> | InfiniteQueryDefinition<QueryArg, PageParam, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType>;\nexport type EndpointDefinitions = Record<string, EndpointDefinition<any, any, any, any, any, any, any>>;\nexport function isQueryDefinition(e: EndpointDefinition<any, any, any, any, any, any, any>): e is QueryDefinition<any, any, any, any, any, any> {\n  return e.type === DefinitionType.query;\n}\nexport function isMutationDefinition(e: EndpointDefinition<any, any, any, any, any, any, any>): e is MutationDefinition<any, any, any, any, any, any> {\n  return e.type === DefinitionType.mutation;\n}\nexport function isInfiniteQueryDefinition(e: EndpointDefinition<any, any, any, any, any, any, any>): e is InfiniteQueryDefinition<any, any, any, any, any, any, any> {\n  return e.type === DefinitionType.infinitequery;\n}\nexport function isAnyQueryDefinition(e: EndpointDefinition<any, any, any, any>): e is QueryDefinition<any, any, any, any> | InfiniteQueryDefinition<any, any, any, any, any> {\n  return isQueryDefinition(e) || isInfiniteQueryDefinition(e);\n}\nexport type EndpointBuilder<BaseQuery extends BaseQueryFn, TagTypes extends string, ReducerPath extends string> = {\n  /**\n   * An endpoint definition that retrieves data, and may provide tags to the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all query endpoint options\"\n   * const api = createApi({\n   *  baseQuery,\n   *  endpoints: (build) => ({\n   *    getPost: build.query({\n   *      query: (id) => ({ url: `post/${id}` }),\n   *      // Pick out data and prevent nested properties in a hook or selector\n   *      transformResponse: (response) => response.data,\n   *      // Pick out error and prevent nested properties in a hook or selector\n   *      transformErrorResponse: (response) => response.error,\n   *      // `result` is the server response\n   *      providesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry, updateCachedData }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry, updateCachedData }) {},\n   *    }),\n   *  }),\n   *});\n   *```\n   */\n  query<ResultType, QueryArg, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>>(definition: OmitFromUnion<QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType>, 'type'>): QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType>;\n\n  /**\n   * An endpoint definition that alters data on the server or will possibly invalidate the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all mutation endpoint options\"\n   * const api = createApi({\n   *   baseQuery,\n   *   endpoints: (build) => ({\n   *     updatePost: build.mutation({\n   *       query: ({ id, ...patch }) => ({ url: `post/${id}`, method: 'PATCH', body: patch }),\n   *       // Pick out data and prevent nested properties in a hook or selector\n   *       transformResponse: (response) => response.data,\n   *       // Pick out error and prevent nested properties in a hook or selector\n   *       transformErrorResponse: (response) => response.error,\n   *       // `result` is the server response\n   *       invalidatesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry }) {},\n   *     }),\n   *   }),\n   * });\n   * ```\n   */\n  mutation<ResultType, QueryArg, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>>(definition: OmitFromUnion<MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType>, 'type'>): MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType>;\n  infiniteQuery<ResultType, QueryArg, PageParam, RawResultType extends BaseQueryResult<BaseQuery> = BaseQueryResult<BaseQuery>>(definition: OmitFromUnion<InfiniteQueryDefinition<QueryArg, PageParam, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType>, 'type'>): InfiniteQueryDefinition<QueryArg, PageParam, BaseQuery, TagTypes, ResultType, ReducerPath, RawResultType>;\n};\nexport type AssertTagTypes = <T extends FullTagDescription<string>>(t: T) => T;\nexport function calculateProvidedBy<ResultType, QueryArg, ErrorType, MetaType>(description: ResultDescription<string, ResultType, QueryArg, ErrorType, MetaType> | undefined, result: ResultType | undefined, error: ErrorType | undefined, queryArg: QueryArg, meta: MetaType | undefined, assertTagTypes: AssertTagTypes): readonly FullTagDescription<string>[] {\n  if (isFunction(description)) {\n    return description(result as ResultType, error as undefined, queryArg, meta as MetaType).filter(isNotNullish).map(expandTagDescription).map(assertTagTypes);\n  }\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n  return [];\n}\nfunction isFunction<T>(t: T): t is Extract<T, Function> {\n  return typeof t === 'function';\n}\nexport function expandTagDescription(description: TagDescription<string>): FullTagDescription<string> {\n  return typeof description === 'string' ? {\n    type: description\n  } : description;\n}\nexport type QueryArgFrom<D extends BaseEndpointDefinition<any, any, any, any>> = D extends BaseEndpointDefinition<infer QA, any, any, any> ? QA : never;\n\n// Just extracting `QueryArg` from `BaseEndpointDefinition`\n// doesn't sufficiently match here.\n// We need to explicitly match against `InfiniteQueryDefinition`\nexport type InfiniteQueryArgFrom<D extends BaseEndpointDefinition<any, any, any, any>> = D extends InfiniteQueryDefinition<infer QA, any, any, any, any, any, any> ? QA : never;\nexport type QueryArgFromAnyQuery<D extends BaseEndpointDefinition<any, any, any, any>> = D extends InfiniteQueryDefinition<any, any, any, any, any, any, any> ? InfiniteQueryArgFrom<D> : D extends QueryDefinition<any, any, any, any, any, any> ? QueryArgFrom<D> : never;\nexport type ResultTypeFrom<D extends BaseEndpointDefinition<any, any, any, any>> = D extends BaseEndpointDefinition<any, any, infer RT, any> ? RT : unknown;\nexport type ReducerPathFrom<D extends EndpointDefinition<any, any, any, any, any, any, any>> = D extends EndpointDefinition<any, any, any, any, infer RP, any, any> ? RP : unknown;\nexport type TagTypesFrom<D extends EndpointDefinition<any, any, any, any, any, any, any>> = D extends EndpointDefinition<any, any, infer TT, any, any, any, any> ? TT : unknown;\nexport type PageParamFrom<D extends InfiniteQueryDefinition<any, any, any, any, any, any, any>> = D extends InfiniteQueryDefinition<any, infer PP, any, any, any, any, any> ? PP : unknown;\nexport type InfiniteQueryCombinedArg<QueryArg, PageParam> = {\n  queryArg: QueryArg;\n  pageParam: PageParam;\n};\nexport type TagTypesFromApi<T> = T extends Api<any, any, any, infer TagTypes> ? TagTypes : never;\nexport type DefinitionsFromApi<T> = T extends Api<any, infer Definitions, any, any> ? Definitions : never;\nexport type TransformedResponse<NewDefinitions extends EndpointDefinitions, K, ResultType> = K extends keyof NewDefinitions ? NewDefinitions[K]['transformResponse'] extends undefined ? ResultType : UnwrapPromise<ReturnType<NonUndefined<NewDefinitions[K]['transformResponse']>>> : ResultType;\nexport type OverrideResultType<Definition, NewResultType> = Definition extends QueryDefinition<infer QueryArg, infer BaseQuery, infer TagTypes, any, infer ReducerPath> ? QueryDefinition<QueryArg, BaseQuery, TagTypes, NewResultType, ReducerPath> : Definition extends MutationDefinition<infer QueryArg, infer BaseQuery, infer TagTypes, any, infer ReducerPath> ? MutationDefinition<QueryArg, BaseQuery, TagTypes, NewResultType, ReducerPath> : Definition extends InfiniteQueryDefinition<infer QueryArg, infer PageParam, infer BaseQuery, infer TagTypes, any, infer ReducerPath> ? InfiniteQueryDefinition<QueryArg, PageParam, BaseQuery, TagTypes, NewResultType, ReducerPath> : never;\nexport type UpdateDefinitions<Definitions extends EndpointDefinitions, NewTagTypes extends string, NewDefinitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<infer QueryArg, infer BaseQuery, any, infer ResultType, infer ReducerPath> ? QueryDefinition<QueryArg, BaseQuery, NewTagTypes, TransformedResponse<NewDefinitions, K, ResultType>, ReducerPath> : Definitions[K] extends MutationDefinition<infer QueryArg, infer BaseQuery, any, infer ResultType, infer ReducerPath> ? MutationDefinition<QueryArg, BaseQuery, NewTagTypes, TransformedResponse<NewDefinitions, K, ResultType>, ReducerPath> : Definitions[K] extends InfiniteQueryDefinition<infer QueryArg, infer PageParam, infer BaseQuery, any, infer ResultType, infer ReducerPath> ? InfiniteQueryDefinition<QueryArg, PageParam, BaseQuery, NewTagTypes, TransformedResponse<NewDefinitions, K, ResultType>, ReducerPath> : never };","import type { AsyncThunk, AsyncThunkPayloadCreator, Draft, ThunkAction, ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport type { Patch } from 'immer';\nimport { isDraftable, produceWithPatches } from 'immer';\nimport type { Api, ApiContext } from '../apiTypes';\nimport type { BaseQueryError, BaseQueryFn, QueryReturnValue } from '../baseQueryTypes';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { AssertTagTypes, EndpointDefinition, EndpointDefinitions, InfiniteQueryArgFrom, InfiniteQueryCombinedArg, InfiniteQueryDefinition, MutationDefinition, PageParamFrom, QueryArgFrom, QueryDefinition, ResultDescription, ResultTypeFrom, SchemaFailureConverter, SchemaFailureHandler, SchemaFailureInfo } from '../endpointDefinitions';\nimport { calculateProvidedBy, isInfiniteQueryDefinition, isQueryDefinition } from '../endpointDefinitions';\nimport { HandledError } from '../HandledError';\nimport type { UnwrapPromise } from '../tsHelpers';\nimport type { RootState, QueryKeys, QuerySubstateIdentifier, InfiniteData, InfiniteQueryConfigOptions, QueryCacheKey, InfiniteQueryDirection, InfiniteQueryKeys } from './apiState';\nimport { QueryStatus } from './apiState';\nimport type { InfiniteQueryActionCreatorResult, QueryActionCreatorResult, StartInfiniteQueryActionCreatorOptions, StartQueryActionCreatorOptions } from './buildInitiate';\nimport { forceQueryFnSymbol, isUpsertQuery } from './buildInitiate';\nimport type { AllSelectors } from './buildSelectors';\nimport type { ApiEndpointQuery, PrefetchOptions } from './module';\nimport { createAsyncThunk, isAllOf, isFulfilled, isPending, isRejected, isRejectedWithValue, SHOULD_AUTOBATCH } from './rtkImports';\nimport { parseWithSchema, NamedSchemaError } from '../standardSchema';\nexport type BuildThunksApiEndpointQuery<Definition extends QueryDefinition<any, any, any, any, any>> = Matchers<QueryThunk, Definition>;\nexport type BuildThunksApiEndpointInfiniteQuery<Definition extends InfiniteQueryDefinition<any, any, any, any, any>> = Matchers<InfiniteQueryThunk<any>, Definition>;\nexport type BuildThunksApiEndpointMutation<Definition extends MutationDefinition<any, any, any, any, any>> = Matchers<MutationThunk, Definition>;\ntype EndpointThunk<Thunk extends QueryThunk | MutationThunk | InfiniteQueryThunk<any>, Definition extends EndpointDefinition<any, any, any, any>> = Definition extends EndpointDefinition<infer QueryArg, infer BaseQueryFn, any, infer ResultType> ? Thunk extends AsyncThunk<unknown, infer ATArg, infer ATConfig> ? AsyncThunk<ResultType, ATArg & {\n  originalArgs: QueryArg;\n}, ATConfig & {\n  rejectValue: BaseQueryError<BaseQueryFn>;\n}> : never : Definition extends InfiniteQueryDefinition<infer QueryArg, infer PageParam, infer BaseQueryFn, any, infer ResultType> ? Thunk extends AsyncThunk<unknown, infer ATArg, infer ATConfig> ? AsyncThunk<InfiniteData<ResultType, PageParam>, ATArg & {\n  originalArgs: QueryArg;\n}, ATConfig & {\n  rejectValue: BaseQueryError<BaseQueryFn>;\n}> : never : never;\nexport type PendingAction<Thunk extends QueryThunk | MutationThunk | InfiniteQueryThunk<any>, Definition extends EndpointDefinition<any, any, any, any>> = ReturnType<EndpointThunk<Thunk, Definition>['pending']>;\nexport type FulfilledAction<Thunk extends QueryThunk | MutationThunk | InfiniteQueryThunk<any>, Definition extends EndpointDefinition<any, any, any, any>> = ReturnType<EndpointThunk<Thunk, Definition>['fulfilled']>;\nexport type RejectedAction<Thunk extends QueryThunk | MutationThunk | InfiniteQueryThunk<any>, Definition extends EndpointDefinition<any, any, any, any>> = ReturnType<EndpointThunk<Thunk, Definition>['rejected']>;\nexport type Matcher<M> = (value: any) => value is M;\nexport interface Matchers<Thunk extends QueryThunk | MutationThunk | InfiniteQueryThunk<any>, Definition extends EndpointDefinition<any, any, any, any>> {\n  matchPending: Matcher<PendingAction<Thunk, Definition>>;\n  matchFulfilled: Matcher<FulfilledAction<Thunk, Definition>>;\n  matchRejected: Matcher<RejectedAction<Thunk, Definition>>;\n}\nexport type QueryThunkArg = QuerySubstateIdentifier & StartQueryActionCreatorOptions & {\n  type: 'query';\n  originalArgs: unknown;\n  endpointName: string;\n};\nexport type InfiniteQueryThunkArg<D extends InfiniteQueryDefinition<any, any, any, any, any>> = QuerySubstateIdentifier & StartInfiniteQueryActionCreatorOptions<D> & {\n  type: `query`;\n  originalArgs: unknown;\n  endpointName: string;\n  param: unknown;\n  direction?: InfiniteQueryDirection;\n};\ntype MutationThunkArg = {\n  type: 'mutation';\n  originalArgs: unknown;\n  endpointName: string;\n  track?: boolean;\n  fixedCacheKey?: string;\n};\nexport type ThunkResult = unknown;\nexport type ThunkApiMetaConfig = {\n  pendingMeta: {\n    startedTimeStamp: number;\n    [SHOULD_AUTOBATCH]: true;\n  };\n  fulfilledMeta: {\n    fulfilledTimeStamp: number;\n    baseQueryMeta: unknown;\n    [SHOULD_AUTOBATCH]: true;\n  };\n  rejectedMeta: {\n    baseQueryMeta: unknown;\n    [SHOULD_AUTOBATCH]: true;\n  };\n};\nexport type QueryThunk = AsyncThunk<ThunkResult, QueryThunkArg, ThunkApiMetaConfig>;\nexport type InfiniteQueryThunk<D extends InfiniteQueryDefinition<any, any, any, any, any>> = AsyncThunk<ThunkResult, InfiniteQueryThunkArg<D>, ThunkApiMetaConfig>;\nexport type MutationThunk = AsyncThunk<ThunkResult, MutationThunkArg, ThunkApiMetaConfig>;\nfunction defaultTransformResponse(baseQueryReturnValue: unknown) {\n  return baseQueryReturnValue;\n}\nexport type MaybeDrafted<T> = T | Draft<T>;\nexport type Recipe<T> = (data: MaybeDrafted<T>) => void | MaybeDrafted<T>;\nexport type UpsertRecipe<T> = (data: MaybeDrafted<T> | undefined) => void | MaybeDrafted<T>;\nexport type PatchQueryDataThunk<Definitions extends EndpointDefinitions, PartialState> = <EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFrom<Definitions[EndpointName]>, patches: readonly Patch[], updateProvided?: boolean) => ThunkAction<void, PartialState, any, UnknownAction>;\nexport type AllQueryKeys<Definitions extends EndpointDefinitions> = QueryKeys<Definitions> | InfiniteQueryKeys<Definitions>;\nexport type QueryArgFromAnyQueryDefinition<Definitions extends EndpointDefinitions, EndpointName extends AllQueryKeys<Definitions>> = Definitions[EndpointName] extends InfiniteQueryDefinition<any, any, any, any, any> ? InfiniteQueryArgFrom<Definitions[EndpointName]> : Definitions[EndpointName] extends QueryDefinition<any, any, any, any> ? QueryArgFrom<Definitions[EndpointName]> : never;\nexport type DataFromAnyQueryDefinition<Definitions extends EndpointDefinitions, EndpointName extends AllQueryKeys<Definitions>> = Definitions[EndpointName] extends InfiniteQueryDefinition<any, any, any, any, any> ? InfiniteData<ResultTypeFrom<Definitions[EndpointName]>, PageParamFrom<Definitions[EndpointName]>> : Definitions[EndpointName] extends QueryDefinition<any, any, any, any> ? ResultTypeFrom<Definitions[EndpointName]> : unknown;\nexport type UpsertThunkResult<Definitions extends EndpointDefinitions, EndpointName extends AllQueryKeys<Definitions>> = Definitions[EndpointName] extends InfiniteQueryDefinition<any, any, any, any, any> ? InfiniteQueryActionCreatorResult<Definitions[EndpointName]> : Definitions[EndpointName] extends QueryDefinition<any, any, any, any> ? QueryActionCreatorResult<Definitions[EndpointName]> : QueryActionCreatorResult<never>;\nexport type UpdateQueryDataThunk<Definitions extends EndpointDefinitions, PartialState> = <EndpointName extends AllQueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFromAnyQueryDefinition<Definitions, EndpointName>, updateRecipe: Recipe<DataFromAnyQueryDefinition<Definitions, EndpointName>>, updateProvided?: boolean) => ThunkAction<PatchCollection, PartialState, any, UnknownAction>;\nexport type UpsertQueryDataThunk<Definitions extends EndpointDefinitions, PartialState> = <EndpointName extends AllQueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFromAnyQueryDefinition<Definitions, EndpointName>, value: DataFromAnyQueryDefinition<Definitions, EndpointName>) => ThunkAction<UpsertThunkResult<Definitions, EndpointName>, PartialState, any, UnknownAction>;\n\n/**\n * An object returned from dispatching a `api.util.updateQueryData` call.\n */\nexport type PatchCollection = {\n  /**\n   * An `immer` Patch describing the cache update.\n   */\n  patches: Patch[];\n  /**\n   * An `immer` Patch to revert the cache update.\n   */\n  inversePatches: Patch[];\n  /**\n   * A function that will undo the cache update.\n   */\n  undo: () => void;\n};\ntype TransformCallback = (baseQueryReturnValue: unknown, meta: unknown, arg: unknown) => any;\nexport const addShouldAutoBatch = <T extends Record<string, any>,>(arg: T = {} as T): T & {\n  [SHOULD_AUTOBATCH]: true;\n} => {\n  return {\n    ...arg,\n    [SHOULD_AUTOBATCH]: true\n  };\n};\nexport function buildThunks<BaseQuery extends BaseQueryFn, ReducerPath extends string, Definitions extends EndpointDefinitions>({\n  reducerPath,\n  baseQuery,\n  context: {\n    endpointDefinitions\n  },\n  serializeQueryArgs,\n  api,\n  assertTagType,\n  selectors,\n  onSchemaFailure,\n  catchSchemaFailure: globalCatchSchemaFailure,\n  skipSchemaValidation: globalSkipSchemaValidation\n}: {\n  baseQuery: BaseQuery;\n  reducerPath: ReducerPath;\n  context: ApiContext<Definitions>;\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  api: Api<BaseQuery, Definitions, ReducerPath, any>;\n  assertTagType: AssertTagTypes;\n  selectors: AllSelectors;\n  onSchemaFailure: SchemaFailureHandler | undefined;\n  catchSchemaFailure: SchemaFailureConverter<BaseQuery> | undefined;\n  skipSchemaValidation: boolean | undefined;\n}) {\n  type State = RootState<any, string, ReducerPath>;\n  const patchQueryData: PatchQueryDataThunk<EndpointDefinitions, State> = (endpointName, arg, patches, updateProvided) => (dispatch, getState) => {\n    const endpointDefinition = endpointDefinitions[endpointName];\n    const queryCacheKey = serializeQueryArgs({\n      queryArgs: arg,\n      endpointDefinition,\n      endpointName\n    });\n    dispatch(api.internalActions.queryResultPatched({\n      queryCacheKey,\n      patches\n    }));\n    if (!updateProvided) {\n      return;\n    }\n    const newValue = api.endpoints[endpointName].select(arg)(\n    // Work around TS 4.1 mismatch\n    getState() as RootState<any, any, any>);\n    const providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, undefined, arg, {}, assertTagType);\n    dispatch(api.internalActions.updateProvidedBy([{\n      queryCacheKey,\n      providedTags\n    }]));\n  };\n  function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n    const newItems = [item, ...items];\n    return max && newItems.length > max ? newItems.slice(0, -1) : newItems;\n  }\n  function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n    const newItems = [...items, item];\n    return max && newItems.length > max ? newItems.slice(1) : newItems;\n  }\n  const updateQueryData: UpdateQueryDataThunk<EndpointDefinitions, State> = (endpointName, arg, updateRecipe, updateProvided = true) => (dispatch, getState) => {\n    const endpointDefinition = api.endpoints[endpointName];\n    const currentState = endpointDefinition.select(arg)(\n    // Work around TS 4.1 mismatch\n    getState() as RootState<any, any, any>);\n    const ret: PatchCollection = {\n      patches: [],\n      inversePatches: [],\n      undo: () => dispatch(api.util.patchQueryData(endpointName, arg, ret.inversePatches, updateProvided))\n    };\n    if (currentState.status === QueryStatus.uninitialized) {\n      return ret;\n    }\n    let newValue;\n    if ('data' in currentState) {\n      if (isDraftable(currentState.data)) {\n        const [value, patches, inversePatches] = produceWithPatches(currentState.data, updateRecipe);\n        ret.patches.push(...patches);\n        ret.inversePatches.push(...inversePatches);\n        newValue = value;\n      } else {\n        newValue = updateRecipe(currentState.data);\n        ret.patches.push({\n          op: 'replace',\n          path: [],\n          value: newValue\n        });\n        ret.inversePatches.push({\n          op: 'replace',\n          path: [],\n          value: currentState.data\n        });\n      }\n    }\n    if (ret.patches.length === 0) {\n      return ret;\n    }\n    dispatch(api.util.patchQueryData(endpointName, arg, ret.patches, updateProvided));\n    return ret;\n  };\n  const upsertQueryData: UpsertQueryDataThunk<Definitions, State> = (endpointName, arg, value) => dispatch => {\n    type EndpointName = typeof endpointName;\n    const res = dispatch((api.endpoints[endpointName] as ApiEndpointQuery<QueryDefinition<any, any, any, any, any>, Definitions>).initiate(arg, {\n      subscribe: false,\n      forceRefetch: true,\n      [forceQueryFnSymbol]: () => ({\n        data: value\n      })\n    })) as UpsertThunkResult<Definitions, EndpointName>;\n    return res;\n  };\n  const getTransformCallbackForEndpoint = (endpointDefinition: EndpointDefinition<any, any, any, any>, transformFieldName: 'transformResponse' | 'transformErrorResponse'): TransformCallback => {\n    return endpointDefinition.query && endpointDefinition[transformFieldName] ? endpointDefinition[transformFieldName]! as TransformCallback : defaultTransformResponse;\n  };\n\n  // The generic async payload function for all of our thunks\n  const executeEndpoint: AsyncThunkPayloadCreator<ThunkResult, QueryThunkArg | MutationThunkArg | InfiniteQueryThunkArg<any>, ThunkApiMetaConfig & {\n    state: RootState<any, string, ReducerPath>;\n  }> = async (arg, {\n    signal,\n    abort,\n    rejectWithValue,\n    fulfillWithValue,\n    dispatch,\n    getState,\n    extra\n  }) => {\n    const endpointDefinition = endpointDefinitions[arg.endpointName];\n    const {\n      metaSchema,\n      skipSchemaValidation = globalSkipSchemaValidation\n    } = endpointDefinition;\n    try {\n      let transformResponse = getTransformCallbackForEndpoint(endpointDefinition, 'transformResponse');\n      const baseQueryApi = {\n        signal,\n        abort,\n        dispatch,\n        getState,\n        extra,\n        endpoint: arg.endpointName,\n        type: arg.type,\n        forced: arg.type === 'query' ? isForcedQuery(arg, getState()) : undefined,\n        queryCacheKey: arg.type === 'query' ? arg.queryCacheKey : undefined\n      };\n      const forceQueryFn = arg.type === 'query' ? arg[forceQueryFnSymbol] : undefined;\n      let finalQueryReturnValue: QueryReturnValue;\n\n      // Infinite query wrapper, which executes the request and returns\n      // the InfiniteData `{pages, pageParams}` structure\n      const fetchPage = async (data: InfiniteData<unknown, unknown>, param: unknown, maxPages: number, previous?: boolean): Promise<QueryReturnValue> => {\n        // This should handle cases where there is no `getPrevPageParam`,\n        // or `getPPP` returned nullish\n        if (param == null && data.pages.length) {\n          return Promise.resolve({\n            data\n          });\n        }\n        const finalQueryArg: InfiniteQueryCombinedArg<any, any> = {\n          queryArg: arg.originalArgs,\n          pageParam: param\n        };\n        const pageResponse = await executeRequest(finalQueryArg);\n        const addTo = previous ? addToStart : addToEnd;\n        return {\n          data: {\n            pages: addTo(data.pages, pageResponse.data, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages)\n          },\n          meta: pageResponse.meta\n        };\n      };\n\n      // Wrapper for executing either `query` or `queryFn`,\n      // and handling any errors\n      async function executeRequest(finalQueryArg: unknown): Promise<QueryReturnValue> {\n        let result: QueryReturnValue;\n        const {\n          extraOptions,\n          argSchema,\n          rawResponseSchema,\n          responseSchema\n        } = endpointDefinition;\n        if (argSchema && !skipSchemaValidation) {\n          finalQueryArg = await parseWithSchema(argSchema, finalQueryArg, 'argSchema', {} // we don't have a meta yet, so we can't pass it\n          );\n        }\n        if (forceQueryFn) {\n          // upsertQueryData relies on this to pass in the user-provided value\n          result = forceQueryFn();\n        } else if (endpointDefinition.query) {\n          result = await baseQuery(endpointDefinition.query(finalQueryArg as any), baseQueryApi, extraOptions as any);\n        } else {\n          result = await endpointDefinition.queryFn(finalQueryArg as any, baseQueryApi, extraOptions as any, arg => baseQuery(arg, baseQueryApi, extraOptions as any));\n        }\n        if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n          const what = endpointDefinition.query ? '`baseQuery`' : '`queryFn`';\n          let err: undefined | string;\n          if (!result) {\n            err = `${what} did not return anything.`;\n          } else if (typeof result !== 'object') {\n            err = `${what} did not return an object.`;\n          } else if (result.error && result.data) {\n            err = `${what} returned an object containing both \\`error\\` and \\`result\\`.`;\n          } else if (result.error === undefined && result.data === undefined) {\n            err = `${what} returned an object containing neither a valid \\`error\\` and \\`result\\`. At least one of them should not be \\`undefined\\``;\n          } else {\n            for (const key of Object.keys(result)) {\n              if (key !== 'error' && key !== 'data' && key !== 'meta') {\n                err = `The object returned by ${what} has the unknown property ${key}.`;\n                break;\n              }\n            }\n          }\n          if (err) {\n            console.error(`Error encountered handling the endpoint ${arg.endpointName}.\n                  ${err}\n                  It needs to return an object with either the shape \\`{ data: <value> }\\` or \\`{ error: <value> }\\` that may contain an optional \\`meta\\` property.\n                  Object returned was:`, result);\n          }\n        }\n        if (result.error) throw new HandledError(result.error, result.meta);\n        let {\n          data\n        } = result;\n        if (rawResponseSchema && !skipSchemaValidation) {\n          data = await parseWithSchema(rawResponseSchema, result.data, 'rawResponseSchema', result.meta);\n        }\n        let transformedResponse = await transformResponse(data, result.meta, finalQueryArg);\n        if (responseSchema && !skipSchemaValidation) {\n          transformedResponse = await parseWithSchema(responseSchema, transformedResponse, 'responseSchema', result.meta);\n        }\n        return {\n          ...result,\n          data: transformedResponse\n        };\n      }\n      if (arg.type === 'query' && 'infiniteQueryOptions' in endpointDefinition) {\n        // This is an infinite query endpoint\n        const {\n          infiniteQueryOptions\n        } = endpointDefinition;\n\n        // Runtime checks should guarantee this is a positive number if provided\n        const {\n          maxPages = Infinity\n        } = infiniteQueryOptions;\n        let result: QueryReturnValue;\n\n        // Start by looking up the existing InfiniteData value from state,\n        // falling back to an empty value if it doesn't exist yet\n        const blankData = {\n          pages: [],\n          pageParams: []\n        };\n        const cachedData = selectors.selectQueryEntry(getState(), arg.queryCacheKey)?.data as InfiniteData<unknown, unknown> | undefined;\n\n        // When the arg changes or the user forces a refetch,\n        // we don't include the `direction` flag. This lets us distinguish\n        // between actually refetching with a forced query, vs just fetching\n        // the next page.\n        const isForcedQueryNeedingRefetch =\n        // arg.forceRefetch\n        isForcedQuery(arg, getState()) && !(arg as InfiniteQueryThunkArg<any>).direction;\n        const existingData = (isForcedQueryNeedingRefetch || !cachedData ? blankData : cachedData) as InfiniteData<unknown, unknown>;\n\n        // If the thunk specified a direction and we do have at least one page,\n        // fetch the next or previous page\n        if ('direction' in arg && arg.direction && existingData.pages.length) {\n          const previous = arg.direction === 'backward';\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;\n          const param = pageParamFn(infiniteQueryOptions, existingData, arg.originalArgs);\n          result = await fetchPage(existingData, param, maxPages, previous);\n        } else {\n          // Otherwise, fetch the first page and then any remaining pages\n\n          const {\n            initialPageParam = infiniteQueryOptions.initialPageParam\n          } = arg as InfiniteQueryThunkArg<any>;\n\n          // If we're doing a refetch, we should start from\n          // the first page we have cached.\n          // Otherwise, we should start from the initialPageParam\n          const cachedPageParams = cachedData?.pageParams ?? [];\n          const firstPageParam = cachedPageParams[0] ?? initialPageParam;\n          const totalPages = cachedPageParams.length;\n\n          // Fetch first page\n          result = await fetchPage(existingData, firstPageParam, maxPages);\n          if (forceQueryFn) {\n            // HACK `upsertQueryData` expects the user to pass in the `{pages, pageParams}` structure,\n            // but `fetchPage` treats that as `pages[0]`. We have to manually un-nest it.\n            result = {\n              data: (result.data as InfiniteData<unknown, unknown>).pages[0]\n            } as QueryReturnValue;\n          }\n\n          // Fetch remaining pages\n          for (let i = 1; i < totalPages; i++) {\n            const param = getNextPageParam(infiniteQueryOptions, result.data as InfiniteData<unknown, unknown>, arg.originalArgs);\n            result = await fetchPage(result.data as InfiniteData<unknown, unknown>, param, maxPages);\n          }\n        }\n        finalQueryReturnValue = result;\n      } else {\n        // Non-infinite endpoint. Just run the one request.\n        finalQueryReturnValue = await executeRequest(arg.originalArgs);\n      }\n      if (metaSchema && !skipSchemaValidation && finalQueryReturnValue.meta) {\n        finalQueryReturnValue.meta = await parseWithSchema(metaSchema, finalQueryReturnValue.meta, 'metaSchema', finalQueryReturnValue.meta);\n      }\n\n      // console.log('Final result: ', transformedData)\n      return fulfillWithValue(finalQueryReturnValue.data, addShouldAutoBatch({\n        fulfilledTimeStamp: Date.now(),\n        baseQueryMeta: finalQueryReturnValue.meta\n      }));\n    } catch (error) {\n      let caughtError = error;\n      if (caughtError instanceof HandledError) {\n        let transformErrorResponse = getTransformCallbackForEndpoint(endpointDefinition, 'transformErrorResponse');\n        const {\n          rawErrorResponseSchema,\n          errorResponseSchema\n        } = endpointDefinition;\n        let {\n          value,\n          meta\n        } = caughtError;\n        try {\n          if (rawErrorResponseSchema && !skipSchemaValidation) {\n            value = await parseWithSchema(rawErrorResponseSchema, value, 'rawErrorResponseSchema', meta);\n          }\n          if (metaSchema && !skipSchemaValidation) {\n            meta = await parseWithSchema(metaSchema, meta, 'metaSchema', meta);\n          }\n          let transformedErrorResponse = await transformErrorResponse(value, meta, arg.originalArgs);\n          if (errorResponseSchema && !skipSchemaValidation) {\n            transformedErrorResponse = await parseWithSchema(errorResponseSchema, transformedErrorResponse, 'errorResponseSchema', meta);\n          }\n          return rejectWithValue(transformedErrorResponse, addShouldAutoBatch({\n            baseQueryMeta: meta\n          }));\n        } catch (e) {\n          caughtError = e;\n        }\n      }\n      try {\n        if (caughtError instanceof NamedSchemaError) {\n          const info: SchemaFailureInfo = {\n            endpoint: arg.endpointName,\n            arg: arg.originalArgs,\n            type: arg.type,\n            queryCacheKey: arg.type === 'query' ? arg.queryCacheKey : undefined\n          };\n          endpointDefinition.onSchemaFailure?.(caughtError, info);\n          onSchemaFailure?.(caughtError, info);\n          const {\n            catchSchemaFailure = globalCatchSchemaFailure\n          } = endpointDefinition;\n          if (catchSchemaFailure) {\n            return rejectWithValue(catchSchemaFailure(caughtError, info), addShouldAutoBatch({\n              baseQueryMeta: caughtError._bqMeta\n            }));\n          }\n        }\n      } catch (e) {\n        caughtError = e;\n      }\n      if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n        console.error(`An unhandled error occurred processing a request for the endpoint \"${arg.endpointName}\".\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`, caughtError);\n      } else {\n        console.error(caughtError);\n      }\n      throw caughtError;\n    }\n  };\n  function isForcedQuery(arg: QueryThunkArg, state: RootState<any, string, ReducerPath>) {\n    const requestState = selectors.selectQueryEntry(state, arg.queryCacheKey);\n    const baseFetchOnMountOrArgChange = selectors.selectConfig(state).refetchOnMountOrArgChange;\n    const fulfilledVal = requestState?.fulfilledTimeStamp;\n    const refetchVal = arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);\n    if (refetchVal) {\n      // Return if it's true or compare the dates because it must be a number\n      return refetchVal === true || (Number(new Date()) - Number(fulfilledVal)) / 1000 >= refetchVal;\n    }\n    return false;\n  }\n  const createQueryThunk = <ThunkArgType extends QueryThunkArg | InfiniteQueryThunkArg<any>,>() => {\n    const generatedQueryThunk = createAsyncThunk<ThunkResult, ThunkArgType, ThunkApiMetaConfig & {\n      state: RootState<any, string, ReducerPath>;\n    }>(`${reducerPath}/executeQuery`, executeEndpoint, {\n      getPendingMeta({\n        arg\n      }) {\n        const endpointDefinition = endpointDefinitions[arg.endpointName];\n        return addShouldAutoBatch({\n          startedTimeStamp: Date.now(),\n          ...(isInfiniteQueryDefinition(endpointDefinition) ? {\n            direction: (arg as InfiniteQueryThunkArg<any>).direction\n          } : {})\n        });\n      },\n      condition(queryThunkArg, {\n        getState\n      }) {\n        const state = getState();\n        const requestState = selectors.selectQueryEntry(state, queryThunkArg.queryCacheKey);\n        const fulfilledVal = requestState?.fulfilledTimeStamp;\n        const currentArg = queryThunkArg.originalArgs;\n        const previousArg = requestState?.originalArgs;\n        const endpointDefinition = endpointDefinitions[queryThunkArg.endpointName];\n        const direction = (queryThunkArg as InfiniteQueryThunkArg<any>).direction;\n\n        // Order of these checks matters.\n        // In order for `upsertQueryData` to successfully run while an existing request is in flight,\n        /// we have to check for that first, otherwise `queryThunk` will bail out and not run at all.\n        if (isUpsertQuery(queryThunkArg)) {\n          return true;\n        }\n\n        // Don't retry a request that's currently in-flight\n        if (requestState?.status === 'pending') {\n          return false;\n        }\n\n        // if this is forced, continue\n        if (isForcedQuery(queryThunkArg, state)) {\n          return true;\n        }\n        if (isQueryDefinition(endpointDefinition) && endpointDefinition?.forceRefetch?.({\n          currentArg,\n          previousArg,\n          endpointState: requestState,\n          state\n        })) {\n          return true;\n        }\n\n        // Pull from the cache unless we explicitly force refetch or qualify based on time\n        if (fulfilledVal && !direction) {\n          // Value is cached and we didn't specify to refresh, skip it.\n          return false;\n        }\n        return true;\n      },\n      dispatchConditionRejection: true\n    });\n    return generatedQueryThunk;\n  };\n  const queryThunk = createQueryThunk<QueryThunkArg>();\n  const infiniteQueryThunk = createQueryThunk<InfiniteQueryThunkArg<any>>();\n  const mutationThunk = createAsyncThunk<ThunkResult, MutationThunkArg, ThunkApiMetaConfig & {\n    state: RootState<any, string, ReducerPath>;\n  }>(`${reducerPath}/executeMutation`, executeEndpoint, {\n    getPendingMeta() {\n      return addShouldAutoBatch({\n        startedTimeStamp: Date.now()\n      });\n    }\n  });\n  const hasTheForce = (options: any): options is {\n    force: boolean;\n  } => 'force' in options;\n  const hasMaxAge = (options: any): options is {\n    ifOlderThan: false | number;\n  } => 'ifOlderThan' in options;\n  const prefetch = <EndpointName extends QueryKeys<Definitions>,>(endpointName: EndpointName, arg: any, options: PrefetchOptions): ThunkAction<void, any, any, UnknownAction> => (dispatch: ThunkDispatch<any, any, any>, getState: () => any) => {\n    const force = hasTheForce(options) && options.force;\n    const maxAge = hasMaxAge(options) && options.ifOlderThan;\n    const queryAction = (force: boolean = true) => {\n      const options = {\n        forceRefetch: force,\n        isPrefetch: true\n      };\n      return (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).initiate(arg, options);\n    };\n    const latestStateValue = (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).select(arg)(getState());\n    if (force) {\n      dispatch(queryAction());\n    } else if (maxAge) {\n      const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp;\n      if (!lastFulfilledTs) {\n        dispatch(queryAction());\n        return;\n      }\n      const shouldRetrigger = (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1000 >= maxAge;\n      if (shouldRetrigger) {\n        dispatch(queryAction());\n      }\n    } else {\n      // If prefetching with no options, just let it try\n      dispatch(queryAction(false));\n    }\n  };\n  function matchesEndpoint(endpointName: string) {\n    return (action: any): action is UnknownAction => action?.meta?.arg?.endpointName === endpointName;\n  }\n  function buildMatchThunkActions<Thunk extends AsyncThunk<any, QueryThunkArg, ThunkApiMetaConfig> | AsyncThunk<any, MutationThunkArg, ThunkApiMetaConfig>>(thunk: Thunk, endpointName: string) {\n    return {\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: isAllOf(isFulfilled(thunk), matchesEndpoint(endpointName)),\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName))\n    } as Matchers<Thunk, any>;\n  }\n  return {\n    queryThunk,\n    mutationThunk,\n    infiniteQueryThunk,\n    prefetch,\n    updateQueryData,\n    upsertQueryData,\n    patchQueryData,\n    buildMatchThunkActions\n  };\n}\nexport function getNextPageParam(options: InfiniteQueryConfigOptions<unknown, unknown, unknown>, {\n  pages,\n  pageParams\n}: InfiniteData<unknown, unknown>, queryArg: unknown): unknown | undefined {\n  const lastIndex = pages.length - 1;\n  return options.getNextPageParam(pages[lastIndex], pages, pageParams[lastIndex], pageParams, queryArg);\n}\nexport function getPreviousPageParam(options: InfiniteQueryConfigOptions<unknown, unknown, unknown>, {\n  pages,\n  pageParams\n}: InfiniteData<unknown, unknown>, queryArg: unknown): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages, pageParams[0], pageParams, queryArg);\n}\nexport function calculateProvidedByThunk(action: UnwrapPromise<ReturnType<ReturnType<QueryThunk>> | ReturnType<ReturnType<MutationThunk>> | ReturnType<ReturnType<InfiniteQueryThunk<any>>>>, type: 'providesTags' | 'invalidatesTags', endpointDefinitions: EndpointDefinitions, assertTagType: AssertTagTypes) {\n  return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type] as ResultDescription<any, any, any, any, any>, isFulfilled(action) ? action.payload : undefined, isRejectedWithValue(action) ? action.payload : undefined, action.meta.arg.originalArgs, 'baseQueryMeta' in action.meta ? action.meta.baseQueryMeta : undefined, assertTagType);\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { AsyncThunkAction, SafePromise, SerializedError, ThunkAction, UnknownAction } from '@reduxjs/toolkit';\nimport type { Dispatch } from 'redux';\nimport { asSafePromise } from '../../tsHelpers';\nimport type { Api, ApiContext } from '../apiTypes';\nimport type { BaseQueryError, QueryReturnValue } from '../baseQueryTypes';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport { isQueryDefinition, type EndpointDefinition, type EndpointDefinitions, type InfiniteQueryArgFrom, type InfiniteQueryDefinition, type MutationDefinition, type PageParamFrom, type QueryArgFrom, type QueryDefinition, type ResultTypeFrom } from '../endpointDefinitions';\nimport { countObjectKeys, getOrInsert, isNotNullish } from '../utils';\nimport type { InfiniteData, InfiniteQueryConfigOptions, InfiniteQueryDirection, SubscriptionOptions } from './apiState';\nimport type { InfiniteQueryResultSelectorResult, QueryResultSelectorResult } from './buildSelectors';\nimport type { InfiniteQueryThunk, InfiniteQueryThunkArg, MutationThunk, QueryThunk, QueryThunkArg, ThunkApiMetaConfig } from './buildThunks';\nimport type { ApiEndpointQuery } from './module';\nexport type BuildInitiateApiEndpointQuery<Definition extends QueryDefinition<any, any, any, any, any>> = {\n  initiate: StartQueryActionCreator<Definition>;\n};\nexport type BuildInitiateApiEndpointInfiniteQuery<Definition extends InfiniteQueryDefinition<any, any, any, any, any>> = {\n  initiate: StartInfiniteQueryActionCreator<Definition>;\n};\nexport type BuildInitiateApiEndpointMutation<Definition extends MutationDefinition<any, any, any, any, any>> = {\n  initiate: StartMutationActionCreator<Definition>;\n};\nexport const forceQueryFnSymbol = Symbol('forceQueryFn');\nexport const isUpsertQuery = (arg: QueryThunkArg) => typeof arg[forceQueryFnSymbol] === 'function';\nexport type StartQueryActionCreatorOptions = {\n  subscribe?: boolean;\n  forceRefetch?: boolean | number;\n  subscriptionOptions?: SubscriptionOptions;\n  [forceQueryFnSymbol]?: () => QueryReturnValue;\n};\nexport type StartInfiniteQueryActionCreatorOptions<D extends InfiniteQueryDefinition<any, any, any, any, any>> = StartQueryActionCreatorOptions & {\n  direction?: InfiniteQueryDirection;\n  param?: unknown;\n} & Partial<Pick<Partial<InfiniteQueryConfigOptions<ResultTypeFrom<D>, PageParamFrom<D>, InfiniteQueryArgFrom<D>>>, 'initialPageParam'>>;\ntype AnyQueryActionCreator<D extends EndpointDefinition<any, any, any, any>> = (arg: any, options?: StartQueryActionCreatorOptions) => ThunkAction<AnyActionCreatorResult, any, any, UnknownAction>;\ntype StartQueryActionCreator<D extends QueryDefinition<any, any, any, any, any>> = (arg: QueryArgFrom<D>, options?: StartQueryActionCreatorOptions) => ThunkAction<QueryActionCreatorResult<D>, any, any, UnknownAction>;\nexport type StartInfiniteQueryActionCreator<D extends InfiniteQueryDefinition<any, any, any, any, any>> = (arg: InfiniteQueryArgFrom<D>, options?: StartInfiniteQueryActionCreatorOptions<D>) => ThunkAction<InfiniteQueryActionCreatorResult<D>, any, any, UnknownAction>;\ntype QueryActionCreatorFields = {\n  requestId: string;\n  subscriptionOptions: SubscriptionOptions | undefined;\n  abort(): void;\n  unsubscribe(): void;\n  updateSubscriptionOptions(options: SubscriptionOptions): void;\n  queryCacheKey: string;\n};\ntype AnyActionCreatorResult = SafePromise<any> & QueryActionCreatorFields & {\n  arg: any;\n  unwrap(): Promise<any>;\n  refetch(): AnyActionCreatorResult;\n};\nexport type QueryActionCreatorResult<D extends QueryDefinition<any, any, any, any>> = SafePromise<QueryResultSelectorResult<D>> & QueryActionCreatorFields & {\n  arg: QueryArgFrom<D>;\n  unwrap(): Promise<ResultTypeFrom<D>>;\n  refetch(): QueryActionCreatorResult<D>;\n};\nexport type InfiniteQueryActionCreatorResult<D extends InfiniteQueryDefinition<any, any, any, any, any>> = SafePromise<InfiniteQueryResultSelectorResult<D>> & QueryActionCreatorFields & {\n  arg: InfiniteQueryArgFrom<D>;\n  unwrap(): Promise<InfiniteData<ResultTypeFrom<D>, PageParamFrom<D>>>;\n  refetch(): InfiniteQueryActionCreatorResult<D>;\n};\ntype StartMutationActionCreator<D extends MutationDefinition<any, any, any, any>> = (arg: QueryArgFrom<D>, options?: {\n  /**\n   * If this mutation should be tracked in the store.\n   * If you just want to manually trigger this mutation using `dispatch` and don't care about the\n   * result, state & potential errors being held in store, you can set this to false.\n   * (defaults to `true`)\n   */\n  track?: boolean;\n  fixedCacheKey?: string;\n}) => ThunkAction<MutationActionCreatorResult<D>, any, any, UnknownAction>;\nexport type MutationActionCreatorResult<D extends MutationDefinition<any, any, any, any>> = SafePromise<{\n  data: ResultTypeFrom<D>;\n  error?: undefined;\n} | {\n  data?: undefined;\n  error: Exclude<BaseQueryError<D extends MutationDefinition<any, infer BaseQuery, any, any> ? BaseQuery : never>, undefined> | SerializedError;\n}> & {\n  /** @internal */\n  arg: {\n    /**\n     * The name of the given endpoint for the mutation\n     */\n    endpointName: string;\n    /**\n     * The original arguments supplied to the mutation call\n     */\n    originalArgs: QueryArgFrom<D>;\n    /**\n     * Whether the mutation is being tracked in the store.\n     */\n    track?: boolean;\n    fixedCacheKey?: string;\n  };\n  /**\n   * A unique string generated for the request sequence\n   */\n  requestId: string;\n\n  /**\n   * A method to cancel the mutation promise. Note that this is not intended to prevent the mutation\n   * that was fired off from reaching the server, but only to assist in handling the response.\n   *\n   * Calling `abort()` prior to the promise resolving will force it to reach the error state with\n   * the serialized error:\n   * `{ name: 'AbortError', message: 'Aborted' }`\n   *\n   * @example\n   * ```ts\n   * const [updateUser] = useUpdateUserMutation();\n   *\n   * useEffect(() => {\n   *   const promise = updateUser(id);\n   *   promise\n   *     .unwrap()\n   *     .catch((err) => {\n   *       if (err.name === 'AbortError') return;\n   *       // else handle the unexpected error\n   *     })\n   *\n   *   return () => {\n   *     promise.abort();\n   *   }\n   * }, [id, updateUser])\n   * ```\n   */\n  abort(): void;\n  /**\n   * Unwraps a mutation call to provide the raw response/error.\n   *\n   * @remarks\n   * If you need to access the error or success payload immediately after a mutation, you can chain .unwrap().\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap\"\n   * addPost({ id: 1, name: 'Example' })\n   *   .unwrap()\n   *   .then((payload) => console.log('fulfilled', payload))\n   *   .catch((error) => console.error('rejected', error));\n   * ```\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap with async await\"\n   * try {\n   *   const payload = await addPost({ id: 1, name: 'Example' }).unwrap();\n   *   console.log('fulfilled', payload)\n   * } catch (error) {\n   *   console.error('rejected', error);\n   * }\n   * ```\n   */\n  unwrap(): Promise<ResultTypeFrom<D>>;\n  /**\n   * A method to manually unsubscribe from the mutation call, meaning it will be removed from cache after the usual caching grace period.\n   The value returned by the hook will reset to `isUninitialized` afterwards.\n   */\n  reset(): void;\n};\nexport function buildInitiate({\n  serializeQueryArgs,\n  queryThunk,\n  infiniteQueryThunk,\n  mutationThunk,\n  api,\n  context\n}: {\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  queryThunk: QueryThunk;\n  infiniteQueryThunk: InfiniteQueryThunk<any>;\n  mutationThunk: MutationThunk;\n  api: Api<any, EndpointDefinitions, any, any>;\n  context: ApiContext<EndpointDefinitions>;\n}) {\n  const runningQueries: Map<Dispatch, Record<string, QueryActionCreatorResult<any> | InfiniteQueryActionCreatorResult<any> | undefined>> = new Map();\n  const runningMutations: Map<Dispatch, Record<string, MutationActionCreatorResult<any> | undefined>> = new Map();\n  const {\n    unsubscribeQueryResult,\n    removeMutationResult,\n    updateSubscriptionOptions\n  } = api.internalActions;\n  return {\n    buildInitiateQuery,\n    buildInitiateInfiniteQuery,\n    buildInitiateMutation,\n    getRunningQueryThunk,\n    getRunningMutationThunk,\n    getRunningQueriesThunk,\n    getRunningMutationsThunk\n  };\n  function getRunningQueryThunk(endpointName: string, queryArgs: any) {\n    return (dispatch: Dispatch) => {\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      return runningQueries.get(dispatch)?.[queryCacheKey] as QueryActionCreatorResult<never> | InfiniteQueryActionCreatorResult<never> | undefined;\n    };\n  }\n  function getRunningMutationThunk(\n  /**\n   * this is only here to allow TS to infer the result type by input value\n   * we could use it to validate the result, but it's probably not necessary\n   */\n  _endpointName: string, fixedCacheKeyOrRequestId: string) {\n    return (dispatch: Dispatch) => {\n      return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId] as MutationActionCreatorResult<never> | undefined;\n    };\n  }\n  function getRunningQueriesThunk() {\n    return (dispatch: Dispatch) => Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function getRunningMutationsThunk() {\n    return (dispatch: Dispatch) => Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function middlewareWarning(dispatch: Dispatch) {\n    if (process.env.NODE_ENV !== 'production') {\n      if ((middlewareWarning as any).triggered) return;\n      const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n      (middlewareWarning as any).triggered = true;\n\n      // The RTKQ middleware should return the internal state object,\n      // but it should _not_ be the action object.\n      if (typeof returnedValue !== 'object' || typeof returnedValue?.type === 'string') {\n        // Otherwise, must not have been added\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(34) : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!`);\n      }\n    }\n  }\n  function buildInitiateAnyQuery<T extends 'query' | 'infiniteQuery'>(endpointName: string, endpointDefinition: QueryDefinition<any, any, any, any> | InfiniteQueryDefinition<any, any, any, any, any>) {\n    const queryAction: AnyQueryActionCreator<any> = (arg, {\n      subscribe = true,\n      forceRefetch,\n      subscriptionOptions,\n      [forceQueryFnSymbol]: forceQueryFn,\n      ...rest\n    } = {}) => (dispatch, getState) => {\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs: arg,\n        endpointDefinition,\n        endpointName\n      });\n      let thunk: AsyncThunkAction<unknown, QueryThunkArg, ThunkApiMetaConfig>;\n      const commonThunkArgs = {\n        ...rest,\n        type: 'query' as const,\n        subscribe,\n        forceRefetch: forceRefetch,\n        subscriptionOptions,\n        endpointName,\n        originalArgs: arg,\n        queryCacheKey,\n        [forceQueryFnSymbol]: forceQueryFn\n      };\n      if (isQueryDefinition(endpointDefinition)) {\n        thunk = queryThunk(commonThunkArgs);\n      } else {\n        const {\n          direction,\n          initialPageParam\n        } = rest as Pick<InfiniteQueryThunkArg<any>, 'direction' | 'initialPageParam'>;\n        thunk = infiniteQueryThunk({\n          ...(commonThunkArgs as InfiniteQueryThunkArg<any>),\n          // Supply these even if undefined. This helps with a field existence\n          // check over in `buildSlice.ts`\n          direction,\n          initialPageParam\n        });\n      }\n      const selector = (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).select(arg);\n      const thunkResult = dispatch(thunk);\n      const stateAfter = selector(getState());\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort\n      } = thunkResult;\n      const skippedSynchronously = stateAfter.requestId !== requestId;\n      const runningQuery = runningQueries.get(dispatch)?.[queryCacheKey];\n      const selectFromState = () => selector(getState());\n      const statePromise: AnyActionCreatorResult = Object.assign((forceQueryFn ?\n      // a query has been forced (upsertQueryData)\n      // -> we want to resolve it once data has been written with the data that will be written\n      thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ?\n      // a query has been skipped due to a condition and we do not have any currently running query\n      // -> we want to resolve it immediately with the current data\n      Promise.resolve(stateAfter) :\n      // query just started or one is already in flight\n      // -> wait for the running query, then resolve with data from after that\n      Promise.all([runningQuery, thunkResult]).then(selectFromState)) as SafePromise<any>, {\n        arg,\n        requestId,\n        subscriptionOptions,\n        queryCacheKey,\n        abort,\n        async unwrap() {\n          const result = await statePromise;\n          if (result.isError) {\n            throw result.error;\n          }\n          return result.data;\n        },\n        refetch: () => dispatch(queryAction(arg, {\n          subscribe: false,\n          forceRefetch: true\n        })),\n        unsubscribe() {\n          if (subscribe) dispatch(unsubscribeQueryResult({\n            queryCacheKey,\n            requestId\n          }));\n        },\n        updateSubscriptionOptions(options: SubscriptionOptions) {\n          statePromise.subscriptionOptions = options;\n          dispatch(updateSubscriptionOptions({\n            endpointName,\n            requestId,\n            queryCacheKey,\n            options\n          }));\n        }\n      });\n      if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n        const running = getOrInsert(runningQueries, dispatch, {});\n        running[queryCacheKey] = statePromise;\n        statePromise.then(() => {\n          delete running[queryCacheKey];\n          if (!countObjectKeys(running)) {\n            runningQueries.delete(dispatch);\n          }\n        });\n      }\n      return statePromise;\n    };\n    return queryAction;\n  }\n  function buildInitiateQuery(endpointName: string, endpointDefinition: QueryDefinition<any, any, any, any>) {\n    const queryAction: StartQueryActionCreator<any> = buildInitiateAnyQuery(endpointName, endpointDefinition);\n    return queryAction;\n  }\n  function buildInitiateInfiniteQuery(endpointName: string, endpointDefinition: InfiniteQueryDefinition<any, any, any, any, any>) {\n    const infiniteQueryAction: StartInfiniteQueryActionCreator<any> = buildInitiateAnyQuery(endpointName, endpointDefinition);\n    return infiniteQueryAction;\n  }\n  function buildInitiateMutation(endpointName: string): StartMutationActionCreator<any> {\n    return (arg, {\n      track = true,\n      fixedCacheKey\n    } = {}) => (dispatch, getState) => {\n      const thunk = mutationThunk({\n        type: 'mutation',\n        endpointName,\n        originalArgs: arg,\n        track,\n        fixedCacheKey\n      });\n      const thunkResult = dispatch(thunk);\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort,\n        unwrap\n      } = thunkResult;\n      const returnValuePromise = asSafePromise(thunkResult.unwrap().then(data => ({\n        data\n      })), error => ({\n        error\n      }));\n      const reset = () => {\n        dispatch(removeMutationResult({\n          requestId,\n          fixedCacheKey\n        }));\n      };\n      const ret = Object.assign(returnValuePromise, {\n        arg: thunkResult.arg,\n        requestId,\n        abort,\n        unwrap,\n        reset\n      });\n      const running = runningMutations.get(dispatch) || {};\n      runningMutations.set(dispatch, running);\n      running[requestId] = ret;\n      ret.then(() => {\n        delete running[requestId];\n        if (!countObjectKeys(running)) {\n          runningMutations.delete(dispatch);\n        }\n      });\n      if (fixedCacheKey) {\n        running[fixedCacheKey] = ret;\n        ret.then(() => {\n          if (running[fixedCacheKey] === ret) {\n            delete running[fixedCacheKey];\n            if (!countObjectKeys(running)) {\n              runningMutations.delete(dispatch);\n            }\n          }\n        });\n      }\n      return ret;\n    };\n  }\n}","import type { StandardSchemaV1 } from '@standard-schema/spec';\nimport { SchemaError } from '@standard-schema/utils';\nexport class NamedSchemaError extends SchemaError {\n  constructor(issues: readonly StandardSchemaV1.Issue[], public readonly value: any, public readonly schemaName: string, public readonly _bqMeta: any) {\n    super(issues);\n  }\n}\nexport async function parseWithSchema<Schema extends StandardSchemaV1>(schema: Schema, data: unknown, schemaName: string, bqMeta: any): Promise<StandardSchemaV1.InferOutput<Schema>> {\n  const result = await schema['~standard'].validate(data);\n  if (result.issues) {\n    throw new NamedSchemaError(result.issues, data, schemaName, bqMeta);\n  }\n  return result.value;\n}","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { combineReducers, createAction, createSlice, isAnyOf, isFulfilled, isRejectedWithValue, createNextState, prepareAutoBatched, SHOULD_AUTOBATCH, nanoid } from './rtkImports';\nimport type { QuerySubstateIdentifier, QuerySubState, MutationSubstateIdentifier, MutationSubState, MutationState, QueryState, InvalidationState, Subscribers, QueryCacheKey, SubscriptionState, ConfigState, InfiniteQuerySubState, InfiniteQueryDirection } from './apiState';\nimport { QueryStatus } from './apiState';\nimport type { AllQueryKeys, QueryArgFromAnyQueryDefinition, DataFromAnyQueryDefinition, InfiniteQueryThunk, MutationThunk, QueryThunk, QueryThunkArg } from './buildThunks';\nimport { calculateProvidedByThunk } from './buildThunks';\nimport { isInfiniteQueryDefinition, type AssertTagTypes, type EndpointDefinitions, type FullTagDescription, type QueryDefinition } from '../endpointDefinitions';\nimport type { Patch } from 'immer';\nimport { isDraft } from 'immer';\nimport { applyPatches, original } from 'immer';\nimport { onFocus, onFocusLost, onOffline, onOnline } from './setupListeners';\nimport { isDocumentVisible, isOnline, copyWithStructuralSharing } from '../utils';\nimport type { ApiContext } from '../apiTypes';\nimport { isUpsertQuery } from './buildInitiate';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { UnwrapPromise } from '../tsHelpers';\n\n/**\n * A typesafe single entry to be upserted into the cache\n */\nexport type NormalizedQueryUpsertEntry<Definitions extends EndpointDefinitions, EndpointName extends AllQueryKeys<Definitions>> = {\n  endpointName: EndpointName;\n  arg: QueryArgFromAnyQueryDefinition<Definitions, EndpointName>;\n  value: DataFromAnyQueryDefinition<Definitions, EndpointName>;\n};\n\n/**\n * The internal version that is not typesafe since we can't carry the generics through `createSlice`\n */\ntype NormalizedQueryUpsertEntryPayload = {\n  endpointName: string;\n  arg: unknown;\n  value: unknown;\n};\nexport type ProcessedQueryUpsertEntry = {\n  queryDescription: QueryThunkArg;\n  value: unknown;\n};\n\n/**\n * A typesafe representation of a util action creator that accepts cache entry descriptions to upsert\n */\nexport type UpsertEntries<Definitions extends EndpointDefinitions> = (<EndpointNames extends Array<AllQueryKeys<Definitions>>>(entries: [...{ [I in keyof EndpointNames]: NormalizedQueryUpsertEntry<Definitions, EndpointNames[I]> }]) => PayloadAction<NormalizedQueryUpsertEntryPayload[]>) & {\n  match: (action: unknown) => action is PayloadAction<NormalizedQueryUpsertEntryPayload[]>;\n};\nfunction updateQuerySubstateIfExists(state: QueryState<any>, queryCacheKey: QueryCacheKey, update: (substate: QuerySubState<any> | InfiniteQuerySubState<any>) => void) {\n  const substate = state[queryCacheKey];\n  if (substate) {\n    update(substate);\n  }\n}\nexport function getMutationCacheKey(id: MutationSubstateIdentifier | {\n  requestId: string;\n  arg: {\n    fixedCacheKey?: string | undefined;\n  };\n}): string;\nexport function getMutationCacheKey(id: {\n  fixedCacheKey?: string;\n  requestId?: string;\n}): string | undefined;\nexport function getMutationCacheKey(id: {\n  fixedCacheKey?: string;\n  requestId?: string;\n} | MutationSubstateIdentifier | {\n  requestId: string;\n  arg: {\n    fixedCacheKey?: string | undefined;\n  };\n}): string | undefined {\n  return ('arg' in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId;\n}\nfunction updateMutationSubstateIfExists(state: MutationState<any>, id: MutationSubstateIdentifier | {\n  requestId: string;\n  arg: {\n    fixedCacheKey?: string | undefined;\n  };\n}, update: (substate: MutationSubState<any>) => void) {\n  const substate = state[getMutationCacheKey(id)];\n  if (substate) {\n    update(substate);\n  }\n}\nconst initialState = {} as any;\nexport function buildSlice({\n  reducerPath,\n  queryThunk,\n  mutationThunk,\n  serializeQueryArgs,\n  context: {\n    endpointDefinitions: definitions,\n    apiUid,\n    extractRehydrationInfo,\n    hasRehydrationInfo\n  },\n  assertTagType,\n  config\n}: {\n  reducerPath: string;\n  queryThunk: QueryThunk;\n  infiniteQueryThunk: InfiniteQueryThunk<any>;\n  mutationThunk: MutationThunk;\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  context: ApiContext<EndpointDefinitions>;\n  assertTagType: AssertTagTypes;\n  config: Omit<ConfigState<string>, 'online' | 'focused' | 'middlewareRegistered'>;\n}) {\n  const resetApiState = createAction(`${reducerPath}/resetApiState`);\n  function writePendingCacheEntry(draft: QueryState<any>, arg: QueryThunkArg, upserting: boolean, meta: {\n    arg: QueryThunkArg;\n    requestId: string;\n    // requestStatus: 'pending'\n  } & {\n    startedTimeStamp: number;\n  }) {\n    draft[arg.queryCacheKey] ??= {\n      status: QueryStatus.uninitialized,\n      endpointName: arg.endpointName\n    };\n    updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n      substate.status = QueryStatus.pending;\n      substate.requestId = upserting && substate.requestId ?\n      // for `upsertQuery` **updates**, keep the current `requestId`\n      substate.requestId :\n      // for normal queries or `upsertQuery` **inserts** always update the `requestId`\n      meta.requestId;\n      if (arg.originalArgs !== undefined) {\n        substate.originalArgs = arg.originalArgs;\n      }\n      substate.startedTimeStamp = meta.startedTimeStamp;\n      const endpointDefinition = definitions[meta.arg.endpointName];\n      if (isInfiniteQueryDefinition(endpointDefinition) && 'direction' in arg) {\n        ;\n        (substate as InfiniteQuerySubState<any>).direction = arg.direction as InfiniteQueryDirection;\n      }\n    });\n  }\n  function writeFulfilledCacheEntry(draft: QueryState<any>, meta: {\n    arg: QueryThunkArg;\n    requestId: string;\n  } & {\n    fulfilledTimeStamp: number;\n    baseQueryMeta: unknown;\n  }, payload: unknown, upserting: boolean) {\n    updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, substate => {\n      if (substate.requestId !== meta.requestId && !upserting) return;\n      const {\n        merge\n      } = definitions[meta.arg.endpointName] as QueryDefinition<any, any, any, any>;\n      substate.status = QueryStatus.fulfilled;\n      if (merge) {\n        if (substate.data !== undefined) {\n          const {\n            fulfilledTimeStamp,\n            arg,\n            baseQueryMeta,\n            requestId\n          } = meta;\n          // There's existing cache data. Let the user merge it in themselves.\n          // We're already inside an Immer-powered reducer, and the user could just mutate `substate.data`\n          // themselves inside of `merge()`. But, they might also want to return a new value.\n          // Try to let Immer figure that part out, save the result, and assign it to `substate.data`.\n          let newData = createNextState(substate.data, draftSubstateData => {\n            // As usual with Immer, you can mutate _or_ return inside here, but not both\n            return merge(draftSubstateData, payload, {\n              arg: arg.originalArgs,\n              baseQueryMeta,\n              fulfilledTimeStamp,\n              requestId\n            });\n          });\n          substate.data = newData;\n        } else {\n          // Presumably a fresh request. Just cache the response data.\n          substate.data = payload;\n        }\n      } else {\n        // Assign or safely update the cache data.\n        substate.data = definitions[meta.arg.endpointName].structuralSharing ?? true ? copyWithStructuralSharing(isDraft(substate.data) ? original(substate.data) : substate.data, payload) : payload;\n      }\n      delete substate.error;\n      substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n    });\n  }\n  const querySlice = createSlice({\n    name: `${reducerPath}/queries`,\n    initialState: initialState as QueryState<any>,\n    reducers: {\n      removeQueryResult: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey\n          }\n        }: PayloadAction<QuerySubstateIdentifier>) {\n          delete draft[queryCacheKey];\n        },\n        prepare: prepareAutoBatched<QuerySubstateIdentifier>()\n      },\n      cacheEntriesUpserted: {\n        reducer(draft, action: PayloadAction<ProcessedQueryUpsertEntry[], string, {\n          RTK_autoBatch: boolean;\n          requestId: string;\n          timestamp: number;\n        }>) {\n          for (const entry of action.payload) {\n            const {\n              queryDescription: arg,\n              value\n            } = entry;\n            writePendingCacheEntry(draft, arg, true, {\n              arg,\n              requestId: action.meta.requestId,\n              startedTimeStamp: action.meta.timestamp\n            });\n            writeFulfilledCacheEntry(draft, {\n              arg,\n              requestId: action.meta.requestId,\n              fulfilledTimeStamp: action.meta.timestamp,\n              baseQueryMeta: {}\n            }, value,\n            // We know we're upserting here\n            true);\n          }\n        },\n        prepare: (payload: NormalizedQueryUpsertEntryPayload[]) => {\n          const queryDescriptions: ProcessedQueryUpsertEntry[] = payload.map(entry => {\n            const {\n              endpointName,\n              arg,\n              value\n            } = entry;\n            const endpointDefinition = definitions[endpointName];\n            const queryDescription: QueryThunkArg = {\n              type: 'query',\n              endpointName: endpointName,\n              originalArgs: entry.arg,\n              queryCacheKey: serializeQueryArgs({\n                queryArgs: arg,\n                endpointDefinition,\n                endpointName\n              })\n            };\n            return {\n              queryDescription,\n              value\n            };\n          });\n          const result = {\n            payload: queryDescriptions,\n            meta: {\n              [SHOULD_AUTOBATCH]: true,\n              requestId: nanoid(),\n              timestamp: Date.now()\n            }\n          };\n          return result;\n        }\n      },\n      queryResultPatched: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey,\n            patches\n          }\n        }: PayloadAction<QuerySubstateIdentifier & {\n          patches: readonly Patch[];\n        }>) {\n          updateQuerySubstateIfExists(draft, queryCacheKey, substate => {\n            substate.data = applyPatches(substate.data as any, patches.concat());\n          });\n        },\n        prepare: prepareAutoBatched<QuerySubstateIdentifier & {\n          patches: readonly Patch[];\n        }>()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(queryThunk.pending, (draft, {\n        meta,\n        meta: {\n          arg\n        }\n      }) => {\n        const upserting = isUpsertQuery(arg);\n        writePendingCacheEntry(draft, arg, upserting, meta);\n      }).addCase(queryThunk.fulfilled, (draft, {\n        meta,\n        payload\n      }) => {\n        const upserting = isUpsertQuery(meta.arg);\n        writeFulfilledCacheEntry(draft, meta, payload, upserting);\n      }).addCase(queryThunk.rejected, (draft, {\n        meta: {\n          condition,\n          arg,\n          requestId\n        },\n        error,\n        payload\n      }) => {\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n          if (condition) {\n            // request was aborted due to condition (another query already running)\n          } else {\n            // request failed\n            if (substate.requestId !== requestId) return;\n            substate.status = QueryStatus.rejected;\n            substate.error = (payload ?? error) as any;\n          }\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          queries\n        } = extractRehydrationInfo(action)!;\n        for (const [key, entry] of Object.entries(queries)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          entry?.status === QueryStatus.fulfilled || entry?.status === QueryStatus.rejected) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  const mutationSlice = createSlice({\n    name: `${reducerPath}/mutations`,\n    initialState: initialState as MutationState<any>,\n    reducers: {\n      removeMutationResult: {\n        reducer(draft, {\n          payload\n        }: PayloadAction<MutationSubstateIdentifier>) {\n          const cacheKey = getMutationCacheKey(payload);\n          if (cacheKey in draft) {\n            delete draft[cacheKey];\n          }\n        },\n        prepare: prepareAutoBatched<MutationSubstateIdentifier>()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(mutationThunk.pending, (draft, {\n        meta,\n        meta: {\n          requestId,\n          arg,\n          startedTimeStamp\n        }\n      }) => {\n        if (!arg.track) return;\n        draft[getMutationCacheKey(meta)] = {\n          requestId,\n          status: QueryStatus.pending,\n          endpointName: arg.endpointName,\n          startedTimeStamp\n        };\n      }).addCase(mutationThunk.fulfilled, (draft, {\n        payload,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.fulfilled;\n          substate.data = payload;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(mutationThunk.rejected, (draft, {\n        payload,\n        error,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.rejected;\n          substate.error = (payload ?? error) as any;\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          mutations\n        } = extractRehydrationInfo(action)!;\n        for (const [key, entry] of Object.entries(mutations)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          (entry?.status === QueryStatus.fulfilled || entry?.status === QueryStatus.rejected) &&\n          // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n          key !== entry?.requestId) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  type CalculateProvidedByAction = UnwrapPromise<ReturnType<ReturnType<QueryThunk>> | ReturnType<ReturnType<InfiniteQueryThunk<any>>>>;\n  const initialInvalidationState: InvalidationState<string> = {\n    tags: {},\n    keys: {}\n  };\n  const invalidationSlice = createSlice({\n    name: `${reducerPath}/invalidation`,\n    initialState: initialInvalidationState,\n    reducers: {\n      updateProvidedBy: {\n        reducer(draft, action: PayloadAction<Array<{\n          queryCacheKey: QueryCacheKey;\n          providedTags: readonly FullTagDescription<string>[];\n        }>>) {\n          for (const {\n            queryCacheKey,\n            providedTags\n          } of action.payload) {\n            removeCacheKeyFromTags(draft, queryCacheKey);\n            for (const {\n              type,\n              id\n            } of providedTags) {\n              const subscribedQueries = (draft.tags[type] ??= {})[id || '__internal_without_id'] ??= [];\n              const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n\n            // Remove readonly from the providedTags array\n            draft.keys[queryCacheKey] = providedTags as FullTagDescription<string>[];\n          }\n        },\n        prepare: prepareAutoBatched<Array<{\n          queryCacheKey: QueryCacheKey;\n          providedTags: readonly FullTagDescription<string>[];\n        }>>()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, (draft, {\n        payload: {\n          queryCacheKey\n        }\n      }) => {\n        removeCacheKeyFromTags(draft, queryCacheKey);\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          provided\n        } = extractRehydrationInfo(action)!;\n        for (const [type, incomingTags] of Object.entries(provided)) {\n          for (const [id, cacheKeys] of Object.entries(incomingTags)) {\n            const subscribedQueries = (draft.tags[type] ??= {})[id || '__internal_without_id'] ??= [];\n            for (const queryCacheKey of cacheKeys) {\n              const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n          }\n        }\n      }).addMatcher(isAnyOf(isFulfilled(queryThunk), isRejectedWithValue(queryThunk)), (draft, action) => {\n        writeProvidedTagsForQueries(draft, [action]);\n      }).addMatcher(querySlice.actions.cacheEntriesUpserted.match, (draft, action) => {\n        const mockActions: CalculateProvidedByAction[] = action.payload.map(({\n          queryDescription,\n          value\n        }) => {\n          return {\n            type: 'UNKNOWN',\n            payload: value,\n            meta: {\n              requestStatus: 'fulfilled',\n              requestId: 'UNKNOWN',\n              arg: queryDescription\n            }\n          };\n        });\n        writeProvidedTagsForQueries(draft, mockActions);\n      });\n    }\n  });\n  function removeCacheKeyFromTags(draft: InvalidationState<any>, queryCacheKey: QueryCacheKey) {\n    const existingTags = draft.keys[queryCacheKey] ?? [];\n\n    // Delete this cache key from any existing tags that may have provided it\n    for (const tag of existingTags) {\n      const tagType = tag.type;\n      const tagId = tag.id ?? '__internal_without_id';\n      const tagSubscriptions = draft.tags[tagType]?.[tagId];\n      if (tagSubscriptions) {\n        draft.tags[tagType][tagId] = tagSubscriptions.filter(qc => qc !== queryCacheKey);\n      }\n    }\n    delete draft.keys[queryCacheKey];\n  }\n  function writeProvidedTagsForQueries(draft: InvalidationState<string>, actions: CalculateProvidedByAction[]) {\n    const providedByEntries = actions.map(action => {\n      const providedTags = calculateProvidedByThunk(action, 'providesTags', definitions, assertTagType);\n      const {\n        queryCacheKey\n      } = action.meta.arg;\n      return {\n        queryCacheKey,\n        providedTags\n      };\n    });\n    invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy(providedByEntries));\n  }\n\n  // Dummy slice to generate actions\n  const subscriptionSlice = createSlice({\n    name: `${reducerPath}/subscriptions`,\n    initialState: initialState as SubscriptionState,\n    reducers: {\n      updateSubscriptionOptions(d, a: PayloadAction<{\n        endpointName: string;\n        requestId: string;\n        options: Subscribers[number];\n      } & QuerySubstateIdentifier>) {\n        // Dummy\n      },\n      unsubscribeQueryResult(d, a: PayloadAction<{\n        requestId: string;\n      } & QuerySubstateIdentifier>) {\n        // Dummy\n      },\n      internal_getRTKQSubscriptions() {}\n    }\n  });\n  const internalSubscriptionsSlice = createSlice({\n    name: `${reducerPath}/internalSubscriptions`,\n    initialState: initialState as SubscriptionState,\n    reducers: {\n      subscriptionsUpdated: {\n        reducer(state, action: PayloadAction<Patch[]>) {\n          return applyPatches(state, action.payload);\n        },\n        prepare: prepareAutoBatched<Patch[]>()\n      }\n    }\n  });\n  const configSlice = createSlice({\n    name: `${reducerPath}/config`,\n    initialState: {\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false,\n      ...config\n    } as ConfigState<string>,\n    reducers: {\n      middlewareRegistered(state, {\n        payload\n      }: PayloadAction<string>) {\n        state.middlewareRegistered = state.middlewareRegistered === 'conflict' || apiUid !== payload ? 'conflict' : true;\n      }\n    },\n    extraReducers: builder => {\n      builder.addCase(onOnline, state => {\n        state.online = true;\n      }).addCase(onOffline, state => {\n        state.online = false;\n      }).addCase(onFocus, state => {\n        state.focused = true;\n      }).addCase(onFocusLost, state => {\n        state.focused = false;\n      })\n      // update the state to be a new object to be picked up as a \"state change\"\n      // by redux-persist's `autoMergeLevel2`\n      .addMatcher(hasRehydrationInfo, draft => ({\n        ...draft\n      }));\n    }\n  });\n  const combinedReducer = combineReducers({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: internalSubscriptionsSlice.reducer,\n    config: configSlice.reducer\n  });\n  const reducer: typeof combinedReducer = (state, action) => combinedReducer(resetApiState.match(action) ? undefined : state, action);\n  const actions = {\n    ...configSlice.actions,\n    ...querySlice.actions,\n    ...subscriptionSlice.actions,\n    ...internalSubscriptionsSlice.actions,\n    ...mutationSlice.actions,\n    ...invalidationSlice.actions,\n    resetApiState\n  };\n  return {\n    reducer,\n    actions\n  };\n}\nexport type SliceActions = ReturnType<typeof buildSlice>['actions'];","import type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { EndpointDefinition, EndpointDefinitions, InfiniteQueryArgFrom, InfiniteQueryDefinition, MutationDefinition, QueryArgFrom, QueryArgFromAnyQuery, QueryDefinition, ReducerPathFrom, TagDescription, TagTypesFrom } from '../endpointDefinitions';\nimport { expandTagDescription } from '../endpointDefinitions';\nimport { flatten, isNotNullish } from '../utils';\nimport type { InfiniteData, InfiniteQueryConfigOptions, InfiniteQuerySubState, MutationSubState, QueryCacheKey, QueryKeys, QueryState, QuerySubState, RequestStatusFlags, RootState as _RootState } from './apiState';\nimport { QueryStatus, getRequestStatusFlags } from './apiState';\nimport { getMutationCacheKey } from './buildSlice';\nimport type { createSelector as _createSelector } from './rtkImports';\nimport { createNextState } from './rtkImports';\nimport { type AllQueryKeys, getNextPageParam, getPreviousPageParam } from './buildThunks';\nexport type SkipToken = typeof skipToken;\n/**\n * Can be passed into `useQuery`, `useQueryState` or `useQuerySubscription`\n * instead of the query argument to get the same effect as if setting\n * `skip: true` in the query options.\n *\n * Useful for scenarios where a query should be skipped when `arg` is `undefined`\n * and TypeScript complains about it because `arg` is not allowed to be passed\n * in as `undefined`, such as\n *\n * ```ts\n * // codeblock-meta title=\"will error if the query argument is not allowed to be undefined\" no-transpile\n * useSomeQuery(arg, { skip: !!arg })\n * ```\n *\n * ```ts\n * // codeblock-meta title=\"using skipToken instead\" no-transpile\n * useSomeQuery(arg ?? skipToken)\n * ```\n *\n * If passed directly into a query or mutation selector, that selector will always\n * return an uninitialized state.\n */\nexport const skipToken = /* @__PURE__ */Symbol.for('RTKQ/skipToken');\nexport type BuildSelectorsApiEndpointQuery<Definition extends QueryDefinition<any, any, any, any, any>, Definitions extends EndpointDefinitions> = {\n  select: QueryResultSelectorFactory<Definition, _RootState<Definitions, TagTypesFrom<Definition>, ReducerPathFrom<Definition>>>;\n};\nexport type BuildSelectorsApiEndpointInfiniteQuery<Definition extends InfiniteQueryDefinition<any, any, any, any, any>, Definitions extends EndpointDefinitions> = {\n  select: InfiniteQueryResultSelectorFactory<Definition, _RootState<Definitions, TagTypesFrom<Definition>, ReducerPathFrom<Definition>>>;\n};\nexport type BuildSelectorsApiEndpointMutation<Definition extends MutationDefinition<any, any, any, any, any>, Definitions extends EndpointDefinitions> = {\n  select: MutationResultSelectorFactory<Definition, _RootState<Definitions, TagTypesFrom<Definition>, ReducerPathFrom<Definition>>>;\n};\ntype QueryResultSelectorFactory<Definition extends QueryDefinition<any, any, any, any>, RootState> = (queryArg: QueryArgFrom<Definition> | SkipToken) => (state: RootState) => QueryResultSelectorResult<Definition>;\nexport type QueryResultSelectorResult<Definition extends QueryDefinition<any, any, any, any>> = QuerySubState<Definition> & RequestStatusFlags;\ntype InfiniteQueryResultSelectorFactory<Definition extends InfiniteQueryDefinition<any, any, any, any, any>, RootState> = (queryArg: InfiniteQueryArgFrom<Definition> | SkipToken) => (state: RootState) => InfiniteQueryResultSelectorResult<Definition>;\nexport type InfiniteQueryResultFlags = {\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  isFetchingNextPage: boolean;\n  isFetchingPreviousPage: boolean;\n  isFetchNextPageError: boolean;\n  isFetchPreviousPageError: boolean;\n};\nexport type InfiniteQueryResultSelectorResult<Definition extends InfiniteQueryDefinition<any, any, any, any, any>> = InfiniteQuerySubState<Definition> & RequestStatusFlags & InfiniteQueryResultFlags;\ntype MutationResultSelectorFactory<Definition extends MutationDefinition<any, any, any, any>, RootState> = (requestId: string | {\n  requestId: string | undefined;\n  fixedCacheKey: string | undefined;\n} | SkipToken) => (state: RootState) => MutationResultSelectorResult<Definition>;\nexport type MutationResultSelectorResult<Definition extends MutationDefinition<any, any, any, any>> = MutationSubState<Definition> & RequestStatusFlags;\nconst initialSubState: QuerySubState<any> = {\n  status: QueryStatus.uninitialized as const\n};\n\n// abuse immer to freeze default states\nconst defaultQuerySubState = /* @__PURE__ */createNextState(initialSubState, () => {});\nconst defaultMutationSubState = /* @__PURE__ */createNextState(initialSubState as MutationSubState<any>, () => {});\nexport type AllSelectors = ReturnType<typeof buildSelectors>;\nexport function buildSelectors<Definitions extends EndpointDefinitions, ReducerPath extends string>({\n  serializeQueryArgs,\n  reducerPath,\n  createSelector\n}: {\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  reducerPath: ReducerPath;\n  createSelector: typeof _createSelector;\n}) {\n  type RootState = _RootState<Definitions, string, string>;\n  const selectSkippedQuery = (state: RootState) => defaultQuerySubState;\n  const selectSkippedMutation = (state: RootState) => defaultMutationSubState;\n  return {\n    buildQuerySelector,\n    buildInfiniteQuerySelector,\n    buildMutationSelector,\n    selectInvalidatedBy,\n    selectCachedArgsForQuery,\n    selectApiState,\n    selectQueries,\n    selectMutations,\n    selectQueryEntry,\n    selectConfig\n  };\n  function withRequestFlags<T extends {\n    status: QueryStatus;\n  }>(substate: T): T & RequestStatusFlags {\n    return {\n      ...substate,\n      ...getRequestStatusFlags(substate.status)\n    };\n  }\n  function selectApiState(rootState: RootState) {\n    const state = rootState[reducerPath];\n    if (process.env.NODE_ENV !== 'production') {\n      if (!state) {\n        if ((selectApiState as any).triggered) return state;\n        (selectApiState as any).triggered = true;\n        console.error(`Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`);\n      }\n    }\n    return state;\n  }\n  function selectQueries(rootState: RootState) {\n    return selectApiState(rootState)?.queries;\n  }\n  function selectQueryEntry(rootState: RootState, cacheKey: QueryCacheKey) {\n    return selectQueries(rootState)?.[cacheKey];\n  }\n  function selectMutations(rootState: RootState) {\n    return selectApiState(rootState)?.mutations;\n  }\n  function selectConfig(rootState: RootState) {\n    return selectApiState(rootState)?.config;\n  }\n  function buildAnyQuerySelector(endpointName: string, endpointDefinition: EndpointDefinition<any, any, any, any>, combiner: <T extends {\n    status: QueryStatus;\n  }>(substate: T) => T & RequestStatusFlags) {\n    return (queryArgs: any) => {\n      // Avoid calling serializeQueryArgs if the arg is skipToken\n      if (queryArgs === skipToken) {\n        return createSelector(selectSkippedQuery, combiner);\n      }\n      const serializedArgs = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      const selectQuerySubstate = (state: RootState) => selectQueryEntry(state, serializedArgs) ?? defaultQuerySubState;\n      return createSelector(selectQuerySubstate, combiner);\n    };\n  }\n  function buildQuerySelector(endpointName: string, endpointDefinition: QueryDefinition<any, any, any, any>) {\n    return buildAnyQuerySelector(endpointName, endpointDefinition, withRequestFlags) as QueryResultSelectorFactory<any, RootState>;\n  }\n  function buildInfiniteQuerySelector(endpointName: string, endpointDefinition: InfiniteQueryDefinition<any, any, any, any, any>) {\n    const {\n      infiniteQueryOptions\n    } = endpointDefinition;\n    function withInfiniteQueryResultFlags<T extends {\n      status: QueryStatus;\n    }>(substate: T): T & RequestStatusFlags & InfiniteQueryResultFlags {\n      const stateWithRequestFlags = {\n        ...(substate as InfiniteQuerySubState<any>),\n        ...getRequestStatusFlags(substate.status)\n      };\n      const {\n        isLoading,\n        isError,\n        direction\n      } = stateWithRequestFlags;\n      const isForward = direction === 'forward';\n      const isBackward = direction === 'backward';\n      return {\n        ...stateWithRequestFlags,\n        hasNextPage: getHasNextPage(infiniteQueryOptions, stateWithRequestFlags.data, stateWithRequestFlags.originalArgs),\n        hasPreviousPage: getHasPreviousPage(infiniteQueryOptions, stateWithRequestFlags.data, stateWithRequestFlags.originalArgs),\n        isFetchingNextPage: isLoading && isForward,\n        isFetchingPreviousPage: isLoading && isBackward,\n        isFetchNextPageError: isError && isForward,\n        isFetchPreviousPageError: isError && isBackward\n      };\n    }\n    return buildAnyQuerySelector(endpointName, endpointDefinition, withInfiniteQueryResultFlags) as unknown as InfiniteQueryResultSelectorFactory<any, RootState>;\n  }\n  function buildMutationSelector() {\n    return (id => {\n      let mutationId: string | typeof skipToken;\n      if (typeof id === 'object') {\n        mutationId = getMutationCacheKey(id) ?? skipToken;\n      } else {\n        mutationId = id;\n      }\n      const selectMutationSubstate = (state: RootState) => selectApiState(state)?.mutations?.[mutationId as string] ?? defaultMutationSubState;\n      const finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n      return createSelector(finalSelectMutationSubstate, withRequestFlags);\n    }) as MutationResultSelectorFactory<any, RootState>;\n  }\n  function selectInvalidatedBy(state: RootState, tags: ReadonlyArray<TagDescription<string> | null | undefined>): Array<{\n    endpointName: string;\n    originalArgs: any;\n    queryCacheKey: QueryCacheKey;\n  }> {\n    const apiState = state[reducerPath];\n    const toInvalidate = new Set<QueryCacheKey>();\n    for (const tag of tags.filter(isNotNullish).map(expandTagDescription)) {\n      const provided = apiState.provided.tags[tag.type];\n      if (!provided) {\n        continue;\n      }\n      let invalidateSubscriptions = (tag.id !== undefined ?\n      // id given: invalidate all queries that provide this type & id\n      provided[tag.id] :\n      // no id: invalidate all queries that provide this type\n      flatten(Object.values(provided))) ?? [];\n      for (const invalidate of invalidateSubscriptions) {\n        toInvalidate.add(invalidate);\n      }\n    }\n    return flatten(Array.from(toInvalidate.values()).map(queryCacheKey => {\n      const querySubState = apiState.queries[queryCacheKey];\n      return querySubState ? [{\n        queryCacheKey,\n        endpointName: querySubState.endpointName!,\n        originalArgs: querySubState.originalArgs\n      }] : [];\n    }));\n  }\n  function selectCachedArgsForQuery<QueryName extends AllQueryKeys<Definitions>>(state: RootState, queryName: QueryName): Array<QueryArgFromAnyQuery<Definitions[QueryName]>> {\n    return Object.values(selectQueries(state) as QueryState<any>).filter((entry): entry is Exclude<QuerySubState<Definitions[QueryName]>, {\n      status: QueryStatus.uninitialized;\n    }> => entry?.endpointName === queryName && entry.status !== QueryStatus.uninitialized).map(entry => entry.originalArgs);\n  }\n  function getHasNextPage(options: InfiniteQueryConfigOptions<any, any, any>, data?: InfiniteData<unknown, unknown>, queryArg?: unknown): boolean {\n    if (!data) return false;\n    return getNextPageParam(options, data, queryArg) != null;\n  }\n  function getHasPreviousPage(options: InfiniteQueryConfigOptions<any, any, any>, data?: InfiniteData<unknown, unknown>, queryArg?: unknown): boolean {\n    if (!data || !options.getPreviousPageParam) return false;\n    return getPreviousPageParam(options, data, queryArg) != null;\n  }\n}","import type { QueryCacheKey } from './core/apiState';\nimport type { EndpointDefinition } from './endpointDefinitions';\nimport { isPlainObject } from './core/rtkImports';\nconst cache: WeakMap<any, string> | undefined = WeakMap ? new WeakMap() : undefined;\nexport const defaultSerializeQueryArgs: SerializeQueryArgs<any> = ({\n  endpointName,\n  queryArgs\n}) => {\n  let serialized = '';\n  const cached = cache?.get(queryArgs);\n  if (typeof cached === 'string') {\n    serialized = cached;\n  } else {\n    const stringified = JSON.stringify(queryArgs, (key, value) => {\n      // Handle bigints\n      value = typeof value === 'bigint' ? {\n        $bigint: value.toString()\n      } : value;\n      // Sort the object keys before stringifying, to prevent useQuery({ a: 1, b: 2 }) having a different cache key than useQuery({ b: 2, a: 1 })\n      value = isPlainObject(value) ? Object.keys(value).sort().reduce<any>((acc, key) => {\n        acc[key] = (value as any)[key];\n        return acc;\n      }, {}) : value;\n      return value;\n    });\n    if (isPlainObject(queryArgs)) {\n      cache?.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return `${endpointName}(${serialized})`;\n};\nexport type SerializeQueryArgs<QueryArgs, ReturnType = string> = (_: {\n  queryArgs: QueryArgs;\n  endpointDefinition: EndpointDefinition<any, any, any, any>;\n  endpointName: string;\n}) => ReturnType;\nexport type InternalSerializeQueryArgs = (_: {\n  queryArgs: any;\n  endpointDefinition: EndpointDefinition<any, any, any, any>;\n  endpointName: string;\n}) => QueryCacheKey;","import { formatProdErrorMessage as _formatProdErrorMessage, formatProdErrorMessage as _formatProdErrorMessage2, formatProdErrorMessage as _formatProdErrorMessage3 } from \"@reduxjs/toolkit\";\nimport type { Api, ApiContext, Module, ModuleName } from './apiTypes';\nimport type { CombinedState } from './core/apiState';\nimport type { BaseQueryArg, BaseQueryFn } from './baseQueryTypes';\nimport type { SerializeQueryArgs } from './defaultSerializeQueryArgs';\nimport { defaultSerializeQueryArgs } from './defaultSerializeQueryArgs';\nimport type { EndpointBuilder, EndpointDefinitions, SchemaFailureConverter, SchemaFailureHandler } from './endpointDefinitions';\nimport { DefinitionType, isInfiniteQueryDefinition, isQueryDefinition } from './endpointDefinitions';\nimport { nanoid } from './core/rtkImports';\nimport type { UnknownAction } from '@reduxjs/toolkit';\nimport type { NoInfer } from './tsHelpers';\nimport { weakMapMemoize } from 'reselect';\nexport interface CreateApiOptions<BaseQuery extends BaseQueryFn, Definitions extends EndpointDefinitions, ReducerPath extends string = 'api', TagTypes extends string = never> {\n  /**\n   * The base query used by each endpoint if no `queryFn` option is specified. RTK Query exports a utility called [fetchBaseQuery](./fetchBaseQuery) as a lightweight wrapper around `fetch` for common use-cases. See [Customizing Queries](../../rtk-query/usage/customizing-queries) if `fetchBaseQuery` does not handle your requirements.\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   *\n   * const api = createApi({\n   *   // highlight-start\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // ...endpoints\n   *   }),\n   * })\n   * ```\n   */\n  baseQuery: BaseQuery;\n  /**\n   * An array of string tag type names. Specifying tag types is optional, but you should define them so that they can be used for caching and invalidation. When defining a tag type, you will be able to [provide](../../rtk-query/usage/automated-refetching#providing-tags) them with `providesTags` and [invalidate](../../rtk-query/usage/automated-refetching#invalidating-tags) them with `invalidatesTags` when configuring [endpoints](#endpoints).\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-start\n   *   tagTypes: ['Post', 'User'],\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // ...endpoints\n   *   }),\n   * })\n   * ```\n   */\n  tagTypes?: readonly TagTypes[];\n  /**\n   * The `reducerPath` is a _unique_ key that your service will be mounted to in your store. If you call `createApi` more than once in your application, you will need to provide a unique value each time. Defaults to `'api'`.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"apis.js\"\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query';\n   *\n   * const apiOne = createApi({\n   *   // highlight-start\n   *   reducerPath: 'apiOne',\n   *   // highlight-end\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (builder) => ({\n   *     // ...endpoints\n   *   }),\n   * });\n   *\n   * const apiTwo = createApi({\n   *   // highlight-start\n   *   reducerPath: 'apiTwo',\n   *   // highlight-end\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (builder) => ({\n   *     // ...endpoints\n   *   }),\n   * });\n   * ```\n   */\n  reducerPath?: ReducerPath;\n  /**\n   * Accepts a custom function if you have a need to change the creation of cache keys for any reason.\n   */\n  serializeQueryArgs?: SerializeQueryArgs<unknown>;\n  /**\n   * Endpoints are a set of operations that you want to perform against your server. You define them as an object using the builder syntax. There are three endpoint types: [`query`](../../rtk-query/usage/queries), [`infiniteQuery`](../../rtk-query/usage/infinite-queries) and [`mutation`](../../rtk-query/usage/mutations).\n   */\n  endpoints(build: EndpointBuilder<BaseQuery, TagTypes, ReducerPath>): Definitions;\n  /**\n   * Defaults to `60` _(this value is in seconds)_. This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\n   *\n   * ```ts\n   * // codeblock-meta title=\"keepUnusedDataFor example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       // highlight-start\n   *       keepUnusedDataFor: 5\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  keepUnusedDataFor?: number;\n  /**\n   * Defaults to `false`. This setting allows you to control whether if a cached result is already available RTK Query will only serve a cached result, or if it should `refetch` when set to `true` or if an adequate amount of time has passed since the last successful query result.\n   * - `false` - Will not cause a query to be performed _unless_ it does not exist yet.\n   * - `true` - Will always refetch when a new subscriber to a query is added. Behaves the same as calling the `refetch` callback or passing `forceRefetch: true` in the action creator.\n   * - `number` - **Value is in seconds**. If a number is provided and there is an existing query in the cache, it will compare the current time vs the last fulfilled timestamp, and only refetch if enough time has elapsed.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   */\n  refetchOnMountOrArgChange?: boolean | number;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnFocus?: boolean;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnReconnect?: boolean;\n  /**\n   * Defaults to `'delayed'`. This setting allows you to control when tags are invalidated after a mutation.\n   *\n   * - `'immediately'`: Queries are invalidated instantly after the mutation finished, even if they are running.\n   *   If the query provides tags that were invalidated while it ran, it won't be re-fetched.\n   * - `'delayed'`: Invalidation only happens after all queries and mutations are settled.\n   *   This ensures that queries are always invalidated correctly and automatically \"batches\" invalidations of concurrent mutations.\n   *   Note that if you constantly have some queries (or mutations) running, this can delay tag invalidations indefinitely.\n   */\n  invalidationBehavior?: 'delayed' | 'immediately';\n  /**\n   * A function that is passed every dispatched action. If this returns something other than `undefined`,\n   * that return value will be used to rehydrate fulfilled & errored queries.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"next-redux-wrapper rehydration example\"\n   * import type { Action, PayloadAction } from '@reduxjs/toolkit'\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * import { HYDRATE } from 'next-redux-wrapper'\n   *\n   * type RootState = any; // normally inferred from state\n   *\n   * function isHydrateAction(action: Action): action is PayloadAction<RootState> {\n   *   return action.type === HYDRATE\n   * }\n   *\n   * export const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-start\n   *   extractRehydrationInfo(action, { reducerPath }): any {\n   *     if (isHydrateAction(action)) {\n   *       return action.payload[reducerPath]\n   *     }\n   *   },\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // omitted\n   *   }),\n   * })\n   * ```\n   */\n  extractRehydrationInfo?: (action: UnknownAction, {\n    reducerPath\n  }: {\n    reducerPath: ReducerPath;\n  }) => undefined | CombinedState<NoInfer<Definitions>, NoInfer<TagTypes>, NoInfer<ReducerPath>>;\n\n  /**\n   * A function that is called when a schema validation fails.\n   *\n   * Gets called with a `NamedSchemaError` and an object containing the endpoint name, the type of the endpoint, the argument passed to the endpoint, and the query cache key (if applicable).\n   *\n   * `NamedSchemaError` has the following properties:\n   * - `issues`: an array of issues that caused the validation to fail\n   * - `value`: the value that was passed to the schema\n   * - `schemaName`: the name of the schema that was used to validate the value (e.g. `argSchema`)\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *     }),\n   *   }),\n   *   onSchemaFailure: (error, info) => {\n   *     console.error(error, info)\n   *   },\n   * })\n   * ```\n   */\n  onSchemaFailure?: SchemaFailureHandler;\n\n  /**\n   * Convert a schema validation failure into an error shape matching base query errors.\n   *\n   * When not provided, schema failures are treated as fatal, and normal error handling such as tag invalidation will not be executed.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       responseSchema: v.object({ id: v.number(), name: v.string() }),\n   *     }),\n   *   }),\n   *   catchSchemaFailure: (error, info) => ({\n   *     status: \"CUSTOM_ERROR\",\n   *     error: error.schemaName + \" failed validation\",\n   *     data: error.issues,\n   *   }),\n   * })\n   * ```\n   */\n  catchSchemaFailure?: SchemaFailureConverter<BaseQuery>;\n\n  /**\n   * Defaults to `false`.\n   *\n   * If set to `true`, will skip schema validation for all endpoints, unless overridden by the endpoint.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta no-transpile\n   * import { createApi } from '@reduxjs/toolkit/query/react'\n   * import * as v from \"valibot\"\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   skipSchemaValidation: process.env.NODE_ENV === \"test\", // skip schema validation in tests, since we'll be mocking the response\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, { id: number }>({\n   *       query: ({ id }) => `/post/${id}`,\n   *       responseSchema: v.object({ id: v.number(), name: v.string() }),\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  skipSchemaValidation?: boolean;\n}\nexport type CreateApi<Modules extends ModuleName> = {\n  /**\n   * Creates a service to use in your application. Contains only the basic redux logic (the core module).\n   *\n   * @link https://redux-toolkit.js.org/rtk-query/api/createApi\n   */\n  <BaseQuery extends BaseQueryFn, Definitions extends EndpointDefinitions, ReducerPath extends string = 'api', TagTypes extends string = never>(options: CreateApiOptions<BaseQuery, Definitions, ReducerPath, TagTypes>): Api<BaseQuery, Definitions, ReducerPath, TagTypes, Modules>;\n};\n\n/**\n * Builds a `createApi` method based on the provided `modules`.\n *\n * @link https://redux-toolkit.js.org/rtk-query/usage/customizing-create-api\n *\n * @example\n * ```ts\n * const MyContext = React.createContext<ReactReduxContextValue | null>(null);\n * const customCreateApi = buildCreateApi(\n *   coreModule(),\n *   reactHooksModule({\n *     hooks: {\n *       useDispatch: createDispatchHook(MyContext),\n *       useSelector: createSelectorHook(MyContext),\n *       useStore: createStoreHook(MyContext)\n *     }\n *   })\n * );\n * ```\n *\n * @param modules - A variable number of modules that customize how the `createApi` method handles endpoints\n * @returns A `createApi` method using the provided `modules`.\n */\nexport function buildCreateApi<Modules extends [Module<any>, ...Module<any>[]]>(...modules: Modules): CreateApi<Modules[number]['name']> {\n  return function baseCreateApi(options) {\n    const extractRehydrationInfo = weakMapMemoize((action: UnknownAction) => options.extractRehydrationInfo?.(action, {\n      reducerPath: (options.reducerPath ?? 'api') as any\n    }));\n    const optionsWithDefaults: CreateApiOptions<any, any, any, any> = {\n      reducerPath: 'api',\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false,\n      invalidationBehavior: 'delayed',\n      ...options,\n      extractRehydrationInfo,\n      serializeQueryArgs(queryArgsApi) {\n        let finalSerializeQueryArgs = defaultSerializeQueryArgs;\n        if ('serializeQueryArgs' in queryArgsApi.endpointDefinition) {\n          const endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs!;\n          finalSerializeQueryArgs = queryArgsApi => {\n            const initialResult = endpointSQA(queryArgsApi);\n            if (typeof initialResult === 'string') {\n              // If the user function returned a string, use it as-is\n              return initialResult;\n            } else {\n              // Assume they returned an object (such as a subset of the original\n              // query args) or a primitive, and serialize it ourselves\n              return defaultSerializeQueryArgs({\n                ...queryArgsApi,\n                queryArgs: initialResult\n              });\n            }\n          };\n        } else if (options.serializeQueryArgs) {\n          finalSerializeQueryArgs = options.serializeQueryArgs;\n        }\n        return finalSerializeQueryArgs(queryArgsApi);\n      },\n      tagTypes: [...(options.tagTypes || [])]\n    };\n    const context: ApiContext<EndpointDefinitions> = {\n      endpointDefinitions: {},\n      batch(fn) {\n        // placeholder \"batch\" method to be overridden by plugins, for example with React.unstable_batchedUpdate\n        fn();\n      },\n      apiUid: nanoid(),\n      extractRehydrationInfo,\n      hasRehydrationInfo: weakMapMemoize(action => extractRehydrationInfo(action) != null)\n    };\n    const api = {\n      injectEndpoints,\n      enhanceEndpoints({\n        addTagTypes,\n        endpoints\n      }) {\n        if (addTagTypes) {\n          for (const eT of addTagTypes) {\n            if (!optionsWithDefaults.tagTypes!.includes(eT as any)) {\n              ;\n              (optionsWithDefaults.tagTypes as any[]).push(eT);\n            }\n          }\n        }\n        if (endpoints) {\n          for (const [endpointName, partialDefinition] of Object.entries(endpoints)) {\n            if (typeof partialDefinition === 'function') {\n              partialDefinition(context.endpointDefinitions[endpointName]);\n            } else {\n              Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n            }\n          }\n        }\n        return api;\n      }\n    } as Api<BaseQueryFn, {}, string, string, Modules[number]['name']>;\n    const initializedModules = modules.map(m => m.init(api as any, optionsWithDefaults as any, context));\n    function injectEndpoints(inject: Parameters<typeof api.injectEndpoints>[0]) {\n      const evaluatedEndpoints = inject.endpoints({\n        query: x => ({\n          ...x,\n          type: DefinitionType.query\n        }) as any,\n        mutation: x => ({\n          ...x,\n          type: DefinitionType.mutation\n        }) as any,\n        infiniteQuery: x => ({\n          ...x,\n          type: DefinitionType.infinitequery\n        }) as any\n      });\n      for (const [endpointName, definition] of Object.entries(evaluatedEndpoints)) {\n        if (inject.overrideExisting !== true && endpointName in context.endpointDefinitions) {\n          if (inject.overrideExisting === 'throw') {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(39) : `called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          } else if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n            console.error(`called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          }\n          continue;\n        }\n        if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n          if (isInfiniteQueryDefinition(definition)) {\n            const {\n              infiniteQueryOptions\n            } = definition;\n            const {\n              maxPages,\n              getPreviousPageParam\n            } = infiniteQueryOptions;\n            if (typeof maxPages === 'number') {\n              if (maxPages < 1) {\n                throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(40) : `maxPages for endpoint '${endpointName}' must be a number greater than 0`);\n              }\n              if (typeof getPreviousPageParam !== 'function') {\n                throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(41) : `getPreviousPageParam for endpoint '${endpointName}' must be a function if maxPages is used`);\n              }\n            }\n          }\n        }\n        context.endpointDefinitions[endpointName] = definition;\n        for (const m of initializedModules) {\n          m.injectEndpoint(endpointName, definition);\n        }\n      }\n      return api as any;\n    }\n    return api.injectEndpoints({\n      endpoints: options.endpoints as any\n    });\n  };\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { BaseQueryFn } from './baseQueryTypes';\nexport const _NEVER = /* @__PURE__ */Symbol();\nexport type NEVER = typeof _NEVER;\n\n/**\n * Creates a \"fake\" baseQuery to be used if your api *only* uses the `queryFn` definition syntax.\n * This also allows you to specify a specific error type to be shared by all your `queryFn` definitions.\n */\nexport function fakeBaseQuery<ErrorType>(): BaseQueryFn<void, NEVER, ErrorType, {}> {\n  return function () {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(33) : 'When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.');\n  };\n}","/**\n * Note: this file should import all other files for type discovery and declaration merging\n */\nimport type { ActionCreatorWithPayload, Middleware, Reducer, ThunkAction, ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport { enablePatches } from 'immer';\nimport type { Api, Module } from '../apiTypes';\nimport type { BaseQueryFn } from '../baseQueryTypes';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { AssertTagTypes, EndpointDefinitions, InfiniteQueryDefinition, MutationDefinition, QueryArgFrom, QueryArgFromAnyQuery, QueryDefinition, TagDescription } from '../endpointDefinitions';\nimport { isInfiniteQueryDefinition, isMutationDefinition, isQueryDefinition } from '../endpointDefinitions';\nimport { assertCast, safeAssign } from '../tsHelpers';\nimport type { CombinedState, MutationKeys, QueryKeys, RootState } from './apiState';\nimport type { BuildInitiateApiEndpointMutation, BuildInitiateApiEndpointQuery, MutationActionCreatorResult, QueryActionCreatorResult, InfiniteQueryActionCreatorResult, BuildInitiateApiEndpointInfiniteQuery } from './buildInitiate';\nimport { buildInitiate } from './buildInitiate';\nimport type { ReferenceCacheCollection, ReferenceCacheLifecycle, ReferenceQueryLifecycle } from './buildMiddleware';\nimport { buildMiddleware } from './buildMiddleware';\nimport type { BuildSelectorsApiEndpointInfiniteQuery, BuildSelectorsApiEndpointMutation, BuildSelectorsApiEndpointQuery } from './buildSelectors';\nimport { buildSelectors } from './buildSelectors';\nimport type { SliceActions, UpsertEntries } from './buildSlice';\nimport { buildSlice } from './buildSlice';\nimport type { AllQueryKeys, BuildThunksApiEndpointInfiniteQuery, BuildThunksApiEndpointMutation, BuildThunksApiEndpointQuery, PatchQueryDataThunk, QueryArgFromAnyQueryDefinition, UpdateQueryDataThunk, UpsertQueryDataThunk } from './buildThunks';\nimport { buildThunks } from './buildThunks';\nimport { createSelector as _createSelector } from './rtkImports';\nimport { onFocus, onFocusLost, onOffline, onOnline } from './setupListeners';\n\n/**\n * `ifOlderThan` - (default: `false` | `number`) - _number is value in seconds_\n * - If specified, it will only run the query if the difference between `new Date()` and the last `fulfilledTimeStamp` is greater than the given value\n *\n * @overloadSummary\n * `force`\n * - If `force: true`, it will ignore the `ifOlderThan` value if it is set and the query will be run even if it exists in the cache.\n */\nexport type PrefetchOptions = {\n  ifOlderThan?: false | number;\n} | {\n  force?: boolean;\n};\nexport const coreModuleName = /* @__PURE__ */Symbol();\nexport type CoreModule = typeof coreModuleName | ReferenceCacheLifecycle | ReferenceQueryLifecycle | ReferenceCacheCollection;\nexport type ThunkWithReturnValue<T> = ThunkAction<T, any, any, UnknownAction>;\nexport interface ApiModules<\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nBaseQuery extends BaseQueryFn, Definitions extends EndpointDefinitions, ReducerPath extends string, TagTypes extends string> {\n  [coreModuleName]: {\n    /**\n     * This api's reducer should be mounted at `store[api.reducerPath]`.\n     *\n     * @example\n     * ```ts\n     * configureStore({\n     *   reducer: {\n     *     [api.reducerPath]: api.reducer,\n     *   },\n     *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n     * })\n     * ```\n     */\n    reducerPath: ReducerPath;\n    /**\n     * Internal actions not part of the public API. Note: These are subject to change at any given time.\n     */\n    internalActions: InternalActions;\n    /**\n     *  A standard redux reducer that enables core functionality. Make sure it's included in your store.\n     *\n     * @example\n     * ```ts\n     * configureStore({\n     *   reducer: {\n     *     [api.reducerPath]: api.reducer,\n     *   },\n     *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n     * })\n     * ```\n     */\n    reducer: Reducer<CombinedState<Definitions, TagTypes, ReducerPath>, UnknownAction>;\n    /**\n     * This is a standard redux middleware and is responsible for things like polling, garbage collection and a handful of other things. Make sure it's included in your store.\n     *\n     * @example\n     * ```ts\n     * configureStore({\n     *   reducer: {\n     *     [api.reducerPath]: api.reducer,\n     *   },\n     *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n     * })\n     * ```\n     */\n    middleware: Middleware<{}, RootState<Definitions, string, ReducerPath>, ThunkDispatch<any, any, UnknownAction>>;\n    /**\n     * A collection of utility thunks for various situations.\n     */\n    util: {\n      /**\n       * A thunk that (if dispatched) will return a specific running query, identified\n       * by `endpointName` and `arg`.\n       * If that query is not running, dispatching the thunk will result in `undefined`.\n       *\n       * Can be used to await a specific query triggered in any way,\n       * including via hook calls or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningQueryThunk<EndpointName extends AllQueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFromAnyQueryDefinition<Definitions, EndpointName>): ThunkWithReturnValue<QueryActionCreatorResult<Definitions[EndpointName] & {\n        type: 'query';\n      }> | InfiniteQueryActionCreatorResult<Definitions[EndpointName] & {\n        type: 'infinitequery';\n      }> | undefined>;\n\n      /**\n       * A thunk that (if dispatched) will return a specific running mutation, identified\n       * by `endpointName` and `fixedCacheKey` or `requestId`.\n       * If that mutation is not running, dispatching the thunk will result in `undefined`.\n       *\n       * Can be used to await a specific mutation triggered in any way,\n       * including via hook trigger functions or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningMutationThunk<EndpointName extends MutationKeys<Definitions>>(endpointName: EndpointName, fixedCacheKeyOrRequestId: string): ThunkWithReturnValue<MutationActionCreatorResult<Definitions[EndpointName] & {\n        type: 'mutation';\n      }> | undefined>;\n\n      /**\n       * A thunk that (if dispatched) will return all running queries.\n       *\n       * Useful for SSR scenarios to await all running queries triggered in any way,\n       * including via hook calls or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningQueriesThunk(): ThunkWithReturnValue<Array<QueryActionCreatorResult<any> | InfiniteQueryActionCreatorResult<any>>>;\n\n      /**\n       * A thunk that (if dispatched) will return all running mutations.\n       *\n       * Useful for SSR scenarios to await all running mutations triggered in any way,\n       * including via hook calls or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningMutationsThunk(): ThunkWithReturnValue<Array<MutationActionCreatorResult<any>>>;\n\n      /**\n       * A Redux thunk that can be used to manually trigger pre-fetching of data.\n       *\n       * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and a set of options used to determine if the data actually should be re-fetched based on cache staleness.\n       *\n       * React Hooks users will most likely never need to use this directly, as the `usePrefetch` hook will dispatch this thunk internally as needed when you call the prefetching function supplied by the hook.\n       *\n       * @example\n       *\n       * ```ts no-transpile\n       * dispatch(api.util.prefetch('getPosts', undefined, { force: true }))\n       * ```\n       */\n      prefetch<EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFrom<Definitions[EndpointName]>, options: PrefetchOptions): ThunkAction<void, any, any, UnknownAction>;\n      /**\n       * A Redux thunk action creator that, when dispatched, creates and applies a set of JSON diff/patch objects to the current state. This immediately updates the Redux state with those changes.\n       *\n       * The thunk action creator accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and an `updateRecipe` callback function. The callback receives an Immer-wrapped `draft` of the current state, and may modify the draft to match the expected results after the mutation completes successfully.\n       *\n       * The thunk executes _synchronously_, and returns an object containing `{patches: Patch[], inversePatches: Patch[], undo: () => void}`. The `patches` and `inversePatches` are generated using Immer's [`produceWithPatches` method](https://immerjs.github.io/immer/patches).\n       *\n       * This is typically used as the first step in implementing optimistic updates. The generated `inversePatches` can be used to revert the updates by calling `dispatch(patchQueryData(endpointName, arg, inversePatches))`. Alternatively, the `undo` method can be called directly to achieve the same effect.\n       *\n       * Note that the first two arguments (`endpointName` and `arg`) are used to determine which existing cache entry to update. If no existing cache entry is found, the `updateRecipe` callback will not run.\n       *\n       * @example\n       *\n       * ```ts\n       * const patchCollection = dispatch(\n       *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\n       *     draftPosts.push({ id: 1, name: 'Teddy' })\n       *   })\n       * )\n       * ```\n       */\n      updateQueryData: UpdateQueryDataThunk<Definitions, RootState<Definitions, string, ReducerPath>>;\n\n      /**\n       * A Redux thunk action creator that, when dispatched, acts as an artificial API request to upsert a value into the cache.\n       *\n       * The thunk action creator accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and the data to upsert.\n       *\n       * If no cache entry for that cache key exists, a cache entry will be created and the data added. If a cache entry already exists, this will _overwrite_ the existing cache entry data.\n       *\n       * The thunk executes _asynchronously_, and returns a promise that resolves when the store has been updated.\n       *\n       * If dispatched while an actual request is in progress, both the upsert and request will be handled as soon as they resolve, resulting in a \"last result wins\" update behavior.\n       *\n       * @example\n       *\n       * ```ts\n       * await dispatch(\n       *   api.util.upsertQueryData('getPost', {id: 1}, {id: 1, text: \"Hello!\"})\n       * )\n       * ```\n       */\n      upsertQueryData: UpsertQueryDataThunk<Definitions, RootState<Definitions, string, ReducerPath>>;\n      /**\n       * A Redux thunk that applies a JSON diff/patch array to the cached data for a given query result. This immediately updates the Redux state with those changes.\n       *\n       * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and a JSON diff/patch array as produced by Immer's `produceWithPatches`.\n       *\n       * This is typically used as the second step in implementing optimistic updates. If a request fails, the optimistically-applied changes can be reverted by dispatching `patchQueryData` with the `inversePatches` that were generated by `updateQueryData` earlier.\n       *\n       * In cases where it is desired to simply revert the previous changes, it may be preferable to call the `undo` method returned from dispatching `updateQueryData` instead.\n       *\n       * @example\n       * ```ts\n       * const patchCollection = dispatch(\n       *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\n       *     draftPosts.push({ id: 1, name: 'Teddy' })\n       *   })\n       * )\n       *\n       * // later\n       * dispatch(\n       *   api.util.patchQueryData('getPosts', undefined, patchCollection.inversePatches)\n       * )\n       *\n       * // or\n       * patchCollection.undo()\n       * ```\n       */\n      patchQueryData: PatchQueryDataThunk<Definitions, RootState<Definitions, string, ReducerPath>>;\n\n      /**\n       * A Redux action creator that can be dispatched to manually reset the api state completely. This will immediately remove all existing cache entries, and all queries will be considered 'uninitialized'.\n       *\n       * @example\n       *\n       * ```ts\n       * dispatch(api.util.resetApiState())\n       * ```\n       */\n      resetApiState: SliceActions['resetApiState'];\n      upsertQueryEntries: UpsertEntries<Definitions>;\n\n      /**\n       * A Redux action creator that can be used to manually invalidate cache tags for [automated re-fetching](../../usage/automated-refetching.mdx).\n       *\n       * The action creator accepts one argument: the cache tags to be invalidated. It returns an action with those tags as a payload, and the corresponding `invalidateTags` action type for the api.\n       *\n       * Dispatching the result of this action creator will [invalidate](../../usage/automated-refetching.mdx#invalidating-cache-data) the given tags, causing queries to automatically re-fetch if they are subscribed to cache data that [provides](../../usage/automated-refetching.mdx#providing-cache-data) the corresponding tags.\n       *\n       * The array of tags provided to the action creator should be in one of the following formats, where `TagType` is equal to a string provided to the [`tagTypes`](../createApi.mdx#tagtypes) property of the api:\n       *\n       * - `[TagType]`\n       * - `[{ type: TagType }]`\n       * - `[{ type: TagType, id: number | string }]`\n       *\n       * @example\n       *\n       * ```ts\n       * dispatch(api.util.invalidateTags(['Post']))\n       * dispatch(api.util.invalidateTags([{ type: 'Post', id: 1 }]))\n       * dispatch(\n       *   api.util.invalidateTags([\n       *     { type: 'Post', id: 1 },\n       *     { type: 'Post', id: 'LIST' },\n       *   ])\n       * )\n       * ```\n       */\n      invalidateTags: ActionCreatorWithPayload<Array<TagDescription<TagTypes> | null | undefined>, string>;\n\n      /**\n       * A function to select all `{ endpointName, originalArgs, queryCacheKey }` combinations that would be invalidated by a specific set of tags.\n       *\n       * Can be used for mutations that want to do optimistic updates instead of invalidating a set of tags, but don't know exactly what they need to update.\n       */\n      selectInvalidatedBy: (state: RootState<Definitions, string, ReducerPath>, tags: ReadonlyArray<TagDescription<TagTypes> | null | undefined>) => Array<{\n        endpointName: string;\n        originalArgs: any;\n        queryCacheKey: string;\n      }>;\n\n      /**\n       * A function to select all arguments currently cached for a given endpoint.\n       *\n       * Can be used for mutations that want to do optimistic updates instead of invalidating a set of tags, but don't know exactly what they need to update.\n       */\n      selectCachedArgsForQuery: <QueryName extends AllQueryKeys<Definitions>>(state: RootState<Definitions, string, ReducerPath>, queryName: QueryName) => Array<QueryArgFromAnyQuery<Definitions[QueryName]>>;\n    };\n    /**\n     * Endpoints based on the input endpoints provided to `createApi`, containing `select` and `action matchers`.\n     */\n    endpoints: { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<any, any, any, any, any> ? ApiEndpointQuery<Definitions[K], Definitions> : Definitions[K] extends MutationDefinition<any, any, any, any, any> ? ApiEndpointMutation<Definitions[K], Definitions> : Definitions[K] extends InfiniteQueryDefinition<any, any, any, any, any> ? ApiEndpointInfiniteQuery<Definitions[K], Definitions> : never };\n  };\n}\nexport interface ApiEndpointQuery<\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinition extends QueryDefinition<any, any, any, any, any>,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinitions extends EndpointDefinitions> extends BuildThunksApiEndpointQuery<Definition>, BuildInitiateApiEndpointQuery<Definition>, BuildSelectorsApiEndpointQuery<Definition, Definitions> {\n  name: string;\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types: NonNullable<Definition['Types']>;\n}\nexport interface ApiEndpointInfiniteQuery<\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinition extends InfiniteQueryDefinition<any, any, any, any, any>,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinitions extends EndpointDefinitions> extends BuildThunksApiEndpointInfiniteQuery<Definition>, BuildInitiateApiEndpointInfiniteQuery<Definition>, BuildSelectorsApiEndpointInfiniteQuery<Definition, Definitions> {\n  name: string;\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types: NonNullable<Definition['Types']>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface ApiEndpointMutation<\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinition extends MutationDefinition<any, any, any, any, any>,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinitions extends EndpointDefinitions> extends BuildThunksApiEndpointMutation<Definition>, BuildInitiateApiEndpointMutation<Definition>, BuildSelectorsApiEndpointMutation<Definition, Definitions> {\n  name: string;\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types: NonNullable<Definition['Types']>;\n}\nexport type ListenerActions = {\n  /**\n   * Will cause the RTK Query middleware to trigger any refetchOnReconnect-related behavior\n   * @link https://redux-toolkit.js.org/rtk-query/api/setupListeners\n   */\n  onOnline: typeof onOnline;\n  onOffline: typeof onOffline;\n  /**\n   * Will cause the RTK Query middleware to trigger any refetchOnFocus-related behavior\n   * @link https://redux-toolkit.js.org/rtk-query/api/setupListeners\n   */\n  onFocus: typeof onFocus;\n  onFocusLost: typeof onFocusLost;\n};\nexport type InternalActions = SliceActions & ListenerActions;\nexport interface CoreModuleOptions {\n  /**\n   * A selector creator (usually from `reselect`, or matching the same signature)\n   */\n  createSelector?: typeof _createSelector;\n}\n\n/**\n * Creates a module containing the basic redux logic for use with `buildCreateApi`.\n *\n * @example\n * ```ts\n * const createBaseApi = buildCreateApi(coreModule());\n * ```\n */\nexport const coreModule = ({\n  createSelector = _createSelector\n}: CoreModuleOptions = {}): Module<CoreModule> => ({\n  name: coreModuleName,\n  init(api, {\n    baseQuery,\n    tagTypes,\n    reducerPath,\n    serializeQueryArgs,\n    keepUnusedDataFor,\n    refetchOnMountOrArgChange,\n    refetchOnFocus,\n    refetchOnReconnect,\n    invalidationBehavior,\n    onSchemaFailure,\n    catchSchemaFailure,\n    skipSchemaValidation\n  }, context) {\n    enablePatches();\n    assertCast<InternalSerializeQueryArgs>(serializeQueryArgs);\n    const assertTagType: AssertTagTypes = tag => {\n      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n        if (!tagTypes.includes(tag.type as any)) {\n          console.error(`Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`);\n        }\n      }\n      return tag;\n    };\n    Object.assign(api, {\n      reducerPath,\n      endpoints: {},\n      internalActions: {\n        onOnline,\n        onOffline,\n        onFocus,\n        onFocusLost\n      },\n      util: {}\n    });\n    const selectors = buildSelectors({\n      serializeQueryArgs: serializeQueryArgs as any,\n      reducerPath,\n      createSelector\n    });\n    const {\n      selectInvalidatedBy,\n      selectCachedArgsForQuery,\n      buildQuerySelector,\n      buildInfiniteQuerySelector,\n      buildMutationSelector\n    } = selectors;\n    safeAssign(api.util, {\n      selectInvalidatedBy,\n      selectCachedArgsForQuery\n    });\n    const {\n      queryThunk,\n      infiniteQueryThunk,\n      mutationThunk,\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      buildMatchThunkActions\n    } = buildThunks({\n      baseQuery,\n      reducerPath,\n      context,\n      api,\n      serializeQueryArgs,\n      assertTagType,\n      selectors,\n      onSchemaFailure,\n      catchSchemaFailure,\n      skipSchemaValidation\n    });\n    const {\n      reducer,\n      actions: sliceActions\n    } = buildSlice({\n      context,\n      queryThunk,\n      infiniteQueryThunk,\n      mutationThunk,\n      serializeQueryArgs,\n      reducerPath,\n      assertTagType,\n      config: {\n        refetchOnFocus,\n        refetchOnReconnect,\n        refetchOnMountOrArgChange,\n        keepUnusedDataFor,\n        reducerPath,\n        invalidationBehavior\n      }\n    });\n    safeAssign(api.util, {\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      resetApiState: sliceActions.resetApiState,\n      upsertQueryEntries: sliceActions.cacheEntriesUpserted as any\n    });\n    safeAssign(api.internalActions, sliceActions);\n    const {\n      middleware,\n      actions: middlewareActions\n    } = buildMiddleware({\n      reducerPath,\n      context,\n      queryThunk,\n      mutationThunk,\n      infiniteQueryThunk,\n      api,\n      assertTagType,\n      selectors\n    });\n    safeAssign(api.util, middlewareActions);\n    safeAssign(api, {\n      reducer: reducer as any,\n      middleware\n    });\n    const {\n      buildInitiateQuery,\n      buildInitiateInfiniteQuery,\n      buildInitiateMutation,\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueriesThunk,\n      getRunningQueryThunk\n    } = buildInitiate({\n      queryThunk,\n      mutationThunk,\n      infiniteQueryThunk,\n      api,\n      serializeQueryArgs: serializeQueryArgs as any,\n      context\n    });\n    safeAssign(api.util, {\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueryThunk,\n      getRunningQueriesThunk\n    });\n    return {\n      name: coreModuleName,\n      injectEndpoint(endpointName, definition) {\n        const anyApi = api as any as Api<any, Record<string, any>, string, string, CoreModule>;\n        const endpoint = anyApi.endpoints[endpointName] ??= {} as any;\n        if (isQueryDefinition(definition)) {\n          safeAssign(endpoint, {\n            name: endpointName,\n            select: buildQuerySelector(endpointName, definition),\n            initiate: buildInitiateQuery(endpointName, definition)\n          }, buildMatchThunkActions(queryThunk, endpointName));\n        }\n        if (isMutationDefinition(definition)) {\n          safeAssign(endpoint, {\n            name: endpointName,\n            select: buildMutationSelector(),\n            initiate: buildInitiateMutation(endpointName)\n          }, buildMatchThunkActions(mutationThunk, endpointName));\n        }\n        if (isInfiniteQueryDefinition(definition)) {\n          safeAssign(endpoint, {\n            name: endpointName,\n            select: buildInfiniteQuerySelector(endpointName, definition),\n            initiate: buildInitiateInfiniteQuery(endpointName, definition)\n          }, buildMatchThunkActions(queryThunk, endpointName));\n        }\n      }\n    };\n  }\n});","export type Id<T> = { [K in keyof T]: T[K] } & {};\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\nexport type Override<T1, T2> = T2 extends any ? Omit<T1, keyof T2> & T2 : never;\nexport function assertCast<T>(v: any): asserts v is T {}\nexport function safeAssign<T extends object>(target: T, ...args: Array<Partial<NoInfer<T>>>): T {\n  return Object.assign(target, ...args);\n}\n\n/**\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\n */\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\nexport type NonOptionalKeys<T> = { [K in keyof T]-?: undefined extends T[K] ? never : K }[keyof T];\nexport type HasRequiredProps<T, True, False> = NonOptionalKeys<T> extends never ? False : True;\nexport type OptionalIfAllPropsOptional<T> = HasRequiredProps<T, T, T | never>;\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\nexport type NonUndefined<T> = T extends undefined ? never : T;\nexport type UnwrapPromise<T> = T extends PromiseLike<infer V> ? V : T;\nexport type MaybePromise<T> = T | PromiseLike<T>;\nexport type OmitFromUnion<T, K extends keyof T> = T extends any ? Omit<T, K> : never;\nexport type IsAny<T, True, False = never> = true | false extends (T extends never ? true : false) ? True : False;\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>;","import type { InternalHandlerBuilder, SubscriptionSelectors } from './types';\nimport type { SubscriptionState } from '../apiState';\nimport { produceWithPatches } from 'immer';\nimport type { Action } from '@reduxjs/toolkit';\nimport { countObjectKeys } from '../../utils/countObjectKeys';\nexport const buildBatchedActionsHandler: InternalHandlerBuilder<[actionShouldContinue: boolean, returnValue: SubscriptionSelectors | boolean]> = ({\n  api,\n  queryThunk,\n  internalState\n}) => {\n  const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;\n  let previousSubscriptions: SubscriptionState = null as unknown as SubscriptionState;\n  let updateSyncTimer: ReturnType<typeof window.setTimeout> | null = null;\n  const {\n    updateSubscriptionOptions,\n    unsubscribeQueryResult\n  } = api.internalActions;\n\n  // Actually intentionally mutate the subscriptions state used in the middleware\n  // This is done to speed up perf when loading many components\n  const actuallyMutateSubscriptions = (mutableState: SubscriptionState, action: Action) => {\n    if (updateSubscriptionOptions.match(action)) {\n      const {\n        queryCacheKey,\n        requestId,\n        options\n      } = action.payload;\n      if (mutableState?.[queryCacheKey]?.[requestId]) {\n        mutableState[queryCacheKey]![requestId] = options;\n      }\n      return true;\n    }\n    if (unsubscribeQueryResult.match(action)) {\n      const {\n        queryCacheKey,\n        requestId\n      } = action.payload;\n      if (mutableState[queryCacheKey]) {\n        delete mutableState[queryCacheKey]![requestId];\n      }\n      return true;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) {\n      delete mutableState[action.payload.queryCacheKey];\n      return true;\n    }\n    if (queryThunk.pending.match(action)) {\n      const {\n        meta: {\n          arg,\n          requestId\n        }\n      } = action;\n      const substate = mutableState[arg.queryCacheKey] ??= {};\n      substate[`${requestId}_running`] = {};\n      if (arg.subscribe) {\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n      }\n      return true;\n    }\n    let mutated = false;\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {\n      const state = mutableState[action.meta.arg.queryCacheKey] || {};\n      const key = `${action.meta.requestId}_running`;\n      mutated ||= !!state[key];\n      delete state[key];\n    }\n    if (queryThunk.rejected.match(action)) {\n      const {\n        meta: {\n          condition,\n          arg,\n          requestId\n        }\n      } = action;\n      if (condition && arg.subscribe) {\n        const substate = mutableState[arg.queryCacheKey] ??= {};\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n        mutated = true;\n      }\n    }\n    return mutated;\n  };\n  const getSubscriptions = () => internalState.currentSubscriptions;\n  const getSubscriptionCount = (queryCacheKey: string) => {\n    const subscriptions = getSubscriptions();\n    const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};\n    return countObjectKeys(subscriptionsForQueryArg);\n  };\n  const isRequestSubscribed = (queryCacheKey: string, requestId: string) => {\n    const subscriptions = getSubscriptions();\n    return !!subscriptions?.[queryCacheKey]?.[requestId];\n  };\n  const subscriptionSelectors: SubscriptionSelectors = {\n    getSubscriptions,\n    getSubscriptionCount,\n    isRequestSubscribed\n  };\n  return (action, mwApi): [actionShouldContinue: boolean, result: SubscriptionSelectors | boolean] => {\n    if (!previousSubscriptions) {\n      // Initialize it the first time this handler runs\n      previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n    }\n    if (api.util.resetApiState.match(action)) {\n      previousSubscriptions = internalState.currentSubscriptions = {};\n      updateSyncTimer = null;\n      return [true, false];\n    }\n\n    // Intercept requests by hooks to see if they're subscribed\n    // We return the internal state reference so that hooks\n    // can do their own checks to see if they're still active.\n    // It's stupid and hacky, but it does cut down on some dispatch calls.\n    if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {\n      return [false, subscriptionSelectors];\n    }\n\n    // Update subscription data based on this action\n    const didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n    let actionShouldContinue = true;\n    if (didMutate) {\n      if (!updateSyncTimer) {\n        // We only use the subscription state for the Redux DevTools at this point,\n        // as the real data is kept here in the middleware.\n        // Given that, we can throttle synchronizing this state significantly to\n        // save on overall perf.\n        // In 1.9, it was updated in a microtask, but now we do it at most every 500ms.\n        updateSyncTimer = setTimeout(() => {\n          // Deep clone the current subscription data\n          const newSubscriptions: SubscriptionState = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n          // Figure out a smaller diff between original and current\n          const [, patches] = produceWithPatches(previousSubscriptions, () => newSubscriptions);\n\n          // Sync the store state for visibility\n          mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n          // Save the cloned state for later reference\n          previousSubscriptions = newSubscriptions;\n          updateSyncTimer = null;\n        }, 500);\n      }\n      const isSubscriptionSliceAction = typeof action.type == 'string' && !!action.type.startsWith(subscriptionsPrefix);\n      const isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n      actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n    }\n    return [actionShouldContinue, false];\n  };\n};","import type { QueryDefinition } from '../../endpointDefinitions';\nimport type { ConfigState, QueryCacheKey } from '../apiState';\nimport { isAnyOf } from '../rtkImports';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, QueryStateMeta, SubMiddlewareApi, TimeoutId } from './types';\nexport type ReferenceCacheCollection = never;\nfunction isObjectEmpty(obj: Record<any, any>) {\n  // Apparently a for..in loop is faster than `Object.keys()` here:\n  // https://stackoverflow.com/a/59787784/62937\n  for (const k in obj) {\n    // If there is at least one key, it's not empty\n    return false;\n  }\n  return true;\n}\nexport type CacheCollectionQueryExtraOptions = {\n  /**\n   * Overrides the api-wide definition of `keepUnusedDataFor` for this endpoint only. _(This value is in seconds.)_\n   *\n   * This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\n   */\n  keepUnusedDataFor?: number;\n};\n\n// Per https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value , browsers store\n// `setTimeout()` timer values in a 32-bit int. If we pass a value in that's larger than that,\n// it wraps and ends up executing immediately.\n// Our `keepUnusedDataFor` values are in seconds, so adjust the numbers here accordingly.\nexport const THIRTY_TWO_BIT_MAX_INT = 2_147_483_647;\nexport const THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2_147_483_647 / 1_000 - 1;\nexport const buildCacheCollectionHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  api,\n  queryThunk,\n  context,\n  internalState,\n  selectors: {\n    selectQueryEntry,\n    selectConfig\n  }\n}) => {\n  const {\n    removeQueryResult,\n    unsubscribeQueryResult,\n    cacheEntriesUpserted\n  } = api.internalActions;\n  const canTriggerUnsubscribe = isAnyOf(unsubscribeQueryResult.match, queryThunk.fulfilled, queryThunk.rejected, cacheEntriesUpserted.match);\n  function anySubscriptionsRemainingForKey(queryCacheKey: string) {\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    return !!subscriptions && !isObjectEmpty(subscriptions);\n  }\n  const currentRemovalTimeouts: QueryStateMeta<TimeoutId> = {};\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi, internalState) => {\n    const state = mwApi.getState();\n    const config = selectConfig(state);\n    if (canTriggerUnsubscribe(action)) {\n      let queryCacheKeys: QueryCacheKey[];\n      if (cacheEntriesUpserted.match(action)) {\n        queryCacheKeys = action.payload.map(entry => entry.queryDescription.queryCacheKey);\n      } else {\n        const {\n          queryCacheKey\n        } = unsubscribeQueryResult.match(action) ? action.payload : action.meta.arg;\n        queryCacheKeys = [queryCacheKey];\n      }\n      handleUnsubscribeMany(queryCacheKeys, mwApi, config);\n    }\n    if (api.util.resetApiState.match(action)) {\n      for (const [key, timeout] of Object.entries(currentRemovalTimeouts)) {\n        if (timeout) clearTimeout(timeout);\n        delete currentRemovalTimeouts[key];\n      }\n    }\n    if (context.hasRehydrationInfo(action)) {\n      const {\n        queries\n      } = context.extractRehydrationInfo(action)!;\n      // Gotcha:\n      // If rehydrating before the endpoint has been injected,the global `keepUnusedDataFor`\n      // will be used instead of the endpoint-specific one.\n      handleUnsubscribeMany(Object.keys(queries) as QueryCacheKey[], mwApi, config);\n    }\n  };\n  function handleUnsubscribeMany(cacheKeys: QueryCacheKey[], api: SubMiddlewareApi, config: ConfigState<string>) {\n    const state = api.getState();\n    for (const queryCacheKey of cacheKeys) {\n      const entry = selectQueryEntry(state, queryCacheKey);\n      handleUnsubscribe(queryCacheKey, entry?.endpointName, api, config);\n    }\n  }\n  function handleUnsubscribe(queryCacheKey: QueryCacheKey, endpointName: string | undefined, api: SubMiddlewareApi, config: ConfigState<string>) {\n    const endpointDefinition = context.endpointDefinitions[endpointName!] as QueryDefinition<any, any, any, any>;\n    const keepUnusedDataFor = endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor;\n    if (keepUnusedDataFor === Infinity) {\n      // Hey, user said keep this forever!\n      return;\n    }\n    // Prevent `setTimeout` timers from overflowing a 32-bit internal int, by\n    // clamping the max value to be at most 1000ms less than the 32-bit max.\n    // Look, a 24.8-day keepalive ought to be enough for anybody, right? :)\n    // Also avoid negative values too.\n    const finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n    if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n      const currentTimeout = currentRemovalTimeouts[queryCacheKey];\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n          api.dispatch(removeQueryResult({\n            queryCacheKey\n          }));\n        }\n        delete currentRemovalTimeouts![queryCacheKey];\n      }, finalKeepUnusedDataFor * 1000);\n    }\n  }\n  return handler;\n};","import type { ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport type { BaseQueryFn, BaseQueryMeta, BaseQueryResult } from '../../baseQueryTypes';\nimport type { BaseEndpointDefinition } from '../../endpointDefinitions';\nimport { DefinitionType, isAnyQueryDefinition } from '../../endpointDefinitions';\nimport type { QueryCacheKey, RootState } from '../apiState';\nimport type { MutationResultSelectorResult, QueryResultSelectorResult } from '../buildSelectors';\nimport { getMutationCacheKey } from '../buildSlice';\nimport type { PatchCollection, Recipe } from '../buildThunks';\nimport { isAsyncThunkAction, isFulfilled } from '../rtkImports';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, PromiseWithKnownReason, SubMiddlewareApi } from './types';\nexport type ReferenceCacheLifecycle = never;\nexport interface QueryBaseLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> extends LifecycleApi<ReducerPath> {\n  /**\n   * Gets the current value of this cache entry.\n   */\n  getCacheEntry(): QueryResultSelectorResult<{\n    type: DefinitionType.query;\n  } & BaseEndpointDefinition<QueryArg, BaseQuery, ResultType, BaseQueryResult<BaseQuery>>>;\n  /**\n   * Updates the current cache entry value.\n   * For documentation see `api.util.updateQueryData`.\n   */\n  updateCachedData(updateRecipe: Recipe<ResultType>): PatchCollection;\n}\nexport type MutationBaseLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> = LifecycleApi<ReducerPath> & {\n  /**\n   * Gets the current value of this cache entry.\n   */\n  getCacheEntry(): MutationResultSelectorResult<{\n    type: DefinitionType.mutation;\n  } & BaseEndpointDefinition<QueryArg, BaseQuery, ResultType, BaseQueryResult<BaseQuery>>>;\n};\ntype LifecycleApi<ReducerPath extends string = string> = {\n  /**\n   * The dispatch method for the store\n   */\n  dispatch: ThunkDispatch<any, any, UnknownAction>;\n  /**\n   * A method to get the current state\n   */\n  getState(): RootState<any, any, ReducerPath>;\n  /**\n   * `extra` as provided as `thunk.extraArgument` to the `configureStore` `getDefaultMiddleware` option.\n   */\n  extra: unknown;\n  /**\n   * A unique ID generated for the mutation\n   */\n  requestId: string;\n};\ntype CacheLifecyclePromises<ResultType = unknown, MetaType = unknown> = {\n  /**\n   * Promise that will resolve with the first value for this cache key.\n   * This allows you to `await` until an actual value is in cache.\n   *\n   * If the cache entry is removed from the cache before any value has ever\n   * been resolved, this Promise will reject with\n   * `new Error('Promise never resolved before cacheEntryRemoved.')`\n   * to prevent memory leaks.\n   * You can just re-throw that error (or not handle it at all) -\n   * it will be caught outside of `cacheEntryAdded`.\n   *\n   * If you don't interact with this promise, it will not throw.\n   */\n  cacheDataLoaded: PromiseWithKnownReason<{\n    /**\n     * The (transformed) query result.\n     */\n    data: ResultType;\n    /**\n     * The `meta` returned by the `baseQuery`\n     */\n    meta: MetaType;\n  }, typeof neverResolvedError>;\n  /**\n   * Promise that allows you to wait for the point in time when the cache entry\n   * has been removed from the cache, by not being used/subscribed to any more\n   * in the application for too long or by dispatching `api.util.resetApiState`.\n   */\n  cacheEntryRemoved: Promise<void>;\n};\nexport interface QueryCacheLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>, CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>> {}\nexport type MutationCacheLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> = MutationBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath> & CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>>;\nexport type CacheLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  onCacheEntryAdded?(arg: QueryArg, api: QueryCacheLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nexport type CacheLifecycleInfiniteQueryExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = CacheLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>;\nexport type CacheLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  onCacheEntryAdded?(arg: QueryArg, api: MutationCacheLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nconst neverResolvedError = new Error('Promise never resolved before cacheEntryRemoved.') as Error & {\n  message: 'Promise never resolved before cacheEntryRemoved.';\n};\nexport const buildCacheLifecycleHandler: InternalHandlerBuilder = ({\n  api,\n  reducerPath,\n  context,\n  queryThunk,\n  mutationThunk,\n  internalState,\n  selectors: {\n    selectQueryEntry,\n    selectApiState\n  }\n}) => {\n  const isQueryThunk = isAsyncThunkAction(queryThunk);\n  const isMutationThunk = isAsyncThunkAction(mutationThunk);\n  const isFulfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  type CacheLifecycle = {\n    valueResolved?(value: {\n      data: unknown;\n      meta: unknown;\n    }): unknown;\n    cacheEntryRemoved(): void;\n  };\n  const lifecycleMap: Record<string, CacheLifecycle> = {};\n  function resolveLifecycleEntry(cacheKey: string, data: unknown, meta: unknown) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle?.valueResolved) {\n      lifecycle.valueResolved({\n        data,\n        meta\n      });\n      delete lifecycle.valueResolved;\n    }\n  }\n  function removeLifecycleEntry(cacheKey: string) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle) {\n      delete lifecycleMap[cacheKey];\n      lifecycle.cacheEntryRemoved();\n    }\n  }\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi, stateBefore) => {\n    const cacheKey = getCacheKey(action) as QueryCacheKey;\n    function checkForNewCacheKey(endpointName: string, cacheKey: QueryCacheKey, requestId: string, originalArgs: unknown) {\n      const oldEntry = selectQueryEntry(stateBefore, cacheKey);\n      const newEntry = selectQueryEntry(mwApi.getState(), cacheKey);\n      if (!oldEntry && newEntry) {\n        handleNewKey(endpointName, originalArgs, cacheKey, mwApi, requestId);\n      }\n    }\n    if (queryThunk.pending.match(action)) {\n      checkForNewCacheKey(action.meta.arg.endpointName, cacheKey, action.meta.requestId, action.meta.arg.originalArgs);\n    } else if (api.internalActions.cacheEntriesUpserted.match(action)) {\n      for (const {\n        queryDescription,\n        value\n      } of action.payload) {\n        const {\n          endpointName,\n          originalArgs,\n          queryCacheKey\n        } = queryDescription;\n        checkForNewCacheKey(endpointName, queryCacheKey, action.meta.requestId, originalArgs);\n        resolveLifecycleEntry(queryCacheKey, value, {});\n      }\n    } else if (mutationThunk.pending.match(action)) {\n      const state = mwApi.getState()[reducerPath].mutations[cacheKey];\n      if (state) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (isFulfilledThunk(action)) {\n      resolveLifecycleEntry(cacheKey, action.payload, action.meta.baseQueryMeta);\n    } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n      removeLifecycleEntry(cacheKey);\n    } else if (api.util.resetApiState.match(action)) {\n      for (const cacheKey of Object.keys(lifecycleMap)) {\n        removeLifecycleEntry(cacheKey);\n      }\n    }\n  };\n  function getCacheKey(action: any) {\n    if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n    if (isMutationThunk(action)) {\n      return action.meta.arg.fixedCacheKey ?? action.meta.requestId;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n    if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n    return '';\n  }\n  function handleNewKey(endpointName: string, originalArgs: any, queryCacheKey: string, mwApi: SubMiddlewareApi, requestId: string) {\n    const endpointDefinition = context.endpointDefinitions[endpointName];\n    const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded;\n    if (!onCacheEntryAdded) return;\n    const lifecycle = {} as CacheLifecycle;\n    const cacheEntryRemoved = new Promise<void>(resolve => {\n      lifecycle.cacheEntryRemoved = resolve;\n    });\n    const cacheDataLoaded: PromiseWithKnownReason<{\n      data: unknown;\n      meta: unknown;\n    }, typeof neverResolvedError> = Promise.race([new Promise<{\n      data: unknown;\n      meta: unknown;\n    }>(resolve => {\n      lifecycle.valueResolved = resolve;\n    }), cacheEntryRemoved.then(() => {\n      throw neverResolvedError;\n    })]);\n    // prevent uncaught promise rejections from happening.\n    // if the original promise is used in any way, that will create a new promise that will throw again\n    cacheDataLoaded.catch(() => {});\n    lifecycleMap[queryCacheKey] = lifecycle;\n    const selector = (api.endpoints[endpointName] as any).select(isAnyQueryDefinition(endpointDefinition) ? originalArgs : queryCacheKey);\n    const extra = mwApi.dispatch((_, __, extra) => extra);\n    const lifecycleApi = {\n      ...mwApi,\n      getCacheEntry: () => selector(mwApi.getState()),\n      requestId,\n      extra,\n      updateCachedData: (isAnyQueryDefinition(endpointDefinition) ? (updateRecipe: Recipe<any>) => mwApi.dispatch(api.util.updateQueryData(endpointName as never, originalArgs as never, updateRecipe)) : undefined) as any,\n      cacheDataLoaded,\n      cacheEntryRemoved\n    };\n    const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi as any);\n    // if a `neverResolvedError` was thrown, but not handled in the running handler, do not let it leak out further\n    Promise.resolve(runningHandler).catch(e => {\n      if (e === neverResolvedError) return;\n      throw e;\n    });\n  }\n  return handler;\n};","import type { InternalHandlerBuilder } from './types';\nexport const buildDevCheckHandler: InternalHandlerBuilder = ({\n  api,\n  context: {\n    apiUid\n  },\n  reducerPath\n}) => {\n  return (action, mwApi) => {\n    if (api.util.resetApiState.match(action)) {\n      // dispatch after api reset\n      mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n    }\n    if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n      if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && mwApi.getState()[reducerPath]?.config?.middlewareRegistered === 'conflict') {\n        console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\nYou can only have one api per reducer path, this will lead to crashes in various situations!${reducerPath === 'api' ? `\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!` : ''}`);\n      }\n    }\n  };\n};","import { isAnyOf, isFulfilled, isRejected, isRejectedWithValue } from '../rtkImports';\nimport type { EndpointDefinitions, FullTagDescription } from '../../endpointDefinitions';\nimport { calculateProvidedBy } from '../../endpointDefinitions';\nimport type { CombinedState, QueryCacheKey } from '../apiState';\nimport { QueryStatus } from '../apiState';\nimport { calculateProvidedByThunk } from '../buildThunks';\nimport type { SubMiddlewareApi, InternalHandlerBuilder, ApiMiddlewareInternalHandler, InternalMiddlewareState } from './types';\nimport { countObjectKeys } from '../../utils/countObjectKeys';\nexport const buildInvalidationByTagsHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  context,\n  context: {\n    endpointDefinitions\n  },\n  mutationThunk,\n  queryThunk,\n  api,\n  assertTagType,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const isThunkActionWithTags = isAnyOf(isFulfilled(mutationThunk), isRejectedWithValue(mutationThunk));\n  const isQueryEnd = isAnyOf(isFulfilled(mutationThunk, queryThunk), isRejected(mutationThunk, queryThunk));\n  let pendingTagInvalidations: FullTagDescription<string>[] = [];\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (isThunkActionWithTags(action)) {\n      invalidateTags(calculateProvidedByThunk(action, 'invalidatesTags', endpointDefinitions, assertTagType), mwApi);\n    } else if (isQueryEnd(action)) {\n      invalidateTags([], mwApi);\n    } else if (api.util.invalidateTags.match(action)) {\n      invalidateTags(calculateProvidedBy(action.payload, undefined, undefined, undefined, undefined, assertTagType), mwApi);\n    }\n  };\n  function hasPendingRequests(state: CombinedState<EndpointDefinitions, string, string>) {\n    const {\n      queries,\n      mutations\n    } = state;\n    for (const cacheRecord of [queries, mutations]) {\n      for (const key in cacheRecord) {\n        if (cacheRecord[key]?.status === QueryStatus.pending) return true;\n      }\n    }\n    return false;\n  }\n  function invalidateTags(newTags: readonly FullTagDescription<string>[], mwApi: SubMiddlewareApi) {\n    const rootState = mwApi.getState();\n    const state = rootState[reducerPath];\n    pendingTagInvalidations.push(...newTags);\n    if (state.config.invalidationBehavior === 'delayed' && hasPendingRequests(state)) {\n      return;\n    }\n    const tags = pendingTagInvalidations;\n    pendingTagInvalidations = [];\n    if (tags.length === 0) return;\n    const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n    context.batch(() => {\n      const valuesArray = Array.from(toInvalidate.values());\n      for (const {\n        queryCacheKey\n      } of valuesArray) {\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptionSubState = internalState.currentSubscriptions[queryCacheKey] ?? {};\n        if (querySubState) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            mwApi.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey as QueryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            mwApi.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};","import type { QueryCacheKey, QuerySubstateIdentifier, Subscribers } from '../apiState';\nimport { QueryStatus } from '../apiState';\nimport type { QueryStateMeta, SubMiddlewareApi, TimeoutId, InternalHandlerBuilder, ApiMiddlewareInternalHandler, InternalMiddlewareState } from './types';\nexport const buildPollingHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  queryThunk,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const currentPolls: QueryStateMeta<{\n    nextPollTimestamp: number;\n    timeout?: TimeoutId;\n    pollingInterval: number;\n  }> = {};\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n      updatePollingInterval(action.payload, mwApi);\n    }\n    if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n      updatePollingInterval(action.meta.arg, mwApi);\n    }\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n      startNextPoll(action.meta.arg, mwApi);\n    }\n    if (api.util.resetApiState.match(action)) {\n      clearPolls();\n    }\n  };\n  function getCacheEntrySubscriptions(queryCacheKey: QueryCacheKey, api: SubMiddlewareApi) {\n    const state = api.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) return;\n    return subscriptions;\n  }\n  function startNextPoll({\n    queryCacheKey\n  }: QuerySubstateIdentifier, api: SubMiddlewareApi) {\n    const state = api.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) return;\n    const {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) return;\n    const currentPoll = currentPolls[queryCacheKey];\n    if (currentPoll?.timeout) {\n      clearTimeout(currentPoll.timeout);\n      currentPoll.timeout = undefined;\n    }\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    currentPolls[queryCacheKey] = {\n      nextPollTimestamp,\n      pollingInterval: lowestPollingInterval,\n      timeout: setTimeout(() => {\n        if (state.config.focused || !skipPollingIfUnfocused) {\n          api.dispatch(refetchQuery(querySubState));\n        }\n        startNextPoll({\n          queryCacheKey\n        }, api);\n      }, lowestPollingInterval)\n    };\n  }\n  function updatePollingInterval({\n    queryCacheKey\n  }: QuerySubstateIdentifier, api: SubMiddlewareApi) {\n    const state = api.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\n      return;\n    }\n    const {\n      lowestPollingInterval\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) {\n      cleanupPollForKey(queryCacheKey);\n      return;\n    }\n    const currentPoll = currentPolls[queryCacheKey];\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n      startNextPoll({\n        queryCacheKey\n      }, api);\n    }\n  }\n  function cleanupPollForKey(key: string) {\n    const existingPoll = currentPolls[key];\n    if (existingPoll?.timeout) {\n      clearTimeout(existingPoll.timeout);\n    }\n    delete currentPolls[key];\n  }\n  function clearPolls() {\n    for (const key of Object.keys(currentPolls)) {\n      cleanupPollForKey(key);\n    }\n  }\n  function findLowestPollingInterval(subscribers: Subscribers = {}) {\n    let skipPollingIfUnfocused: boolean | undefined = false;\n    let lowestPollingInterval = Number.POSITIVE_INFINITY;\n    for (let key in subscribers) {\n      if (!!subscribers[key].pollingInterval) {\n        lowestPollingInterval = Math.min(subscribers[key].pollingInterval!, lowestPollingInterval);\n        skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;\n      }\n    }\n    return {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    };\n  }\n  return handler;\n};","import type { BaseQueryError, BaseQueryFn, BaseQueryMeta } from '../../baseQueryTypes';\nimport { DefinitionType, isAnyQueryDefinition } from '../../endpointDefinitions';\nimport type { Recipe } from '../buildThunks';\nimport { isFulfilled, isPending, isRejected } from '../rtkImports';\nimport type { MutationBaseLifecycleApi, QueryBaseLifecycleApi } from './cacheLifecycle';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, PromiseConstructorWithKnownReason, PromiseWithKnownReason } from './types';\nexport type ReferenceQueryLifecycle = never;\ntype QueryLifecyclePromises<ResultType, BaseQuery extends BaseQueryFn> = {\n  /**\n   * Promise that will resolve with the (transformed) query result.\n   *\n   * If the query fails, this promise will reject with the error.\n   *\n   * This allows you to `await` for the query to finish.\n   *\n   * If you don't interact with this promise, it will not throw.\n   */\n  queryFulfilled: PromiseWithKnownReason<{\n    /**\n     * The (transformed) query result.\n     */\n    data: ResultType;\n    /**\n     * The `meta` returned by the `baseQuery`\n     */\n    meta: BaseQueryMeta<BaseQuery>;\n  }, QueryFulfilledRejectionReason<BaseQuery>>;\n};\ntype QueryFulfilledRejectionReason<BaseQuery extends BaseQueryFn> = {\n  error: BaseQueryError<BaseQuery>;\n  /**\n   * If this is `false`, that means this error was returned from the `baseQuery` or `queryFn` in a controlled manner.\n   */\n  isUnhandledError: false;\n  /**\n   * The `meta` returned by the `baseQuery`\n   */\n  meta: BaseQueryMeta<BaseQuery>;\n} | {\n  error: unknown;\n  meta?: undefined;\n  /**\n   * If this is `true`, that means that this error is the result of `baseQueryFn`, `queryFn`, `transformResponse` or `transformErrorResponse` throwing an error instead of handling it properly.\n   * There can not be made any assumption about the shape of `error`.\n   */\n  isUnhandledError: true;\n};\nexport type QueryLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  /**\n   * A function that is called when the individual query is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\n   *\n   * Can be used to perform side-effects throughout the lifecycle of the query.\n   *\n   * @example\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   * import { messageCreated } from './notificationsSlice\n   * export interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({\n   *     baseUrl: '/',\n   *   }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, number>({\n   *       query: (id) => `post/${id}`,\n   *       async onQueryStarted(id, { dispatch, queryFulfilled }) {\n   *         // `onStart` side-effect\n   *         dispatch(messageCreated('Fetching posts...'))\n   *         try {\n   *           const { data } = await queryFulfilled\n   *           // `onSuccess` side-effect\n   *           dispatch(messageCreated('Posts received!'))\n   *         } catch (err) {\n   *           // `onError` side-effect\n   *           dispatch(messageCreated('Error fetching posts!'))\n   *         }\n   *       }\n   *     }),\n   *   }),\n   * })\n   * ```\n   */\n  onQueryStarted?(queryArgument: QueryArg, queryLifeCycleApi: QueryLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nexport type QueryLifecycleInfiniteQueryExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = QueryLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>;\nexport type QueryLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  /**\n   * A function that is called when the individual mutation is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\n   *\n   * Can be used for `optimistic updates`.\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   * export interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({\n   *     baseUrl: '/',\n   *   }),\n   *   tagTypes: ['Post'],\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, number>({\n   *       query: (id) => `post/${id}`,\n   *       providesTags: ['Post'],\n   *     }),\n   *     updatePost: build.mutation<void, Pick<Post, 'id'> & Partial<Post>>({\n   *       query: ({ id, ...patch }) => ({\n   *         url: `post/${id}`,\n   *         method: 'PATCH',\n   *         body: patch,\n   *       }),\n   *       invalidatesTags: ['Post'],\n   *       async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n   *         const patchResult = dispatch(\n   *           api.util.updateQueryData('getPost', id, (draft) => {\n   *             Object.assign(draft, patch)\n   *           })\n   *         )\n   *         try {\n   *           await queryFulfilled\n   *         } catch {\n   *           patchResult.undo()\n   *         }\n   *       },\n   *     }),\n   *   }),\n   * })\n   * ```\n   */\n  onQueryStarted?(queryArgument: QueryArg, mutationLifeCycleApi: MutationLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nexport interface QueryLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>, QueryLifecyclePromises<ResultType, BaseQuery> {}\nexport type MutationLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> = MutationBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath> & QueryLifecyclePromises<ResultType, BaseQuery>;\n\n/**\n * Provides a way to define a strongly-typed version of\n * {@linkcode QueryLifecycleQueryExtraOptions.onQueryStarted | onQueryStarted}\n * for a specific query.\n *\n * @example\n * <caption>#### __Create and reuse a strongly-typed `onQueryStarted` function__</caption>\n *\n * ```ts\n * import type { TypedQueryOnQueryStarted } from '@reduxjs/toolkit/query'\n * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n *\n * type Post = {\n *   id: number\n *   title: string\n *   userId: number\n * }\n *\n * type PostsApiResponse = {\n *   posts: Post[]\n *   total: number\n *   skip: number\n *   limit: number\n * }\n *\n * type QueryArgument = number | undefined\n *\n * type BaseQueryFunction = ReturnType<typeof fetchBaseQuery>\n *\n * const baseApiSlice = createApi({\n *   baseQuery: fetchBaseQuery({ baseUrl: 'https://dummyjson.com' }),\n *   reducerPath: 'postsApi',\n *   tagTypes: ['Posts'],\n *   endpoints: (build) => ({\n *     getPosts: build.query<PostsApiResponse, void>({\n *       query: () => `/posts`,\n *     }),\n *\n *     getPostById: build.query<Post, QueryArgument>({\n *       query: (postId) => `/posts/${postId}`,\n *     }),\n *   }),\n * })\n *\n * const updatePostOnFulfilled: TypedQueryOnQueryStarted<\n *   PostsApiResponse,\n *   QueryArgument,\n *   BaseQueryFunction,\n *   'postsApi'\n * > = async (queryArgument, { dispatch, queryFulfilled }) => {\n *   const result = await queryFulfilled\n *\n *   const { posts } = result.data\n *\n *   // Pre-fill the individual post entries with the results\n *   // from the list endpoint query\n *   dispatch(\n *     baseApiSlice.util.upsertQueryEntries(\n *       posts.map((post) => ({\n *         endpointName: 'getPostById',\n *         arg: post.id,\n *         value: post,\n *       })),\n *     ),\n *   )\n * }\n *\n * export const extendedApiSlice = baseApiSlice.injectEndpoints({\n *   endpoints: (build) => ({\n *     getPostsByUserId: build.query<PostsApiResponse, QueryArgument>({\n *       query: (userId) => `/posts/user/${userId}`,\n *\n *       onQueryStarted: updatePostOnFulfilled,\n *     }),\n *   }),\n * })\n * ```\n *\n * @template ResultType - The type of the result `data` returned by the query.\n * @template QueryArgumentType - The type of the argument passed into the query.\n * @template BaseQueryFunctionType - The type of the base query function being used.\n * @template ReducerPath - The type representing the `reducerPath` for the API slice.\n *\n * @since 2.4.0\n * @public\n */\nexport type TypedQueryOnQueryStarted<ResultType, QueryArgumentType, BaseQueryFunctionType extends BaseQueryFn, ReducerPath extends string = string> = QueryLifecycleQueryExtraOptions<ResultType, QueryArgumentType, BaseQueryFunctionType, ReducerPath>['onQueryStarted'];\n\n/**\n * Provides a way to define a strongly-typed version of\n * {@linkcode QueryLifecycleMutationExtraOptions.onQueryStarted | onQueryStarted}\n * for a specific mutation.\n *\n * @example\n * <caption>#### __Create and reuse a strongly-typed `onQueryStarted` function__</caption>\n *\n * ```ts\n * import type { TypedMutationOnQueryStarted } from '@reduxjs/toolkit/query'\n * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n *\n * type Post = {\n *   id: number\n *   title: string\n *   userId: number\n * }\n *\n * type PostsApiResponse = {\n *   posts: Post[]\n *   total: number\n *   skip: number\n *   limit: number\n * }\n *\n * type QueryArgument = Pick<Post, 'id'> & Partial<Post>\n *\n * type BaseQueryFunction = ReturnType<typeof fetchBaseQuery>\n *\n * const baseApiSlice = createApi({\n *   baseQuery: fetchBaseQuery({ baseUrl: 'https://dummyjson.com' }),\n *   reducerPath: 'postsApi',\n *   tagTypes: ['Posts'],\n *   endpoints: (build) => ({\n *     getPosts: build.query<PostsApiResponse, void>({\n *       query: () => `/posts`,\n *     }),\n *\n *     getPostById: build.query<Post, number>({\n *       query: (postId) => `/posts/${postId}`,\n *     }),\n *   }),\n * })\n *\n * const updatePostOnFulfilled: TypedMutationOnQueryStarted<\n *   Post,\n *   QueryArgument,\n *   BaseQueryFunction,\n *   'postsApi'\n * > = async ({ id, ...patch }, { dispatch, queryFulfilled }) => {\n *   const patchCollection = dispatch(\n *     baseApiSlice.util.updateQueryData('getPostById', id, (draftPost) => {\n *       Object.assign(draftPost, patch)\n *     }),\n *   )\n *\n *   try {\n *     await queryFulfilled\n *   } catch {\n *     patchCollection.undo()\n *   }\n * }\n *\n * export const extendedApiSlice = baseApiSlice.injectEndpoints({\n *   endpoints: (build) => ({\n *     addPost: build.mutation<Post, Omit<QueryArgument, 'id'>>({\n *       query: (body) => ({\n *         url: `posts/add`,\n *         method: 'POST',\n *         body,\n *       }),\n *\n *       onQueryStarted: updatePostOnFulfilled,\n *     }),\n *\n *     updatePost: build.mutation<Post, QueryArgument>({\n *       query: ({ id, ...patch }) => ({\n *         url: `post/${id}`,\n *         method: 'PATCH',\n *         body: patch,\n *       }),\n *\n *       onQueryStarted: updatePostOnFulfilled,\n *     }),\n *   }),\n * })\n * ```\n *\n * @template ResultType - The type of the result `data` returned by the query.\n * @template QueryArgumentType - The type of the argument passed into the query.\n * @template BaseQueryFunctionType - The type of the base query function being used.\n * @template ReducerPath - The type representing the `reducerPath` for the API slice.\n *\n * @since 2.4.0\n * @public\n */\nexport type TypedMutationOnQueryStarted<ResultType, QueryArgumentType, BaseQueryFunctionType extends BaseQueryFn, ReducerPath extends string = string> = QueryLifecycleMutationExtraOptions<ResultType, QueryArgumentType, BaseQueryFunctionType, ReducerPath>['onQueryStarted'];\nexport const buildQueryLifecycleHandler: InternalHandlerBuilder = ({\n  api,\n  context,\n  queryThunk,\n  mutationThunk\n}) => {\n  const isPendingThunk = isPending(queryThunk, mutationThunk);\n  const isRejectedThunk = isRejected(queryThunk, mutationThunk);\n  const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  type CacheLifecycle = {\n    resolve(value: {\n      data: unknown;\n      meta: unknown;\n    }): unknown;\n    reject(value: QueryFulfilledRejectionReason<any>): unknown;\n  };\n  const lifecycleMap: Record<string, CacheLifecycle> = {};\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (isPendingThunk(action)) {\n      const {\n        requestId,\n        arg: {\n          endpointName,\n          originalArgs\n        }\n      } = action.meta;\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const onQueryStarted = endpointDefinition?.onQueryStarted;\n      if (onQueryStarted) {\n        const lifecycle = {} as CacheLifecycle;\n        const queryFulfilled = new (Promise as PromiseConstructorWithKnownReason)<{\n          data: unknown;\n          meta: unknown;\n        }, QueryFulfilledRejectionReason<any>>((resolve, reject) => {\n          lifecycle.resolve = resolve;\n          lifecycle.reject = reject;\n        });\n        // prevent uncaught promise rejections from happening.\n        // if the original promise is used in any way, that will create a new promise that will throw again\n        queryFulfilled.catch(() => {});\n        lifecycleMap[requestId] = lifecycle;\n        const selector = (api.endpoints[endpointName] as any).select(isAnyQueryDefinition(endpointDefinition) ? originalArgs : requestId);\n        const extra = mwApi.dispatch((_, __, extra) => extra);\n        const lifecycleApi = {\n          ...mwApi,\n          getCacheEntry: () => selector(mwApi.getState()),\n          requestId,\n          extra,\n          updateCachedData: (isAnyQueryDefinition(endpointDefinition) ? (updateRecipe: Recipe<any>) => mwApi.dispatch(api.util.updateQueryData(endpointName as never, originalArgs as never, updateRecipe)) : undefined) as any,\n          queryFulfilled\n        };\n        onQueryStarted(originalArgs, lifecycleApi as any);\n      }\n    } else if (isFullfilledThunk(action)) {\n      const {\n        requestId,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.resolve({\n        data: action.payload,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    } else if (isRejectedThunk(action)) {\n      const {\n        requestId,\n        rejectedWithValue,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.reject({\n        error: action.payload ?? action.error,\n        isUnhandledError: !rejectedWithValue,\n        meta: baseQueryMeta as any\n      });\n      delete lifecycleMap[requestId];\n    }\n  };\n  return handler;\n};","import { QueryStatus } from '../apiState';\nimport type { QueryCacheKey } from '../apiState';\nimport { onFocus, onOnline } from '../setupListeners';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, SubMiddlewareApi } from './types';\nimport { countObjectKeys } from '../../utils/countObjectKeys';\nexport const buildWindowEventHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  context,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (onFocus.match(action)) {\n      refetchValidQueries(mwApi, 'refetchOnFocus');\n    }\n    if (onOnline.match(action)) {\n      refetchValidQueries(mwApi, 'refetchOnReconnect');\n    }\n  };\n  function refetchValidQueries(api: SubMiddlewareApi, type: 'refetchOnFocus' | 'refetchOnReconnect') {\n    const state = api.getState()[reducerPath];\n    const queries = state.queries;\n    const subscriptions = internalState.currentSubscriptions;\n    context.batch(() => {\n      for (const queryCacheKey of Object.keys(subscriptions)) {\n        const querySubState = queries[queryCacheKey];\n        const subscriptionSubState = subscriptions[queryCacheKey];\n        if (!subscriptionSubState || !querySubState) continue;\n        const shouldRefetch = Object.values(subscriptionSubState).some(sub => sub[type] === true) || Object.values(subscriptionSubState).every(sub => sub[type] === undefined) && state.config[type];\n        if (shouldRefetch) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            api.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey as QueryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            api.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};","import type { Action, Middleware, ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport type { EndpointDefinitions, FullTagDescription } from '../../endpointDefinitions';\nimport type { QueryStatus, QuerySubState, RootState } from '../apiState';\nimport type { QueryThunkArg } from '../buildThunks';\nimport { createAction, isAction } from '../rtkImports';\nimport { buildBatchedActionsHandler } from './batchActions';\nimport { buildCacheCollectionHandler } from './cacheCollection';\nimport { buildCacheLifecycleHandler } from './cacheLifecycle';\nimport { buildDevCheckHandler } from './devMiddleware';\nimport { buildInvalidationByTagsHandler } from './invalidationByTags';\nimport { buildPollingHandler } from './polling';\nimport { buildQueryLifecycleHandler } from './queryLifecycle';\nimport type { BuildMiddlewareInput, InternalHandlerBuilder, InternalMiddlewareState } from './types';\nimport { buildWindowEventHandler } from './windowEventHandling';\nimport type { ApiEndpointQuery } from '../module';\nexport type { ReferenceCacheCollection } from './cacheCollection';\nexport type { MutationCacheLifecycleApi, QueryCacheLifecycleApi, ReferenceCacheLifecycle } from './cacheLifecycle';\nexport type { MutationLifecycleApi, QueryLifecycleApi, ReferenceQueryLifecycle, TypedMutationOnQueryStarted, TypedQueryOnQueryStarted } from './queryLifecycle';\nexport type { SubscriptionSelectors } from './types';\nexport function buildMiddleware<Definitions extends EndpointDefinitions, ReducerPath extends string, TagTypes extends string>(input: BuildMiddlewareInput<Definitions, ReducerPath, TagTypes>) {\n  const {\n    reducerPath,\n    queryThunk,\n    api,\n    context\n  } = input;\n  const {\n    apiUid\n  } = context;\n  const actions = {\n    invalidateTags: createAction<Array<TagTypes | FullTagDescription<TagTypes> | null | undefined>>(`${reducerPath}/invalidateTags`)\n  };\n  const isThisApiSliceAction = (action: Action) => action.type.startsWith(`${reducerPath}/`);\n  const handlerBuilders: InternalHandlerBuilder[] = [buildDevCheckHandler, buildCacheCollectionHandler, buildInvalidationByTagsHandler, buildPollingHandler, buildCacheLifecycleHandler, buildQueryLifecycleHandler];\n  const middleware: Middleware<{}, RootState<Definitions, string, ReducerPath>, ThunkDispatch<any, any, UnknownAction>> = mwApi => {\n    let initialized = false;\n    const internalState: InternalMiddlewareState = {\n      currentSubscriptions: {}\n    };\n    const builderArgs = {\n      ...(input as any as BuildMiddlewareInput<EndpointDefinitions, string, string>),\n      internalState,\n      refetchQuery,\n      isThisApiSliceAction\n    };\n    const handlers = handlerBuilders.map(build => build(builderArgs));\n    const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n    const windowEventsHandler = buildWindowEventHandler(builderArgs);\n    return next => {\n      return action => {\n        if (!isAction(action)) {\n          return next(action);\n        }\n        if (!initialized) {\n          initialized = true;\n          // dispatch before any other action\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        const mwApiWithNext = {\n          ...mwApi,\n          next\n        };\n        const stateBefore = mwApi.getState();\n        const [actionShouldContinue, internalProbeResult] = batchedActionsHandler(action, mwApiWithNext, stateBefore);\n        let res: any;\n        if (actionShouldContinue) {\n          res = next(action);\n        } else {\n          res = internalProbeResult;\n        }\n        if (!!mwApi.getState()[reducerPath]) {\n          // Only run these checks if the middleware is registered okay\n\n          // This looks for actions that aren't specific to the API slice\n          windowEventsHandler(action, mwApiWithNext, stateBefore);\n          if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n            // Only run these additional checks if the actions are part of the API slice,\n            // or the action has hydration-related data\n            for (const handler of handlers) {\n              handler(action, mwApiWithNext, stateBefore);\n            }\n          }\n        }\n        return res;\n      };\n    };\n  };\n  return {\n    middleware,\n    actions\n  };\n  function refetchQuery(querySubState: Exclude<QuerySubState<any>, {\n    status: QueryStatus.uninitialized;\n  }>) {\n    return (input.api.endpoints[querySubState.endpointName] as ApiEndpointQuery<any, any>).initiate(querySubState.originalArgs as any, {\n      subscribe: false,\n      forceRefetch: true\n    });\n  }\n}","import { buildCreateApi } from '../createApi';\nimport { coreModule } from './module';\nexport const createApi = /* @__PURE__ */buildCreateApi(coreModule());\nexport { QueryStatus } from './apiState';\nexport type { CombinedState, InfiniteData, InfiniteQueryConfigOptions, InfiniteQuerySubState, MutationKeys, QueryCacheKey, QueryKeys, QuerySubState, RootState, SubscriptionOptions } from './apiState';\nexport type { InfiniteQueryActionCreatorResult, MutationActionCreatorResult, QueryActionCreatorResult, StartQueryActionCreatorOptions } from './buildInitiate';\nexport type { MutationCacheLifecycleApi, MutationLifecycleApi, QueryCacheLifecycleApi, QueryLifecycleApi, SubscriptionSelectors, TypedMutationOnQueryStarted, TypedQueryOnQueryStarted } from './buildMiddleware/index';\nexport { skipToken } from './buildSelectors';\nexport type { InfiniteQueryResultSelectorResult, MutationResultSelectorResult, QueryResultSelectorResult, SkipToken } from './buildSelectors';\nexport type { SliceActions } from './buildSlice';\nexport type { PatchQueryDataThunk, UpdateQueryDataThunk, UpsertQueryDataThunk } from './buildThunks';\nexport { coreModuleName } from './module';\nexport type { ApiEndpointInfiniteQuery, ApiEndpointMutation, ApiEndpointQuery, CoreModule, InternalActions, PrefetchOptions, ThunkWithReturnValue } from './module';\nexport { setupListeners } from './setupListeners';\nexport { buildCreateApi, coreModule };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}