{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\binig\\\\Desktop\\\\Campus-Cartel\\\\campus-connect\\\\src\\\\components\\\\dashboard\\\\groups\\\\Chat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport API_BASE_URL from '../../../apiConfigure';\nimport { motion } from 'framer-motion';\nimport '../../../styles/components/dashboard/groups/Chat.css'; // Import the CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = ({\n  groupId,\n  userType,\n  isMember,\n  currentUserId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const messagesEndRef = useRef(null);\n  const [isLoadingMessages, setIsLoadingMessages] = useState(true);\n  useEffect(() => {\n    const fetchMessages = async () => {\n      if (!groupId) return;\n      setIsLoadingMessages(true);\n      try {\n        const response = await axios.get(`${API_BASE_URL}/groups/${groupId}/messages/`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('access_token')}`\n          }\n        });\n        setMessages(response.data);\n      } catch (error) {\n        console.error(\"Failed to fetch messages:\", error);\n        // Optionally set an error state to display to the user\n      } finally {\n        setIsLoadingMessages(false);\n      }\n    };\n    fetchMessages();\n  }, [groupId]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  const handleSendMessage = async () => {\n    if (!newMessage.trim()) return;\n    try {\n      const response = await axios.post(`${API_BASE_URL}/groups/${groupId}/messages/`, {\n        content: newMessage\n      }, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('access_token')}`\n        }\n      });\n      setMessages(prevMessages => [...prevMessages, response.data]);\n      setNewMessage('');\n    } catch (error) {\n      alert('Failed to send message. Are you a member and a student?');\n      console.error(\"Send message error:\", error);\n    }\n  };\n  if (userType !== 'student') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-info-message\",\n      children: \"Only students can participate in group chats.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isMember) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-info-message\",\n      children: \"Join this group to view and send messages.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-component-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Group Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages-area\",\n      children: [isLoadingMessages && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 74\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 31\n      }, this), !isLoadingMessages && messages.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-info-message\",\n        children: \"No messages yet. Be the first to say hi!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), messages.map(message => {\n        // Determine if the message is from the current user.\n        // This assumes your message object has a `sender` (ID) field and you pass `currentUserId`.\n        // If `sender_name` is unique and reliable, you could use that, but ID is safer.\n        const isMe = message.sender === currentUserId; // Adjust if sender ID is stored differently\n        return /*#__PURE__*/_jsxDEV(motion.div, {\n          className: `chat-message ${isMe ? 'chat-message-me' : 'chat-message-other'}`,\n          initial: {\n            opacity: 0,\n            y: 10\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          transition: {\n            duration: 0.3\n          },\n          children: [!isMe && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-sender\",\n            children: message.sender_name || 'User'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-timestamp\",\n            children: new Date(message.timestamp).toLocaleTimeString([], {\n              hour: '2-digit',\n              minute: '2-digit'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newMessage,\n        onChange: e => setNewMessage(e.target.value),\n        placeholder: \"Type a message...\",\n        className: \"chat-text-input\",\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            handleSendMessage();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"btn-primary chat-send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"n2J+4j3xEdbL6o6KqU/YUNVHdm4=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","API_BASE_URL","motion","jsxDEV","_jsxDEV","Chat","groupId","userType","isMember","currentUserId","_s","messages","setMessages","newMessage","setNewMessage","messagesEndRef","isLoadingMessages","setIsLoadingMessages","fetchMessages","response","get","headers","Authorization","localStorage","getItem","data","error","console","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","post","content","prevMessages","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","isMe","sender","div","initial","opacity","y","animate","transition","duration","sender_name","Date","timestamp","toLocaleTimeString","hour","minute","id","ref","type","value","onChange","e","target","placeholder","onKeyDown","key","shiftKey","preventDefault","onClick","_c","$RefreshReg$"],"sources":["C:/Users/binig/Desktop/Campus-Cartel/campus-connect/src/components/dashboard/groups/Chat.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport API_BASE_URL from '../../../apiConfigure';\r\nimport { motion } from 'framer-motion';\r\nimport '../../../styles/components/dashboard/groups/Chat.css'; // Import the CSS\r\n\r\ninterface ChatProps {\r\n  groupId: string;\r\n  userType: string;\r\n  isMember: boolean;\r\n  // Add currentUserId if sender_name is not directly available or to compare sender\r\n  currentUserId?: string | number; // Or however you identify the current user\r\n}\r\n\r\ninterface Message {\r\n  id: string;\r\n  sender: string | number; // Assuming sender is an ID\r\n  sender_name: string; // Keep if available, otherwise fetch/map\r\n  content: string;\r\n  timestamp: string;\r\n}\r\n\r\nconst Chat: React.FC<ChatProps> = ({ groupId, userType, isMember, currentUserId }) => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [isLoadingMessages, setIsLoadingMessages] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchMessages = async () => {\r\n      if (!groupId) return;\r\n      setIsLoadingMessages(true);\r\n      try {\r\n        const response = await axios.get<Message[]>(`${API_BASE_URL}/groups/${groupId}/messages/`, {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n          },\r\n        });\r\n        setMessages(response.data);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch messages:\", error);\r\n        // Optionally set an error state to display to the user\r\n      } finally {\r\n        setIsLoadingMessages(false);\r\n      }\r\n    };\r\n    fetchMessages();\r\n  }, [groupId]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!newMessage.trim()) return;\r\n    try {\r\n      const response = await axios.post<Message>(\r\n        `${API_BASE_URL}/groups/${groupId}/messages/`,\r\n        { content: newMessage },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('access_token')}`,\r\n          },\r\n        }\r\n      );\r\n      setMessages(prevMessages => [...prevMessages, response.data]);\r\n      setNewMessage('');\r\n    } catch (error) {\r\n      alert('Failed to send message. Are you a member and a student?');\r\n      console.error(\"Send message error:\", error);\r\n    }\r\n  };\r\n\r\n  if (userType !== 'student') {\r\n    return <div className=\"chat-info-message\">Only students can participate in group chats.</div>;\r\n  }\r\n\r\n  if (!isMember) {\r\n    return <div className=\"chat-info-message\">Join this group to view and send messages.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-component-container\">\r\n      <div className=\"chat-header\">\r\n        <h1>Group Chat</h1>\r\n      </div>\r\n      <div className=\"chat-messages-area\">\r\n        {isLoadingMessages && <div className=\"loading-spinner-container\"><div className=\"loading-spinner\" /></div>}\r\n        {!isLoadingMessages && messages.length === 0 && (\r\n            <p className=\"chat-info-message\">No messages yet. Be the first to say hi!</p>\r\n        )}\r\n        {messages.map((message) => {\r\n          // Determine if the message is from the current user.\r\n          // This assumes your message object has a `sender` (ID) field and you pass `currentUserId`.\r\n          // If `sender_name` is unique and reliable, you could use that, but ID is safer.\r\n          const isMe = message.sender === currentUserId; // Adjust if sender ID is stored differently\r\n          return (\r\n            <motion.div\r\n              key={message.id}\r\n              className={`chat-message ${isMe ? 'chat-message-me' : 'chat-message-other'}`}\r\n              initial={{ opacity: 0, y: 10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              transition={{ duration: 0.3 }}\r\n            >\r\n              {!isMe && <div className=\"message-sender\">{message.sender_name || 'User'}</div>}\r\n              <div className=\"message-content\">{message.content}</div>\r\n              <div className=\"message-timestamp\">{new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</div>\r\n            </motion.div>\r\n          );\r\n        })}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <div className=\"chat-input-area\">\r\n        <input\r\n          type=\"text\"\r\n          value={newMessage}\r\n          onChange={(e) => setNewMessage(e.target.value)}\r\n          placeholder=\"Type a message...\"\r\n          className=\"chat-text-input\"\r\n          onKeyDown={e => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSendMessage(); }}}\r\n        />\r\n        <button onClick={handleSendMessage} className=\"btn-primary chat-send-button\">\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}